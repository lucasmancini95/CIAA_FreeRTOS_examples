
mis_programas/leds_serial_FreeRTOS/out/leds_serial_FreeRTOS.elf:     file format elf32-littlearm
mis_programas/leds_serial_FreeRTOS/out/leds_serial_FreeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000445

Program Header:
0x70000001 off    0x00014b48 vaddr 0x1a004b48 paddr 0x1a004b48 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002ac0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004b50 memsz 0x00004b50 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004b50 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b44  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002ac0  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004b44  1a004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004b48  1a004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002b64  10002b64  000200a4  2**2
                  CONTENTS
 19 .debug_info   00025902  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004e57  00000000  00000000  000459a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ad1c  00000000  00000000  0004a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ee0  00000000  00000000  00055519  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001028  00000000  00000000  000563f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f50b  00000000  00000000  00057421  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001118a  00000000  00000000  0006692c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002ffd9  00000000  00000000  00077ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000a7a8f  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a7b0e  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002c40  00000000  00000000  000a7b48  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004b44 l    d  .init_array	00000000 .init_array
1a004b48 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b64 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002f74 l     F .text	000000a4 uartProcessIRQ
10002af0 l     O .bss	00000004 rxIsrCallbackUART0
10002af4 l     O .bss	00000004 rxIsrCallbackUART2
10002af8 l     O .bss	00000004 rxIsrCallbackUART3
10002afc l     O .bss	00000004 txIsrCallbackUART0
10002b00 l     O .bss	00000004 txIsrCallbackUART2
10002b04 l     O .bss	00000004 txIsrCallbackUART3
1a00497c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 leds_serial_FreeRTOS.c
00000000 l    df *ABS*	00000000 system.c
100000a4 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a000598 l     F .text	00000064 prvHeapInit
100000ac l     O .bss	00002000 ucHeap
1a0005fc l     F .text	00000058 prvInsertBlockIntoFreeList
100000a8 l     O .bss	00000004 pxEnd
100020ac l     O .bss	00000004 xBlockAllocatedBit
100020b0 l     O .bss	00000004 xFreeBytesRemaining
100020b4 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020b8 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a0007e0 l     F .text	0000001e prvIsQueueFull
1a0007fe l     F .text	0000001a prvIsQueueEmpty
1a000818 l     F .text	00000076 prvCopyDataToQueue
1a00088e l     F .text	00000024 prvCopyDataFromQueue
1a0008b2 l     F .text	0000006e prvUnlockQueue
1a0009a4 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c0 l     O .bss	00000168 uxIdleTaskStack.10728
10002228 l     O .bss	000005a0 uxTimerTaskStack.10735
100027c8 l     O .bss	00000060 xIdleTaskTCB.10727
10002828 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000fe4 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001010 l     F .text	00000092 prvInitialiseNewTask
1a0010a4 l     F .text	00000068 prvInitialiseTaskLists
1a00110c l     F .text	000000ac prvAddNewTaskToReadyList
1a0011b8 l     F .text	00000038 prvDeleteTCB
1a0011f0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00123c l     F .text	00000028 prvIdleTask
1a001264 l     F .text	00000098 prvAddCurrentTaskToDelayedList
1000288c l     O .bss	00000004 pxDelayedTaskList
10002890 l     O .bss	00000004 pxOverflowDelayedTaskList
10002894 l     O .bss	0000008c pxReadyTasksLists
10002920 l     O .bss	00000004 uxCurrentNumberOfTasks
10002924 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002928 l     O .bss	00000004 uxPendedTicks
1000292c l     O .bss	00000004 uxSchedulerSuspended
10002930 l     O .bss	00000004 uxTaskNumber
10002934 l     O .bss	00000004 uxTopReadyPriority
10002938 l     O .bss	00000014 xDelayedTaskList1
1000294c l     O .bss	00000014 xDelayedTaskList2
10002960 l     O .bss	00000004 xNextTaskUnblockTime
10002964 l     O .bss	00000004 xNumOfOverflows
10002968 l     O .bss	00000014 xPendingReadyList
1000297c l     O .bss	00000004 xSchedulerRunning
10002980 l     O .bss	00000014 xSuspendedTaskList
10002994 l     O .bss	00000014 xTasksWaitingTermination
100029a8 l     O .bss	00000004 xTickCount
100029ac l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001a0c l     F .text	00000020 prvGetNextExpireTime
1a001a2c l     F .text	00000048 prvInsertTimerInActiveList
1a001a74 l     F .text	00000070 prvCheckForValidListAndQueue
1a001e28 l     F .text	00000016 prvTimerTask
1a001bb4 l     F .text	00000078 prvSwitchTimerLists
1a001c2c l     F .text	0000002c prvSampleTimeNow
1a001c58 l     F .text	00000060 prvProcessExpiredTimer
1a001cb8 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001d2c l     F .text	000000fc prvProcessReceivedCommands
100029b0 l     O .bss	00000004 pxCurrentTimerList
100029b4 l     O .bss	00000004 pxOverflowTimerList
100029b8 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a58 l     O .bss	00000014 xActiveTimerList1
10002a6c l     O .bss	00000014 xActiveTimerList2
10002a80 l     O .bss	00000004 xLastTime.11777
10002a84 l     O .bss	00000050 xStaticTimerQueue.11827
10002ad4 l     O .bss	00000004 xTimerQueue
10002ad8 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001e40 l     F .text	00000040 prvTaskExitError
1a001e80 l     F .text	00000022 prvPortStartFirstTask
1a001ea8 l     F .text	0000000e vPortEnableVFP
1a001f10 l       .text	00000000 pxCurrentTCBConst2
1a001ff0 l       .text	00000000 pxCurrentTCBConst
10002adc l     O .bss	00000001 ucMaxSysCallPriority
10002ae0 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0021e4 l     F .text	00000044 Board_LED_Init
1a002228 l     F .text	00000040 Board_TEC_Init
1a002268 l     F .text	00000040 Board_GPIO_Init
1a0022a8 l     F .text	00000030 Board_ADC_Init
1a0022d8 l     F .text	00000038 Board_SPI_Init
1a002310 l     F .text	00000024 Board_I2C_Init
1a004808 l     O .text	00000008 GpioButtons
1a004810 l     O .text	0000000c GpioLeds
1a00481c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004834 l     O .text	00000004 InitClkStates
1a004838 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002484 l     F .text	0000002c Chip_UART_GetIndex
1a0048ac l     O .text	00000008 UART_BClock
1a0048b4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00262c l     F .text	00000014 Chip_ADC_GetClockIndex
1a002640 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0026f4 l     F .text	000000a4 pll_calc_divs
1a002798 l     F .text	0000010c pll_get_frac
1a0028a4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002b18 l     F .text	00000022 Chip_Clock_GetDivRate
10002ae8 l     O .bss	00000008 audio_usb_pll_freq
1a0048c8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004934 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002e6c l     F .text	00000014 Chip_SSP_GetClockIndex
1a002e80 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003238 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b08 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a00396c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00408c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004b48 l       .init_array	00000000 __init_array_end
1a004b44 l       .bss_RAM5	00000000 __preinit_array_end
1a004b44 l       .init_array	00000000 __init_array_start
1a004b44 l       .bss_RAM5	00000000 __preinit_array_start
1a00293c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0004e4 g     F .text	00000012 _isatty_r
1a003cf0 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00314c g     F .text	00000014 uartRxRead
1a0004f6 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001f58 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003cc0 g     F .text	00000030 printf
1a0023ca g     F .text	00000008 __stdio_init
1a003e12 g     F .text	00000024 __sseek
1a0039ec g     F .text	00000060 __sinit
1a003e40 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000e6c g     F .text	00000052 vQueueWaitForMessageRestricted
1a0039c0 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0026e6 g     F .text	0000000c Chip_ADC_SetResolution
1a00408a g     F .text	00000002 __malloc_unlock
1a001ff4 g     F .text	0000002c SysTick_Handler
1a002504 g     F .text	00000040 Chip_UART_SetBaud
1a000440  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00236c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a001f90 g     F .text	00000064 PendSV_Handler
1a000c20 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004b50 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0003b8 g     F .text	00000028 IRQ_Init
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002888 g     O .bss	00000004 pxCurrentTCB
1a0004da g     F .text	0000000a _fstat_r
53ff744a g       *ABS*	00000000 __valid_user_code_checksum
1a004b50 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001898 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002bba g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002058 g     F .text	00000110 xPortStartScheduler
1a003b48 g     F .text	00000016 memcpy
1a0017a4 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0039b4 g     F .text	0000000c _cleanup_r
1a002020  w    F .text	00000038 vPortSetupTimerInterrupt
1a00350c g     F .text	00000000 .hidden __aeabi_uldivmod
10002b64 g       .noinit	00000000 _noinit
1a003da8 g     F .text	00000010 puts
1a000770 g     F .text	00000070 vPortFree
1a00320a g     F .text	00000018 uartWriteString
10002b5c g     O .bss	00000004 SystemCoreClock
1a0024b0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002168 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002c38 g     F .text	0000004c Chip_Clock_GetRate
1a000eda g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00240c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00353c g     F .text	000002cc .hidden __udivmoddi4
1a000578 g     F .text	00000020 _sbrk_r
1a004804 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000500 g     F .text	0000004e _read_r
1a000ed4 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000cec g     F .text	00000158 xQueueReceive
10002b1c g     O .bss	00000040 xQueueRegistry
1a000f68 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004b48 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004b0c g     O .text	00000004 _global_impure_ptr
1a003b00 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000654 g     F .text	0000011c pvPortMalloc
1a002388 g     F .text	00000030 Board_Init
1a0004ce  w    F .text	00000002 _init
1a000ebe g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001478 g     F .text	0000000c xTaskGetTickCount
1a000aa4 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002b64 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000444 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002e34 g     F .text	00000038 Chip_I2C_SetClockRate
1a00195c g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0028f0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00180c g     F .text	0000008c xTaskRemoveFromEventList
1a000fac  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
10002b14 g     O .bss	00000004 xQueue_transm_datos
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004aac g     O .text	00000020 __sf_fake_stderr
1a002e10 g     F .text	00000024 Chip_I2C_Init
1a003222 g     F .text	0000000a UART2_IRQHandler
1a002aac g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0049c4 g     O .text	000000e6 gpioPinsInit
1a003018 g     F .text	00000090 uartInterrupt
1a000f80  w    F .text	0000002c vAssertCalled
1a0031f0 g     F .text	0000001a uartWriteByte
1a002e98 g     F .text	00000012 Chip_SSP_SetClockRate
1a0040ba g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a004620 g     F .text	00000000 memchr
1a0018b0 g     F .text	00000080 xTaskCheckForTimeOut
1a003b70 g     F .text	0000009c _free_r
1a002b94 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a4 g       .bss	00000000 _bss
1a0026b4 g     F .text	00000032 Chip_ADC_SetSampleRate
10002ae4 g     O .bss	00000004 freeRtosInterruptCallback
1a001468 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002eaa g     F .text	0000003e Chip_SSP_SetBitRate
1a000f26 g     F .text	00000028 uxListRemove
1a002c98 g     F .text	00000002 Chip_GPIO_Init
1a004830 g     O .text	00000004 OscRateIn
1a003174 g     F .text	0000007c uartInit
1a0012fc g     F .text	00000072 xTaskCreateStatic
10002b64 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0016dc g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0009c6 g     F .text	00000090 xQueueGenericCreateStatic
1a0017d4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a0004d0 g     F .text	0000000a _close_r
1a00326c g     F .text	000001ac gpioInit
1a000f50 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001b48 g     F .text	0000006c xTimerGenericCommand
1a003ee4 g     F .text	000000dc __swsetup_r
1a000fc8  w    F .text	0000001c vApplicationStackOverflowHook
1a003808  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003a4c g     F .text	00000078 __sfp
1a003db8 g     F .text	00000022 __sread
1a003484 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004088 g     F .text	00000002 __malloc_lock
1a002358 g     F .text	00000014 Board_UARTPutChar
10002b18 g     O .bss	00000004 sem_act
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003918 g     F .text	00000054 _fflush_r
1a004acc g     O .text	00000020 __sf_fake_stdin
1a002958 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003b5e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0003e0 g     F .text	00000060 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000ef2 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001ef0 g     F .text	00000024 SVC_Handler
1a003e36 g     F .text	00000008 __sclose
1a001ae4 g     F .text	00000064 xTimerCreateTimerTask
1a003c0c g     F .text	000000b4 _malloc_r
1a003134 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002bc8 g     F .text	0000003c Chip_Clock_EnableOpts
1a0023c2 g     F .text	00000008 __stdio_getchar
1a000a56 g     F .text	0000004e xQueueGenericCreate
1a002974 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002a2c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002f20 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003418 g     F .text	0000006a gpioWrite
1a0004cc  w    F .text	00000002 _fini
1a003cc0 g     F .text	00000030 iprintf
1a00159c g     F .text	000000f4 xTaskResumeAll
1a0013d4 g     F .text	00000094 vTaskStartScheduler
1a002674 g     F .text	00000040 Chip_ADC_Init
10002b60 g     O .bss	00000004 g_pUsbApi
1a0023d4 g     F .text	00000038 Board_SetupMuxing
1a002544 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00054e g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a00430c g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a00380c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003160 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001930 g     F .text	0000000c vTaskMissedYield
10002b64 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002ee8 g     F .text	00000038 Chip_SSP_Init
1a000374 g     F .text	00000044 handler_dato_recibido
1a000e44 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000300 g     F .text	00000074 data_receiver
1a001484 g     F .text	00000118 xTaskIncrementTick
1a003fc0 g     F .text	00000048 __swhatbuf_r
1a0021c4 g     F .text	00000020 DAC_IRQHandler
1a002334 g     F .text	00000024 Board_Debug_Init
1a0023b8 g     F .text	0000000a __stdio_putchar
1a000920 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002df0 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00136e g     F .text	00000066 xTaskCreate
1a002c9c g     F .text	00000154 Chip_SetupCoreClock
1a003dda g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a0040e0 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003ac4 g     F .text	0000003c _fwalk_reent
1a002c84 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001690 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004aec g     O .text	00000020 __sf_fake_stdout
1a00193c g     F .text	00000020 xTaskGetSchedulerState
1a003808  w    F .text	00000002 .hidden __aeabi_idiv0
1a0030a8 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a004008 g     F .text	00000080 __smakebuf_r
1a001ebc g     F .text	0000002c pxPortInitialiseStack
1a0043f8 g     F .text	00000224 _printf_i
1a002c04 g     F .text	00000034 Chip_Clock_Enable
1a00322c g     F .text	0000000a UART3_IRQHandler
10002b10 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0034a0 g     F .text	0000006c boardInit
1a001f14 g     F .text	00000044 vPortEnterCritical
10002b0c g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0040e0 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002b3c g     F .text	00000058 Chip_Clock_SetBaseClock
1a002f58 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002478 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 45 04 00 1a 79 01 00 1a 7b 01 00 1a     ....E...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 4a 74 ff 53     }...........Jt.S
	...
1a00002c:	f1 1e 00 1a 85 01 00 1a 00 00 00 00 91 1f 00 1a     ................
1a00003c:	f5 1f 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	c5 21 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .!..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	85 34 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .4..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 23 32 00 1a 2d 32 00 1a     ........#2..-2..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004b50 	.word	0x1a004b50
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a004b50 	.word	0x1a004b50
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004b50 	.word	0x1a004b50
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004b50 	.word	0x1a004b50
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004b50 	.word	0x1a004b50
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002ac0 	.word	0x00002ac0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f002 fed8 	bl	1a002f74 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <data_receiver>:


/*==================[definiciones de funciones/tareas]=====================*/


void data_receiver( void* taskParmPtr ){
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
	uint8_t received_value;
   while(TRUE) {
	   if (xQueueReceive( xQueue_transm_datos, &received_value, portMAX_DELAY) == pdTRUE ){
1a000304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000308:	f10d 0107 	add.w	r1, sp, #7
1a00030c:	4b16      	ldr	r3, [pc, #88]	; (1a000368 <data_receiver+0x68>)
1a00030e:	6818      	ldr	r0, [r3, #0]
1a000310:	f000 fcec 	bl	1a000cec <xQueueReceive>
1a000314:	2801      	cmp	r0, #1
1a000316:	d1f5      	bne.n	1a000304 <data_receiver+0x4>
		   gpioWrite( LED_1,received_value & MASK_LED_1);
1a000318:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00031c:	f001 0101 	and.w	r1, r1, #1
1a000320:	202b      	movs	r0, #43	; 0x2b
1a000322:	f003 f879 	bl	1a003418 <gpioWrite>
		   gpioWrite( LED_2,received_value & MASK_LED_2);
1a000326:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00032a:	f001 0102 	and.w	r1, r1, #2
1a00032e:	202c      	movs	r0, #44	; 0x2c
1a000330:	f003 f872 	bl	1a003418 <gpioWrite>
		   gpioWrite( LED_3,received_value & MASK_LED_3);
1a000334:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000338:	f001 0104 	and.w	r1, r1, #4
1a00033c:	202d      	movs	r0, #45	; 0x2d
1a00033e:	f003 f86b 	bl	1a003418 <gpioWrite>
		   //received_value &= 0;
		   uartWriteString(UART_USB, "The value :" );
1a000342:	490a      	ldr	r1, [pc, #40]	; (1a00036c <data_receiver+0x6c>)
1a000344:	2003      	movs	r0, #3
1a000346:	f002 ff60 	bl	1a00320a <uartWriteString>
		   uartTxWrite(UART_USB,received_value);
1a00034a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00034e:	2003      	movs	r0, #3
1a000350:	f002 ff06 	bl	1a003160 <uartTxWrite>
		   uartWriteString(UART_USB, " was printed binary in the LEDS (3 LSB)\n" );
1a000354:	4906      	ldr	r1, [pc, #24]	; (1a000370 <data_receiver+0x70>)
1a000356:	2003      	movs	r0, #3
1a000358:	f002 ff57 	bl	1a00320a <uartWriteString>
		   vTaskDelay( (TIEMPO_PERMANENCIA)/ portTICK_RATE_MS);
1a00035c:	f241 3088 	movw	r0, #5000	; 0x1388
1a000360:	f001 f996 	bl	1a001690 <vTaskDelay>
1a000364:	e7ce      	b.n	1a000304 <data_receiver+0x4>
1a000366:	bf00      	nop
1a000368:	10002b14 	.word	0x10002b14
1a00036c:	1a0046c0 	.word	0x1a0046c0
1a000370:	1a0046cc 	.word	0x1a0046cc

1a000374 <handler_dato_recibido>:
	uartCallbackSet(UART_USB, UART_RECEIVE, handler_dato_recibido, NULL);

	uartInterrupt(UART_USB, TRUE);
}

void handler_dato_recibido(void *noUsado) {
1a000374:	b510      	push	{r4, lr}
1a000376:	b082      	sub	sp, #8

	uint8_t rx;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000378:	2400      	movs	r4, #0
1a00037a:	9400      	str	r4, [sp, #0]

	rx = uartRxRead(UART_USB);
1a00037c:	2003      	movs	r0, #3
1a00037e:	f002 fee5 	bl	1a00314c <uartRxRead>
1a000382:	f88d 0007 	strb.w	r0, [sp, #7]
	xQueueSendFromISR(xQueue_transm_datos,&rx, &xHigherPriorityTaskWoken);
1a000386:	4623      	mov	r3, r4
1a000388:	466a      	mov	r2, sp
1a00038a:	f10d 0107 	add.w	r1, sp, #7
1a00038e:	4808      	ldr	r0, [pc, #32]	; (1a0003b0 <handler_dato_recibido+0x3c>)
1a000390:	6800      	ldr	r0, [r0, #0]
1a000392:	f000 fc45 	bl	1a000c20 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
1a000396:	9b00      	ldr	r3, [sp, #0]
1a000398:	b13b      	cbz	r3, 1a0003aa <handler_dato_recibido+0x36>
1a00039a:	4b06      	ldr	r3, [pc, #24]	; (1a0003b4 <handler_dato_recibido+0x40>)
1a00039c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0003a0:	601a      	str	r2, [r3, #0]
1a0003a2:	f3bf 8f4f 	dsb	sy
1a0003a6:	f3bf 8f6f 	isb	sy

}
1a0003aa:	b002      	add	sp, #8
1a0003ac:	bd10      	pop	{r4, pc}
1a0003ae:	bf00      	nop
1a0003b0:	10002b14 	.word	0x10002b14
1a0003b4:	e000ed04 	.word	0xe000ed04

1a0003b8 <IRQ_Init>:
void IRQ_Init(void){
1a0003b8:	b508      	push	{r3, lr}
	uartConfig(UART_USB, 115200);
1a0003ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003be:	2003      	movs	r0, #3
1a0003c0:	f002 fed8 	bl	1a003174 <uartInit>
	uartCallbackSet(UART_USB, UART_RECEIVE, handler_dato_recibido, NULL);
1a0003c4:	2300      	movs	r3, #0
1a0003c6:	4a05      	ldr	r2, [pc, #20]	; (1a0003dc <IRQ_Init+0x24>)
1a0003c8:	4619      	mov	r1, r3
1a0003ca:	2003      	movs	r0, #3
1a0003cc:	f002 fe6c 	bl	1a0030a8 <uartCallbackSet>
	uartInterrupt(UART_USB, TRUE);
1a0003d0:	2101      	movs	r1, #1
1a0003d2:	2003      	movs	r0, #3
1a0003d4:	f002 fe20 	bl	1a003018 <uartInterrupt>
}
1a0003d8:	bd08      	pop	{r3, pc}
1a0003da:	bf00      	nop
1a0003dc:	1a000375 	.word	0x1a000375

1a0003e0 <main>:
int main(void){
1a0003e0:	b500      	push	{lr}
1a0003e2:	b083      	sub	sp, #12
	   boardConfig();
1a0003e4:	f003 f85c 	bl	1a0034a0 <boardInit>
		IRQ_Init();
1a0003e8:	f7ff ffe6 	bl	1a0003b8 <IRQ_Init>
		xQueue_transm_datos = xQueueCreate(MAX_SIZE_PAQUETE, sizeof(uint8_t));
1a0003ec:	2200      	movs	r2, #0
1a0003ee:	2101      	movs	r1, #1
1a0003f0:	200a      	movs	r0, #10
1a0003f2:	f000 fb30 	bl	1a000a56 <xQueueGenericCreate>
1a0003f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00042c <main+0x4c>)
1a0003f8:	6018      	str	r0, [r3, #0]
		if (xQueue_transm_datos == NULL) {
1a0003fa:	b170      	cbz	r0, 1a00041a <main+0x3a>
	   xTaskCreate(
1a0003fc:	2300      	movs	r3, #0
1a0003fe:	9301      	str	r3, [sp, #4]
1a000400:	2201      	movs	r2, #1
1a000402:	9200      	str	r2, [sp, #0]
1a000404:	22b4      	movs	r2, #180	; 0xb4
1a000406:	490a      	ldr	r1, [pc, #40]	; (1a000430 <main+0x50>)
1a000408:	480a      	ldr	r0, [pc, #40]	; (1a000434 <main+0x54>)
1a00040a:	f000 ffb0 	bl	1a00136e <xTaskCreate>
	   printf("Ingresar dato 1\r\n ");
1a00040e:	480a      	ldr	r0, [pc, #40]	; (1a000438 <main+0x58>)
1a000410:	f003 fc56 	bl	1a003cc0 <iprintf>
	   vTaskStartScheduler();
1a000414:	f000 ffde 	bl	1a0013d4 <vTaskStartScheduler>
1a000418:	e7fe      	b.n	1a000418 <main+0x38>
			printf("No se pudo crear la COLA\n");
1a00041a:	4808      	ldr	r0, [pc, #32]	; (1a00043c <main+0x5c>)
1a00041c:	f003 fcc4 	bl	1a003da8 <puts>
			gpioWrite(LED1, ON);
1a000420:	2101      	movs	r1, #1
1a000422:	202b      	movs	r0, #43	; 0x2b
1a000424:	f002 fff8 	bl	1a003418 <gpioWrite>
1a000428:	e7fe      	b.n	1a000428 <main+0x48>
1a00042a:	bf00      	nop
1a00042c:	10002b14 	.word	0x10002b14
1a000430:	1a004714 	.word	0x1a004714
1a000434:	1a000301 	.word	0x1a000301
1a000438:	1a004724 	.word	0x1a004724
1a00043c:	1a0046f8 	.word	0x1a0046f8

1a000440 <initialise_monitor_handles>:
}
1a000440:	4770      	bx	lr
1a000442:	Address 0x000000001a000442 is out of bounds.


1a000444 <Reset_Handler>:
void Reset_Handler(void) {
1a000444:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000446:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000448:	4b19      	ldr	r3, [pc, #100]	; (1a0004b0 <Reset_Handler+0x6c>)
1a00044a:	4a1a      	ldr	r2, [pc, #104]	; (1a0004b4 <Reset_Handler+0x70>)
1a00044c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00044e:	3304      	adds	r3, #4
1a000450:	4a19      	ldr	r2, [pc, #100]	; (1a0004b8 <Reset_Handler+0x74>)
1a000452:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000454:	2300      	movs	r3, #0
1a000456:	e005      	b.n	1a000464 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000458:	4a18      	ldr	r2, [pc, #96]	; (1a0004bc <Reset_Handler+0x78>)
1a00045a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000462:	3301      	adds	r3, #1
1a000464:	2b07      	cmp	r3, #7
1a000466:	d9f7      	bls.n	1a000458 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000468:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00046a:	4b15      	ldr	r3, [pc, #84]	; (1a0004c0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00046c:	e007      	b.n	1a00047e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00046e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000472:	689a      	ldr	r2, [r3, #8]
1a000474:	6859      	ldr	r1, [r3, #4]
1a000476:	6818      	ldr	r0, [r3, #0]
1a000478:	f7ff fe87 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00047c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00047e:	4a11      	ldr	r2, [pc, #68]	; (1a0004c4 <Reset_Handler+0x80>)
1a000480:	4293      	cmp	r3, r2
1a000482:	d3f4      	bcc.n	1a00046e <Reset_Handler+0x2a>
1a000484:	e006      	b.n	1a000494 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000486:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000488:	6859      	ldr	r1, [r3, #4]
1a00048a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00048e:	f7ff fe8b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000492:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000494:	4a0c      	ldr	r2, [pc, #48]	; (1a0004c8 <Reset_Handler+0x84>)
1a000496:	4293      	cmp	r3, r2
1a000498:	d3f5      	bcc.n	1a000486 <Reset_Handler+0x42>
    SystemInit();
1a00049a:	f002 fd41 	bl	1a002f20 <SystemInit>
    __libc_init_array();
1a00049e:	f003 fb2f 	bl	1a003b00 <__libc_init_array>
    initialise_monitor_handles();
1a0004a2:	f7ff ffcd 	bl	1a000440 <initialise_monitor_handles>
    main();
1a0004a6:	f7ff ff9b 	bl	1a0003e0 <main>
        __asm__ volatile("wfi");
1a0004aa:	bf30      	wfi
1a0004ac:	e7fd      	b.n	1a0004aa <Reset_Handler+0x66>
1a0004ae:	bf00      	nop
1a0004b0:	40053100 	.word	0x40053100
1a0004b4:	10df1000 	.word	0x10df1000
1a0004b8:	01dff7ff 	.word	0x01dff7ff
1a0004bc:	e000e280 	.word	0xe000e280
1a0004c0:	1a000114 	.word	0x1a000114
1a0004c4:	1a000150 	.word	0x1a000150
1a0004c8:	1a000178 	.word	0x1a000178

1a0004cc <_fini>:
void _fini(void) {}
1a0004cc:	4770      	bx	lr

1a0004ce <_init>:
void _init(void) {}
1a0004ce:	4770      	bx	lr

1a0004d0 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0004d0:	2309      	movs	r3, #9
1a0004d2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004d8:	4770      	bx	lr

1a0004da <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0004da:	2358      	movs	r3, #88	; 0x58
1a0004dc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004e2:	4770      	bx	lr

1a0004e4 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0004e4:	2902      	cmp	r1, #2
1a0004e6:	d801      	bhi.n	1a0004ec <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0004e8:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0004ea:	4770      	bx	lr
       SET_ERR(EBADF);
1a0004ec:	2309      	movs	r3, #9
1a0004ee:	6003      	str	r3, [r0, #0]
       return -1;
1a0004f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004f4:	4770      	bx	lr

1a0004f6 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0004f6:	2358      	movs	r3, #88	; 0x58
1a0004f8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004fe:	4770      	bx	lr

1a000500 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000500:	2902      	cmp	r1, #2
1a000502:	d81f      	bhi.n	1a000544 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000508:	461d      	mov	r5, r3
1a00050a:	4617      	mov	r7, r2
1a00050c:	4606      	mov	r6, r0
  size_t i = 0;
1a00050e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000510:	42ac      	cmp	r4, r5
1a000512:	d211      	bcs.n	1a000538 <_read_r+0x38>
         int c = __stdio_getchar();
1a000514:	f001 ff55 	bl	1a0023c2 <__stdio_getchar>
         if( c != -1 ){
1a000518:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00051c:	d0f8      	beq.n	1a000510 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00051e:	f104 0801 	add.w	r8, r4, #1
1a000522:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000524:	280d      	cmp	r0, #13
1a000526:	d003      	beq.n	1a000530 <_read_r+0x30>
1a000528:	280a      	cmp	r0, #10
1a00052a:	d001      	beq.n	1a000530 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a00052c:	4644      	mov	r4, r8
1a00052e:	e7ef      	b.n	1a000510 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000530:	f001 ff47 	bl	1a0023c2 <__stdio_getchar>
               return i;
1a000534:	4640      	mov	r0, r8
1a000536:	e003      	b.n	1a000540 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000538:	2313      	movs	r3, #19
1a00053a:	6033      	str	r3, [r6, #0]
      return -1;
1a00053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000544:	2313      	movs	r3, #19
1a000546:	6003      	str	r3, [r0, #0]
      return -1;
1a000548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00054c:	4770      	bx	lr

1a00054e <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00054e:	2902      	cmp	r1, #2
1a000550:	d80c      	bhi.n	1a00056c <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000552:	b570      	push	{r4, r5, r6, lr}
1a000554:	461d      	mov	r5, r3
1a000556:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000558:	2400      	movs	r4, #0
1a00055a:	e003      	b.n	1a000564 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a00055c:	5d30      	ldrb	r0, [r6, r4]
1a00055e:	f001 ff2b 	bl	1a0023b8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000562:	3401      	adds	r4, #1
1a000564:	42ac      	cmp	r4, r5
1a000566:	d3f9      	bcc.n	1a00055c <_write_r+0xe>
       return n;
1a000568:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00056a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00056c:	2313      	movs	r3, #19
1a00056e:	6003      	str	r3, [r0, #0]
       return -1;
1a000570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000574:	4770      	bx	lr
1a000576:	Address 0x000000001a000576 is out of bounds.


1a000578 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000578:	4b05      	ldr	r3, [pc, #20]	; (1a000590 <_sbrk_r+0x18>)
1a00057a:	681b      	ldr	r3, [r3, #0]
1a00057c:	b123      	cbz	r3, 1a000588 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00057e:	4b04      	ldr	r3, [pc, #16]	; (1a000590 <_sbrk_r+0x18>)
1a000580:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000582:	4401      	add	r1, r0
1a000584:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000586:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000588:	4b01      	ldr	r3, [pc, #4]	; (1a000590 <_sbrk_r+0x18>)
1a00058a:	4a02      	ldr	r2, [pc, #8]	; (1a000594 <_sbrk_r+0x1c>)
1a00058c:	601a      	str	r2, [r3, #0]
1a00058e:	e7f6      	b.n	1a00057e <_sbrk_r+0x6>
1a000590:	100000a4 	.word	0x100000a4
1a000594:	10002b64 	.word	0x10002b64

1a000598 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000598:	4a12      	ldr	r2, [pc, #72]	; (1a0005e4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00059a:	f012 0f07 	tst.w	r2, #7
1a00059e:	d01e      	beq.n	1a0005de <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0005a0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0005a2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0005a6:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0005aa:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0005ac:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0005ae:	480e      	ldr	r0, [pc, #56]	; (1a0005e8 <prvHeapInit+0x50>)
1a0005b0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a0005b2:	2100      	movs	r1, #0
1a0005b4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a0005b6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a0005b8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0005ba:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a0005be:	480b      	ldr	r0, [pc, #44]	; (1a0005ec <prvHeapInit+0x54>)
1a0005c0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a0005c2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a0005c4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0005c6:	1a99      	subs	r1, r3, r2
1a0005c8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0005ca:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0005cc:	4b08      	ldr	r3, [pc, #32]	; (1a0005f0 <prvHeapInit+0x58>)
1a0005ce:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0005d0:	4b08      	ldr	r3, [pc, #32]	; (1a0005f4 <prvHeapInit+0x5c>)
1a0005d2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0005d4:	4b08      	ldr	r3, [pc, #32]	; (1a0005f8 <prvHeapInit+0x60>)
1a0005d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0005da:	601a      	str	r2, [r3, #0]
}
1a0005dc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0005de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0005e2:	e7e4      	b.n	1a0005ae <prvHeapInit+0x16>
1a0005e4:	100000ac 	.word	0x100000ac
1a0005e8:	100020b8 	.word	0x100020b8
1a0005ec:	100000a8 	.word	0x100000a8
1a0005f0:	100020b4 	.word	0x100020b4
1a0005f4:	100020b0 	.word	0x100020b0
1a0005f8:	100020ac 	.word	0x100020ac

1a0005fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0005fc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0005fe:	4b13      	ldr	r3, [pc, #76]	; (1a00064c <prvInsertBlockIntoFreeList+0x50>)
1a000600:	681a      	ldr	r2, [r3, #0]
1a000602:	4282      	cmp	r2, r0
1a000604:	d31b      	bcc.n	1a00063e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000606:	6859      	ldr	r1, [r3, #4]
1a000608:	185c      	adds	r4, r3, r1
1a00060a:	4284      	cmp	r4, r0
1a00060c:	d103      	bne.n	1a000616 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00060e:	6840      	ldr	r0, [r0, #4]
1a000610:	4401      	add	r1, r0
1a000612:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000614:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000616:	6841      	ldr	r1, [r0, #4]
1a000618:	1844      	adds	r4, r0, r1
1a00061a:	42a2      	cmp	r2, r4
1a00061c:	d113      	bne.n	1a000646 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00061e:	4c0c      	ldr	r4, [pc, #48]	; (1a000650 <prvInsertBlockIntoFreeList+0x54>)
1a000620:	6824      	ldr	r4, [r4, #0]
1a000622:	42a2      	cmp	r2, r4
1a000624:	d00d      	beq.n	1a000642 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000626:	6852      	ldr	r2, [r2, #4]
1a000628:	4411      	add	r1, r2
1a00062a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a00062c:	681a      	ldr	r2, [r3, #0]
1a00062e:	6812      	ldr	r2, [r2, #0]
1a000630:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000632:	4298      	cmp	r0, r3
1a000634:	d000      	beq.n	1a000638 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000636:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000638:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00063c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00063e:	4613      	mov	r3, r2
1a000640:	e7de      	b.n	1a000600 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000642:	6004      	str	r4, [r0, #0]
1a000644:	e7f5      	b.n	1a000632 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000646:	6002      	str	r2, [r0, #0]
1a000648:	e7f3      	b.n	1a000632 <prvInsertBlockIntoFreeList+0x36>
1a00064a:	bf00      	nop
1a00064c:	100020b8 	.word	0x100020b8
1a000650:	100000a8 	.word	0x100000a8

1a000654 <pvPortMalloc>:
{
1a000654:	b570      	push	{r4, r5, r6, lr}
1a000656:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000658:	f000 ff06 	bl	1a001468 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a00065c:	4b3f      	ldr	r3, [pc, #252]	; (1a00075c <pvPortMalloc+0x108>)
1a00065e:	681b      	ldr	r3, [r3, #0]
1a000660:	b1a3      	cbz	r3, 1a00068c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000662:	4b3f      	ldr	r3, [pc, #252]	; (1a000760 <pvPortMalloc+0x10c>)
1a000664:	681b      	ldr	r3, [r3, #0]
1a000666:	421c      	tst	r4, r3
1a000668:	d013      	beq.n	1a000692 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a00066a:	f000 ff97 	bl	1a00159c <xTaskResumeAll>
void *pvReturn = NULL;
1a00066e:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000670:	f000 fc9c 	bl	1a000fac <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000674:	f016 0f07 	tst.w	r6, #7
1a000678:	d06e      	beq.n	1a000758 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00067a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00067e:	f383 8811 	msr	BASEPRI, r3
1a000682:	f3bf 8f6f 	isb	sy
1a000686:	f3bf 8f4f 	dsb	sy
1a00068a:	e7fe      	b.n	1a00068a <pvPortMalloc+0x36>
			prvHeapInit();
1a00068c:	f7ff ff84 	bl	1a000598 <prvHeapInit>
1a000690:	e7e7      	b.n	1a000662 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000692:	b194      	cbz	r4, 1a0006ba <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000694:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000696:	f014 0f07 	tst.w	r4, #7
1a00069a:	d00e      	beq.n	1a0006ba <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00069c:	f024 0407 	bic.w	r4, r4, #7
1a0006a0:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0006a2:	f004 0307 	and.w	r3, r4, #7
1a0006a6:	b143      	cbz	r3, 1a0006ba <pvPortMalloc+0x66>
1a0006a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006ac:	f383 8811 	msr	BASEPRI, r3
1a0006b0:	f3bf 8f6f 	isb	sy
1a0006b4:	f3bf 8f4f 	dsb	sy
1a0006b8:	e7fe      	b.n	1a0006b8 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a0006ba:	b134      	cbz	r4, 1a0006ca <pvPortMalloc+0x76>
1a0006bc:	4b29      	ldr	r3, [pc, #164]	; (1a000764 <pvPortMalloc+0x110>)
1a0006be:	681b      	ldr	r3, [r3, #0]
1a0006c0:	42a3      	cmp	r3, r4
1a0006c2:	d306      	bcc.n	1a0006d2 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a0006c4:	4b28      	ldr	r3, [pc, #160]	; (1a000768 <pvPortMalloc+0x114>)
1a0006c6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0006c8:	e009      	b.n	1a0006de <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a0006ca:	f000 ff67 	bl	1a00159c <xTaskResumeAll>
void *pvReturn = NULL;
1a0006ce:	2600      	movs	r6, #0
1a0006d0:	e7ce      	b.n	1a000670 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a0006d2:	f000 ff63 	bl	1a00159c <xTaskResumeAll>
void *pvReturn = NULL;
1a0006d6:	2600      	movs	r6, #0
1a0006d8:	e7ca      	b.n	1a000670 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a0006da:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0006dc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0006de:	686a      	ldr	r2, [r5, #4]
1a0006e0:	42a2      	cmp	r2, r4
1a0006e2:	d202      	bcs.n	1a0006ea <pvPortMalloc+0x96>
1a0006e4:	682a      	ldr	r2, [r5, #0]
1a0006e6:	2a00      	cmp	r2, #0
1a0006e8:	d1f7      	bne.n	1a0006da <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a0006ea:	4a1c      	ldr	r2, [pc, #112]	; (1a00075c <pvPortMalloc+0x108>)
1a0006ec:	6812      	ldr	r2, [r2, #0]
1a0006ee:	42aa      	cmp	r2, r5
1a0006f0:	d014      	beq.n	1a00071c <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a0006f2:	681e      	ldr	r6, [r3, #0]
1a0006f4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0006f6:	682a      	ldr	r2, [r5, #0]
1a0006f8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a0006fa:	686b      	ldr	r3, [r5, #4]
1a0006fc:	1b1b      	subs	r3, r3, r4
1a0006fe:	2b10      	cmp	r3, #16
1a000700:	d914      	bls.n	1a00072c <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000702:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000704:	f010 0f07 	tst.w	r0, #7
1a000708:	d00c      	beq.n	1a000724 <pvPortMalloc+0xd0>
1a00070a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00070e:	f383 8811 	msr	BASEPRI, r3
1a000712:	f3bf 8f6f 	isb	sy
1a000716:	f3bf 8f4f 	dsb	sy
1a00071a:	e7fe      	b.n	1a00071a <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a00071c:	f000 ff3e 	bl	1a00159c <xTaskResumeAll>
void *pvReturn = NULL;
1a000720:	2600      	movs	r6, #0
1a000722:	e7a5      	b.n	1a000670 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000724:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000726:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000728:	f7ff ff68 	bl	1a0005fc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a00072c:	686a      	ldr	r2, [r5, #4]
1a00072e:	490d      	ldr	r1, [pc, #52]	; (1a000764 <pvPortMalloc+0x110>)
1a000730:	680b      	ldr	r3, [r1, #0]
1a000732:	1a9b      	subs	r3, r3, r2
1a000734:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000736:	490d      	ldr	r1, [pc, #52]	; (1a00076c <pvPortMalloc+0x118>)
1a000738:	6809      	ldr	r1, [r1, #0]
1a00073a:	428b      	cmp	r3, r1
1a00073c:	d201      	bcs.n	1a000742 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a00073e:	490b      	ldr	r1, [pc, #44]	; (1a00076c <pvPortMalloc+0x118>)
1a000740:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000742:	4b07      	ldr	r3, [pc, #28]	; (1a000760 <pvPortMalloc+0x10c>)
1a000744:	681b      	ldr	r3, [r3, #0]
1a000746:	4313      	orrs	r3, r2
1a000748:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a00074a:	2300      	movs	r3, #0
1a00074c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a00074e:	f000 ff25 	bl	1a00159c <xTaskResumeAll>
		if( pvReturn == NULL )
1a000752:	2e00      	cmp	r6, #0
1a000754:	d18e      	bne.n	1a000674 <pvPortMalloc+0x20>
1a000756:	e78b      	b.n	1a000670 <pvPortMalloc+0x1c>
}
1a000758:	4630      	mov	r0, r6
1a00075a:	bd70      	pop	{r4, r5, r6, pc}
1a00075c:	100000a8 	.word	0x100000a8
1a000760:	100020ac 	.word	0x100020ac
1a000764:	100020b0 	.word	0x100020b0
1a000768:	100020b8 	.word	0x100020b8
1a00076c:	100020b4 	.word	0x100020b4

1a000770 <vPortFree>:
	if( pv != NULL )
1a000770:	b380      	cbz	r0, 1a0007d4 <vPortFree+0x64>
{
1a000772:	b538      	push	{r3, r4, r5, lr}
1a000774:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000776:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00077a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00077e:	4916      	ldr	r1, [pc, #88]	; (1a0007d8 <vPortFree+0x68>)
1a000780:	6809      	ldr	r1, [r1, #0]
1a000782:	420a      	tst	r2, r1
1a000784:	d108      	bne.n	1a000798 <vPortFree+0x28>
1a000786:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00078a:	f383 8811 	msr	BASEPRI, r3
1a00078e:	f3bf 8f6f 	isb	sy
1a000792:	f3bf 8f4f 	dsb	sy
1a000796:	e7fe      	b.n	1a000796 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000798:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00079c:	b140      	cbz	r0, 1a0007b0 <vPortFree+0x40>
1a00079e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007a2:	f383 8811 	msr	BASEPRI, r3
1a0007a6:	f3bf 8f6f 	isb	sy
1a0007aa:	f3bf 8f4f 	dsb	sy
1a0007ae:	e7fe      	b.n	1a0007ae <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a0007b0:	ea22 0201 	bic.w	r2, r2, r1
1a0007b4:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a0007b8:	f000 fe56 	bl	1a001468 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a0007bc:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a0007c0:	4a06      	ldr	r2, [pc, #24]	; (1a0007dc <vPortFree+0x6c>)
1a0007c2:	6813      	ldr	r3, [r2, #0]
1a0007c4:	440b      	add	r3, r1
1a0007c6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a0007c8:	4628      	mov	r0, r5
1a0007ca:	f7ff ff17 	bl	1a0005fc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a0007ce:	f000 fee5 	bl	1a00159c <xTaskResumeAll>
}
1a0007d2:	bd38      	pop	{r3, r4, r5, pc}
1a0007d4:	4770      	bx	lr
1a0007d6:	bf00      	nop
1a0007d8:	100020ac 	.word	0x100020ac
1a0007dc:	100020b0 	.word	0x100020b0

1a0007e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0007e0:	b510      	push	{r4, lr}
1a0007e2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0007e4:	f001 fb96 	bl	1a001f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0007e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0007ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0007ec:	429a      	cmp	r2, r3
1a0007ee:	d004      	beq.n	1a0007fa <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0007f0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0007f2:	f001 fbb1 	bl	1a001f58 <vPortExitCritical>

	return xReturn;
}
1a0007f6:	4620      	mov	r0, r4
1a0007f8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0007fa:	2401      	movs	r4, #1
1a0007fc:	e7f9      	b.n	1a0007f2 <prvIsQueueFull+0x12>

1a0007fe <prvIsQueueEmpty>:
{
1a0007fe:	b510      	push	{r4, lr}
1a000800:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000802:	f001 fb87 	bl	1a001f14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000808:	b123      	cbz	r3, 1a000814 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00080a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00080c:	f001 fba4 	bl	1a001f58 <vPortExitCritical>
}
1a000810:	4620      	mov	r0, r4
1a000812:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000814:	2401      	movs	r4, #1
1a000816:	e7f9      	b.n	1a00080c <prvIsQueueEmpty+0xe>

1a000818 <prvCopyDataToQueue>:
{
1a000818:	b570      	push	{r4, r5, r6, lr}
1a00081a:	4604      	mov	r4, r0
1a00081c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00081e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000820:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000822:	b95a      	cbnz	r2, 1a00083c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000824:	6803      	ldr	r3, [r0, #0]
1a000826:	b11b      	cbz	r3, 1a000830 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000828:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00082a:	3501      	adds	r5, #1
1a00082c:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a00082e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000830:	6840      	ldr	r0, [r0, #4]
1a000832:	f001 f893 	bl	1a00195c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000836:	2300      	movs	r3, #0
1a000838:	6063      	str	r3, [r4, #4]
1a00083a:	e7f6      	b.n	1a00082a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a00083c:	b96e      	cbnz	r6, 1a00085a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00083e:	6880      	ldr	r0, [r0, #8]
1a000840:	f003 f982 	bl	1a003b48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000844:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000846:	68a3      	ldr	r3, [r4, #8]
1a000848:	4413      	add	r3, r2
1a00084a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00084c:	6862      	ldr	r2, [r4, #4]
1a00084e:	4293      	cmp	r3, r2
1a000850:	d319      	bcc.n	1a000886 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000852:	6823      	ldr	r3, [r4, #0]
1a000854:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000856:	2000      	movs	r0, #0
1a000858:	e7e7      	b.n	1a00082a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00085a:	68c0      	ldr	r0, [r0, #12]
1a00085c:	f003 f974 	bl	1a003b48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000860:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000862:	4252      	negs	r2, r2
1a000864:	68e3      	ldr	r3, [r4, #12]
1a000866:	4413      	add	r3, r2
1a000868:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00086a:	6821      	ldr	r1, [r4, #0]
1a00086c:	428b      	cmp	r3, r1
1a00086e:	d202      	bcs.n	1a000876 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000870:	6863      	ldr	r3, [r4, #4]
1a000872:	441a      	add	r2, r3
1a000874:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000876:	2e02      	cmp	r6, #2
1a000878:	d001      	beq.n	1a00087e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00087a:	2000      	movs	r0, #0
1a00087c:	e7d5      	b.n	1a00082a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00087e:	b125      	cbz	r5, 1a00088a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000880:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000882:	2000      	movs	r0, #0
1a000884:	e7d1      	b.n	1a00082a <prvCopyDataToQueue+0x12>
1a000886:	2000      	movs	r0, #0
1a000888:	e7cf      	b.n	1a00082a <prvCopyDataToQueue+0x12>
1a00088a:	2000      	movs	r0, #0
1a00088c:	e7cd      	b.n	1a00082a <prvCopyDataToQueue+0x12>

1a00088e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00088e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000890:	b172      	cbz	r2, 1a0008b0 <prvCopyDataFromQueue+0x22>
{
1a000892:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000894:	68c3      	ldr	r3, [r0, #12]
1a000896:	4413      	add	r3, r2
1a000898:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00089a:	6844      	ldr	r4, [r0, #4]
1a00089c:	42a3      	cmp	r3, r4
1a00089e:	d301      	bcc.n	1a0008a4 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0008a0:	6803      	ldr	r3, [r0, #0]
1a0008a2:	60c3      	str	r3, [r0, #12]
1a0008a4:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0008a6:	68c1      	ldr	r1, [r0, #12]
1a0008a8:	4620      	mov	r0, r4
1a0008aa:	f003 f94d 	bl	1a003b48 <memcpy>
}
1a0008ae:	bd10      	pop	{r4, pc}
1a0008b0:	4770      	bx	lr

1a0008b2 <prvUnlockQueue>:
{
1a0008b2:	b538      	push	{r3, r4, r5, lr}
1a0008b4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0008b6:	f001 fb2d 	bl	1a001f14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0008ba:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0008be:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0008c0:	e003      	b.n	1a0008ca <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0008c2:	f001 f835 	bl	1a001930 <vTaskMissedYield>
			--cTxLock;
1a0008c6:	3c01      	subs	r4, #1
1a0008c8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0008ca:	2c00      	cmp	r4, #0
1a0008cc:	dd08      	ble.n	1a0008e0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0008ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0008d0:	b133      	cbz	r3, 1a0008e0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0008d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0008d6:	f000 ff99 	bl	1a00180c <xTaskRemoveFromEventList>
1a0008da:	2800      	cmp	r0, #0
1a0008dc:	d0f3      	beq.n	1a0008c6 <prvUnlockQueue+0x14>
1a0008de:	e7f0      	b.n	1a0008c2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0008e0:	23ff      	movs	r3, #255	; 0xff
1a0008e2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0008e6:	f001 fb37 	bl	1a001f58 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0008ea:	f001 fb13 	bl	1a001f14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0008ee:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0008f2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008f4:	e003      	b.n	1a0008fe <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0008f6:	f001 f81b 	bl	1a001930 <vTaskMissedYield>
				--cRxLock;
1a0008fa:	3c01      	subs	r4, #1
1a0008fc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008fe:	2c00      	cmp	r4, #0
1a000900:	dd08      	ble.n	1a000914 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000902:	692b      	ldr	r3, [r5, #16]
1a000904:	b133      	cbz	r3, 1a000914 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000906:	f105 0010 	add.w	r0, r5, #16
1a00090a:	f000 ff7f 	bl	1a00180c <xTaskRemoveFromEventList>
1a00090e:	2800      	cmp	r0, #0
1a000910:	d0f3      	beq.n	1a0008fa <prvUnlockQueue+0x48>
1a000912:	e7f0      	b.n	1a0008f6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000914:	23ff      	movs	r3, #255	; 0xff
1a000916:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00091a:	f001 fb1d 	bl	1a001f58 <vPortExitCritical>
}
1a00091e:	bd38      	pop	{r3, r4, r5, pc}

1a000920 <xQueueGenericReset>:
{
1a000920:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000922:	b940      	cbnz	r0, 1a000936 <xQueueGenericReset+0x16>
1a000924:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000928:	f383 8811 	msr	BASEPRI, r3
1a00092c:	f3bf 8f6f 	isb	sy
1a000930:	f3bf 8f4f 	dsb	sy
1a000934:	e7fe      	b.n	1a000934 <xQueueGenericReset+0x14>
1a000936:	4604      	mov	r4, r0
1a000938:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00093a:	f001 faeb 	bl	1a001f14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00093e:	6821      	ldr	r1, [r4, #0]
1a000940:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000942:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000944:	fb03 1002 	mla	r0, r3, r2, r1
1a000948:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00094a:	2000      	movs	r0, #0
1a00094c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00094e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000950:	3a01      	subs	r2, #1
1a000952:	fb02 1303 	mla	r3, r2, r3, r1
1a000956:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000958:	23ff      	movs	r3, #255	; 0xff
1a00095a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00095e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000962:	b9a5      	cbnz	r5, 1a00098e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000964:	6923      	ldr	r3, [r4, #16]
1a000966:	b91b      	cbnz	r3, 1a000970 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000968:	f001 faf6 	bl	1a001f58 <vPortExitCritical>
}
1a00096c:	2001      	movs	r0, #1
1a00096e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000970:	f104 0010 	add.w	r0, r4, #16
1a000974:	f000 ff4a 	bl	1a00180c <xTaskRemoveFromEventList>
1a000978:	2800      	cmp	r0, #0
1a00097a:	d0f5      	beq.n	1a000968 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a00097c:	4b08      	ldr	r3, [pc, #32]	; (1a0009a0 <xQueueGenericReset+0x80>)
1a00097e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000982:	601a      	str	r2, [r3, #0]
1a000984:	f3bf 8f4f 	dsb	sy
1a000988:	f3bf 8f6f 	isb	sy
1a00098c:	e7ec      	b.n	1a000968 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00098e:	f104 0010 	add.w	r0, r4, #16
1a000992:	f000 fa94 	bl	1a000ebe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000996:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00099a:	f000 fa90 	bl	1a000ebe <vListInitialise>
1a00099e:	e7e3      	b.n	1a000968 <xQueueGenericReset+0x48>
1a0009a0:	e000ed04 	.word	0xe000ed04

1a0009a4 <prvInitialiseNewQueue>:
{
1a0009a4:	b538      	push	{r3, r4, r5, lr}
1a0009a6:	461d      	mov	r5, r3
1a0009a8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0009aa:	460b      	mov	r3, r1
1a0009ac:	b149      	cbz	r1, 1a0009c2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0009ae:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0009b0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0009b2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0009b4:	2101      	movs	r1, #1
1a0009b6:	4620      	mov	r0, r4
1a0009b8:	f7ff ffb2 	bl	1a000920 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0009bc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0009c0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0009c2:	6024      	str	r4, [r4, #0]
1a0009c4:	e7f4      	b.n	1a0009b0 <prvInitialiseNewQueue+0xc>

1a0009c6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0009c6:	b940      	cbnz	r0, 1a0009da <xQueueGenericCreateStatic+0x14>
1a0009c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009cc:	f383 8811 	msr	BASEPRI, r3
1a0009d0:	f3bf 8f6f 	isb	sy
1a0009d4:	f3bf 8f4f 	dsb	sy
1a0009d8:	e7fe      	b.n	1a0009d8 <xQueueGenericCreateStatic+0x12>
	{
1a0009da:	b510      	push	{r4, lr}
1a0009dc:	b084      	sub	sp, #16
1a0009de:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0009e0:	b153      	cbz	r3, 1a0009f8 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0009e2:	b192      	cbz	r2, 1a000a0a <xQueueGenericCreateStatic+0x44>
1a0009e4:	b989      	cbnz	r1, 1a000a0a <xQueueGenericCreateStatic+0x44>
1a0009e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ea:	f383 8811 	msr	BASEPRI, r3
1a0009ee:	f3bf 8f6f 	isb	sy
1a0009f2:	f3bf 8f4f 	dsb	sy
1a0009f6:	e7fe      	b.n	1a0009f6 <xQueueGenericCreateStatic+0x30>
1a0009f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009fc:	f383 8811 	msr	BASEPRI, r3
1a000a00:	f3bf 8f6f 	isb	sy
1a000a04:	f3bf 8f4f 	dsb	sy
1a000a08:	e7fe      	b.n	1a000a08 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000a0a:	b94a      	cbnz	r2, 1a000a20 <xQueueGenericCreateStatic+0x5a>
1a000a0c:	b141      	cbz	r1, 1a000a20 <xQueueGenericCreateStatic+0x5a>
1a000a0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a12:	f383 8811 	msr	BASEPRI, r3
1a000a16:	f3bf 8f6f 	isb	sy
1a000a1a:	f3bf 8f4f 	dsb	sy
1a000a1e:	e7fe      	b.n	1a000a1e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000a20:	2050      	movs	r0, #80	; 0x50
1a000a22:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000a24:	9803      	ldr	r0, [sp, #12]
1a000a26:	2850      	cmp	r0, #80	; 0x50
1a000a28:	d008      	beq.n	1a000a3c <xQueueGenericCreateStatic+0x76>
1a000a2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a2e:	f383 8811 	msr	BASEPRI, r3
1a000a32:	f3bf 8f6f 	isb	sy
1a000a36:	f3bf 8f4f 	dsb	sy
1a000a3a:	e7fe      	b.n	1a000a3a <xQueueGenericCreateStatic+0x74>
1a000a3c:	4620      	mov	r0, r4
1a000a3e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000a40:	2301      	movs	r3, #1
1a000a42:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a46:	9400      	str	r4, [sp, #0]
1a000a48:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000a4c:	f7ff ffaa 	bl	1a0009a4 <prvInitialiseNewQueue>
	}
1a000a50:	4620      	mov	r0, r4
1a000a52:	b004      	add	sp, #16
1a000a54:	bd10      	pop	{r4, pc}

1a000a56 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a56:	b940      	cbnz	r0, 1a000a6a <xQueueGenericCreate+0x14>
1a000a58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a5c:	f383 8811 	msr	BASEPRI, r3
1a000a60:	f3bf 8f6f 	isb	sy
1a000a64:	f3bf 8f4f 	dsb	sy
1a000a68:	e7fe      	b.n	1a000a68 <xQueueGenericCreate+0x12>
	{
1a000a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a6c:	b083      	sub	sp, #12
1a000a6e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000a70:	b111      	cbz	r1, 1a000a78 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a72:	fb01 f000 	mul.w	r0, r1, r0
1a000a76:	e000      	b.n	1a000a7a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000a78:	2000      	movs	r0, #0
1a000a7a:	4617      	mov	r7, r2
1a000a7c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000a7e:	3050      	adds	r0, #80	; 0x50
1a000a80:	f7ff fde8 	bl	1a000654 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000a84:	4605      	mov	r5, r0
1a000a86:	b150      	cbz	r0, 1a000a9e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000a88:	2300      	movs	r3, #0
1a000a8a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a8e:	9000      	str	r0, [sp, #0]
1a000a90:	463b      	mov	r3, r7
1a000a92:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000a96:	4621      	mov	r1, r4
1a000a98:	4630      	mov	r0, r6
1a000a9a:	f7ff ff83 	bl	1a0009a4 <prvInitialiseNewQueue>
	}
1a000a9e:	4628      	mov	r0, r5
1a000aa0:	b003      	add	sp, #12
1a000aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000aa4 <xQueueGenericSend>:
{
1a000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000aa6:	b085      	sub	sp, #20
1a000aa8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000aaa:	b160      	cbz	r0, 1a000ac6 <xQueueGenericSend+0x22>
1a000aac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000aae:	b999      	cbnz	r1, 1a000ad8 <xQueueGenericSend+0x34>
1a000ab0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000ab2:	b18a      	cbz	r2, 1a000ad8 <xQueueGenericSend+0x34>
1a000ab4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ab8:	f383 8811 	msr	BASEPRI, r3
1a000abc:	f3bf 8f6f 	isb	sy
1a000ac0:	f3bf 8f4f 	dsb	sy
1a000ac4:	e7fe      	b.n	1a000ac4 <xQueueGenericSend+0x20>
1a000ac6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aca:	f383 8811 	msr	BASEPRI, r3
1a000ace:	f3bf 8f6f 	isb	sy
1a000ad2:	f3bf 8f4f 	dsb	sy
1a000ad6:	e7fe      	b.n	1a000ad6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000ad8:	2b02      	cmp	r3, #2
1a000ada:	d10b      	bne.n	1a000af4 <xQueueGenericSend+0x50>
1a000adc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000ade:	2a01      	cmp	r2, #1
1a000ae0:	d008      	beq.n	1a000af4 <xQueueGenericSend+0x50>
1a000ae2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae6:	f383 8811 	msr	BASEPRI, r3
1a000aea:	f3bf 8f6f 	isb	sy
1a000aee:	f3bf 8f4f 	dsb	sy
1a000af2:	e7fe      	b.n	1a000af2 <xQueueGenericSend+0x4e>
1a000af4:	461e      	mov	r6, r3
1a000af6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000af8:	f000 ff20 	bl	1a00193c <xTaskGetSchedulerState>
1a000afc:	b950      	cbnz	r0, 1a000b14 <xQueueGenericSend+0x70>
1a000afe:	9b01      	ldr	r3, [sp, #4]
1a000b00:	b153      	cbz	r3, 1a000b18 <xQueueGenericSend+0x74>
1a000b02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b06:	f383 8811 	msr	BASEPRI, r3
1a000b0a:	f3bf 8f6f 	isb	sy
1a000b0e:	f3bf 8f4f 	dsb	sy
1a000b12:	e7fe      	b.n	1a000b12 <xQueueGenericSend+0x6e>
1a000b14:	2500      	movs	r5, #0
1a000b16:	e03a      	b.n	1a000b8e <xQueueGenericSend+0xea>
1a000b18:	2500      	movs	r5, #0
1a000b1a:	e038      	b.n	1a000b8e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000b1c:	4632      	mov	r2, r6
1a000b1e:	4639      	mov	r1, r7
1a000b20:	4620      	mov	r0, r4
1a000b22:	f7ff fe79 	bl	1a000818 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b28:	b94b      	cbnz	r3, 1a000b3e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000b2a:	b1a8      	cbz	r0, 1a000b58 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000b2c:	4b3b      	ldr	r3, [pc, #236]	; (1a000c1c <xQueueGenericSend+0x178>)
1a000b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b32:	601a      	str	r2, [r3, #0]
1a000b34:	f3bf 8f4f 	dsb	sy
1a000b38:	f3bf 8f6f 	isb	sy
1a000b3c:	e00c      	b.n	1a000b58 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b42:	f000 fe63 	bl	1a00180c <xTaskRemoveFromEventList>
1a000b46:	b138      	cbz	r0, 1a000b58 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000b48:	4b34      	ldr	r3, [pc, #208]	; (1a000c1c <xQueueGenericSend+0x178>)
1a000b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b4e:	601a      	str	r2, [r3, #0]
1a000b50:	f3bf 8f4f 	dsb	sy
1a000b54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000b58:	f001 f9fe 	bl	1a001f58 <vPortExitCritical>
				return pdPASS;
1a000b5c:	2001      	movs	r0, #1
}
1a000b5e:	b005      	add	sp, #20
1a000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000b62:	f001 f9f9 	bl	1a001f58 <vPortExitCritical>
					return errQUEUE_FULL;
1a000b66:	2000      	movs	r0, #0
1a000b68:	e7f9      	b.n	1a000b5e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000b6a:	a802      	add	r0, sp, #8
1a000b6c:	f000 fe94 	bl	1a001898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000b70:	2501      	movs	r5, #1
1a000b72:	e019      	b.n	1a000ba8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000b74:	2300      	movs	r3, #0
1a000b76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b7a:	e021      	b.n	1a000bc0 <xQueueGenericSend+0x11c>
1a000b7c:	2300      	movs	r3, #0
1a000b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b82:	e023      	b.n	1a000bcc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000b84:	4620      	mov	r0, r4
1a000b86:	f7ff fe94 	bl	1a0008b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000b8a:	f000 fd07 	bl	1a00159c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000b8e:	f001 f9c1 	bl	1a001f14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b96:	429a      	cmp	r2, r3
1a000b98:	d3c0      	bcc.n	1a000b1c <xQueueGenericSend+0x78>
1a000b9a:	2e02      	cmp	r6, #2
1a000b9c:	d0be      	beq.n	1a000b1c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000b9e:	9b01      	ldr	r3, [sp, #4]
1a000ba0:	2b00      	cmp	r3, #0
1a000ba2:	d0de      	beq.n	1a000b62 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000ba4:	2d00      	cmp	r5, #0
1a000ba6:	d0e0      	beq.n	1a000b6a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000ba8:	f001 f9d6 	bl	1a001f58 <vPortExitCritical>
		vTaskSuspendAll();
1a000bac:	f000 fc5c 	bl	1a001468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000bb0:	f001 f9b0 	bl	1a001f14 <vPortEnterCritical>
1a000bb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000bb8:	b25b      	sxtb	r3, r3
1a000bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bbe:	d0d9      	beq.n	1a000b74 <xQueueGenericSend+0xd0>
1a000bc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000bc4:	b25b      	sxtb	r3, r3
1a000bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bca:	d0d7      	beq.n	1a000b7c <xQueueGenericSend+0xd8>
1a000bcc:	f001 f9c4 	bl	1a001f58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000bd0:	a901      	add	r1, sp, #4
1a000bd2:	a802      	add	r0, sp, #8
1a000bd4:	f000 fe6c 	bl	1a0018b0 <xTaskCheckForTimeOut>
1a000bd8:	b9c8      	cbnz	r0, 1a000c0e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000bda:	4620      	mov	r0, r4
1a000bdc:	f7ff fe00 	bl	1a0007e0 <prvIsQueueFull>
1a000be0:	2800      	cmp	r0, #0
1a000be2:	d0cf      	beq.n	1a000b84 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000be4:	9901      	ldr	r1, [sp, #4]
1a000be6:	f104 0010 	add.w	r0, r4, #16
1a000bea:	f000 fddb 	bl	1a0017a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000bee:	4620      	mov	r0, r4
1a000bf0:	f7ff fe5f 	bl	1a0008b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000bf4:	f000 fcd2 	bl	1a00159c <xTaskResumeAll>
1a000bf8:	2800      	cmp	r0, #0
1a000bfa:	d1c8      	bne.n	1a000b8e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000bfc:	4b07      	ldr	r3, [pc, #28]	; (1a000c1c <xQueueGenericSend+0x178>)
1a000bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c02:	601a      	str	r2, [r3, #0]
1a000c04:	f3bf 8f4f 	dsb	sy
1a000c08:	f3bf 8f6f 	isb	sy
1a000c0c:	e7bf      	b.n	1a000b8e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000c0e:	4620      	mov	r0, r4
1a000c10:	f7ff fe4f 	bl	1a0008b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000c14:	f000 fcc2 	bl	1a00159c <xTaskResumeAll>
			return errQUEUE_FULL;
1a000c18:	2000      	movs	r0, #0
1a000c1a:	e7a0      	b.n	1a000b5e <xQueueGenericSend+0xba>
1a000c1c:	e000ed04 	.word	0xe000ed04

1a000c20 <xQueueGenericSendFromISR>:
{
1a000c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000c24:	b160      	cbz	r0, 1a000c40 <xQueueGenericSendFromISR+0x20>
1a000c26:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c28:	b999      	cbnz	r1, 1a000c52 <xQueueGenericSendFromISR+0x32>
1a000c2a:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000c2c:	b188      	cbz	r0, 1a000c52 <xQueueGenericSendFromISR+0x32>
1a000c2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c32:	f383 8811 	msr	BASEPRI, r3
1a000c36:	f3bf 8f6f 	isb	sy
1a000c3a:	f3bf 8f4f 	dsb	sy
1a000c3e:	e7fe      	b.n	1a000c3e <xQueueGenericSendFromISR+0x1e>
1a000c40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c44:	f383 8811 	msr	BASEPRI, r3
1a000c48:	f3bf 8f6f 	isb	sy
1a000c4c:	f3bf 8f4f 	dsb	sy
1a000c50:	e7fe      	b.n	1a000c50 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c52:	2b02      	cmp	r3, #2
1a000c54:	d10b      	bne.n	1a000c6e <xQueueGenericSendFromISR+0x4e>
1a000c56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000c58:	2801      	cmp	r0, #1
1a000c5a:	d008      	beq.n	1a000c6e <xQueueGenericSendFromISR+0x4e>
1a000c5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c60:	f383 8811 	msr	BASEPRI, r3
1a000c64:	f3bf 8f6f 	isb	sy
1a000c68:	f3bf 8f4f 	dsb	sy
1a000c6c:	e7fe      	b.n	1a000c6c <xQueueGenericSendFromISR+0x4c>
1a000c6e:	461f      	mov	r7, r3
1a000c70:	4690      	mov	r8, r2
1a000c72:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000c74:	f001 fa78 	bl	1a002168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000c78:	f3ef 8611 	mrs	r6, BASEPRI
1a000c7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c80:	f383 8811 	msr	BASEPRI, r3
1a000c84:	f3bf 8f6f 	isb	sy
1a000c88:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c90:	429a      	cmp	r2, r3
1a000c92:	d303      	bcc.n	1a000c9c <xQueueGenericSendFromISR+0x7c>
1a000c94:	2f02      	cmp	r7, #2
1a000c96:	d001      	beq.n	1a000c9c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000c98:	2000      	movs	r0, #0
1a000c9a:	e00f      	b.n	1a000cbc <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000c9c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000ca0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000ca2:	463a      	mov	r2, r7
1a000ca4:	4649      	mov	r1, r9
1a000ca6:	4620      	mov	r0, r4
1a000ca8:	f7ff fdb6 	bl	1a000818 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000cac:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000cb0:	d008      	beq.n	1a000cc4 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000cb2:	1c6b      	adds	r3, r5, #1
1a000cb4:	b25b      	sxtb	r3, r3
1a000cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000cba:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000cbc:	f386 8811 	msr	BASEPRI, r6
}
1a000cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000cc6:	b15b      	cbz	r3, 1a000ce0 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ccc:	f000 fd9e 	bl	1a00180c <xTaskRemoveFromEventList>
1a000cd0:	b140      	cbz	r0, 1a000ce4 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000cd2:	f1b8 0f00 	cmp.w	r8, #0
1a000cd6:	d007      	beq.n	1a000ce8 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000cd8:	2001      	movs	r0, #1
1a000cda:	f8c8 0000 	str.w	r0, [r8]
1a000cde:	e7ed      	b.n	1a000cbc <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000ce0:	2001      	movs	r0, #1
1a000ce2:	e7eb      	b.n	1a000cbc <xQueueGenericSendFromISR+0x9c>
1a000ce4:	2001      	movs	r0, #1
1a000ce6:	e7e9      	b.n	1a000cbc <xQueueGenericSendFromISR+0x9c>
1a000ce8:	2001      	movs	r0, #1
1a000cea:	e7e7      	b.n	1a000cbc <xQueueGenericSendFromISR+0x9c>

1a000cec <xQueueReceive>:
{
1a000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cee:	b085      	sub	sp, #20
1a000cf0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000cf2:	b160      	cbz	r0, 1a000d0e <xQueueReceive+0x22>
1a000cf4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cf6:	b999      	cbnz	r1, 1a000d20 <xQueueReceive+0x34>
1a000cf8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000cfa:	b18b      	cbz	r3, 1a000d20 <xQueueReceive+0x34>
	__asm volatile
1a000cfc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d00:	f383 8811 	msr	BASEPRI, r3
1a000d04:	f3bf 8f6f 	isb	sy
1a000d08:	f3bf 8f4f 	dsb	sy
1a000d0c:	e7fe      	b.n	1a000d0c <xQueueReceive+0x20>
1a000d0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d12:	f383 8811 	msr	BASEPRI, r3
1a000d16:	f3bf 8f6f 	isb	sy
1a000d1a:	f3bf 8f4f 	dsb	sy
1a000d1e:	e7fe      	b.n	1a000d1e <xQueueReceive+0x32>
1a000d20:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d22:	f000 fe0b 	bl	1a00193c <xTaskGetSchedulerState>
1a000d26:	b950      	cbnz	r0, 1a000d3e <xQueueReceive+0x52>
1a000d28:	9b01      	ldr	r3, [sp, #4]
1a000d2a:	b153      	cbz	r3, 1a000d42 <xQueueReceive+0x56>
1a000d2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d30:	f383 8811 	msr	BASEPRI, r3
1a000d34:	f3bf 8f6f 	isb	sy
1a000d38:	f3bf 8f4f 	dsb	sy
1a000d3c:	e7fe      	b.n	1a000d3c <xQueueReceive+0x50>
1a000d3e:	2600      	movs	r6, #0
1a000d40:	e03e      	b.n	1a000dc0 <xQueueReceive+0xd4>
1a000d42:	2600      	movs	r6, #0
1a000d44:	e03c      	b.n	1a000dc0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000d46:	4639      	mov	r1, r7
1a000d48:	4620      	mov	r0, r4
1a000d4a:	f7ff fda0 	bl	1a00088e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000d4e:	3d01      	subs	r5, #1
1a000d50:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d52:	6923      	ldr	r3, [r4, #16]
1a000d54:	b923      	cbnz	r3, 1a000d60 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000d56:	f001 f8ff 	bl	1a001f58 <vPortExitCritical>
				return pdPASS;
1a000d5a:	2001      	movs	r0, #1
}
1a000d5c:	b005      	add	sp, #20
1a000d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d60:	f104 0010 	add.w	r0, r4, #16
1a000d64:	f000 fd52 	bl	1a00180c <xTaskRemoveFromEventList>
1a000d68:	2800      	cmp	r0, #0
1a000d6a:	d0f4      	beq.n	1a000d56 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000d6c:	4b34      	ldr	r3, [pc, #208]	; (1a000e40 <xQueueReceive+0x154>)
1a000d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d72:	601a      	str	r2, [r3, #0]
1a000d74:	f3bf 8f4f 	dsb	sy
1a000d78:	f3bf 8f6f 	isb	sy
1a000d7c:	e7eb      	b.n	1a000d56 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000d7e:	f001 f8eb 	bl	1a001f58 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000d82:	2000      	movs	r0, #0
1a000d84:	e7ea      	b.n	1a000d5c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d86:	a802      	add	r0, sp, #8
1a000d88:	f000 fd86 	bl	1a001898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000d8c:	2601      	movs	r6, #1
1a000d8e:	e021      	b.n	1a000dd4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000d90:	2300      	movs	r3, #0
1a000d92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000d96:	e029      	b.n	1a000dec <xQueueReceive+0x100>
1a000d98:	2300      	movs	r3, #0
1a000d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000d9e:	e02b      	b.n	1a000df8 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000da0:	4620      	mov	r0, r4
1a000da2:	f7ff fd86 	bl	1a0008b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000da6:	f000 fbf9 	bl	1a00159c <xTaskResumeAll>
1a000daa:	e009      	b.n	1a000dc0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000dac:	4620      	mov	r0, r4
1a000dae:	f7ff fd80 	bl	1a0008b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000db2:	f000 fbf3 	bl	1a00159c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000db6:	4620      	mov	r0, r4
1a000db8:	f7ff fd21 	bl	1a0007fe <prvIsQueueEmpty>
1a000dbc:	2800      	cmp	r0, #0
1a000dbe:	d13d      	bne.n	1a000e3c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000dc0:	f001 f8a8 	bl	1a001f14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000dc4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000dc6:	2d00      	cmp	r5, #0
1a000dc8:	d1bd      	bne.n	1a000d46 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dca:	9b01      	ldr	r3, [sp, #4]
1a000dcc:	2b00      	cmp	r3, #0
1a000dce:	d0d6      	beq.n	1a000d7e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000dd0:	2e00      	cmp	r6, #0
1a000dd2:	d0d8      	beq.n	1a000d86 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000dd4:	f001 f8c0 	bl	1a001f58 <vPortExitCritical>
		vTaskSuspendAll();
1a000dd8:	f000 fb46 	bl	1a001468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ddc:	f001 f89a 	bl	1a001f14 <vPortEnterCritical>
1a000de0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000de4:	b25b      	sxtb	r3, r3
1a000de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dea:	d0d1      	beq.n	1a000d90 <xQueueReceive+0xa4>
1a000dec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000df0:	b25b      	sxtb	r3, r3
1a000df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000df6:	d0cf      	beq.n	1a000d98 <xQueueReceive+0xac>
1a000df8:	f001 f8ae 	bl	1a001f58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000dfc:	a901      	add	r1, sp, #4
1a000dfe:	a802      	add	r0, sp, #8
1a000e00:	f000 fd56 	bl	1a0018b0 <xTaskCheckForTimeOut>
1a000e04:	2800      	cmp	r0, #0
1a000e06:	d1d1      	bne.n	1a000dac <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e08:	4620      	mov	r0, r4
1a000e0a:	f7ff fcf8 	bl	1a0007fe <prvIsQueueEmpty>
1a000e0e:	2800      	cmp	r0, #0
1a000e10:	d0c6      	beq.n	1a000da0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000e12:	9901      	ldr	r1, [sp, #4]
1a000e14:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e18:	f000 fcc4 	bl	1a0017a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e1c:	4620      	mov	r0, r4
1a000e1e:	f7ff fd48 	bl	1a0008b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e22:	f000 fbbb 	bl	1a00159c <xTaskResumeAll>
1a000e26:	2800      	cmp	r0, #0
1a000e28:	d1ca      	bne.n	1a000dc0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000e2a:	4b05      	ldr	r3, [pc, #20]	; (1a000e40 <xQueueReceive+0x154>)
1a000e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e30:	601a      	str	r2, [r3, #0]
1a000e32:	f3bf 8f4f 	dsb	sy
1a000e36:	f3bf 8f6f 	isb	sy
1a000e3a:	e7c1      	b.n	1a000dc0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000e3c:	2000      	movs	r0, #0
1a000e3e:	e78d      	b.n	1a000d5c <xQueueReceive+0x70>
1a000e40:	e000ed04 	.word	0xe000ed04

1a000e44 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e44:	2300      	movs	r3, #0
1a000e46:	2b07      	cmp	r3, #7
1a000e48:	d80c      	bhi.n	1a000e64 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000e4a:	4a07      	ldr	r2, [pc, #28]	; (1a000e68 <vQueueAddToRegistry+0x24>)
1a000e4c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000e50:	b10a      	cbz	r2, 1a000e56 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e52:	3301      	adds	r3, #1
1a000e54:	e7f7      	b.n	1a000e46 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000e56:	4a04      	ldr	r2, [pc, #16]	; (1a000e68 <vQueueAddToRegistry+0x24>)
1a000e58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000e5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000e60:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000e62:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000e64:	4770      	bx	lr
1a000e66:	bf00      	nop
1a000e68:	10002b1c 	.word	0x10002b1c

1a000e6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000e6c:	b570      	push	{r4, r5, r6, lr}
1a000e6e:	4604      	mov	r4, r0
1a000e70:	460d      	mov	r5, r1
1a000e72:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000e74:	f001 f84e 	bl	1a001f14 <vPortEnterCritical>
1a000e78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e7c:	b25b      	sxtb	r3, r3
1a000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e82:	d00d      	beq.n	1a000ea0 <vQueueWaitForMessageRestricted+0x34>
1a000e84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e88:	b25b      	sxtb	r3, r3
1a000e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e8e:	d00b      	beq.n	1a000ea8 <vQueueWaitForMessageRestricted+0x3c>
1a000e90:	f001 f862 	bl	1a001f58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000e94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000e96:	b15b      	cbz	r3, 1a000eb0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000e98:	4620      	mov	r0, r4
1a000e9a:	f7ff fd0a 	bl	1a0008b2 <prvUnlockQueue>
	}
1a000e9e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000ea0:	2300      	movs	r3, #0
1a000ea2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ea6:	e7ed      	b.n	1a000e84 <vQueueWaitForMessageRestricted+0x18>
1a000ea8:	2300      	movs	r3, #0
1a000eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000eae:	e7ef      	b.n	1a000e90 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000eb0:	4632      	mov	r2, r6
1a000eb2:	4629      	mov	r1, r5
1a000eb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000eb8:	f000 fc8c 	bl	1a0017d4 <vTaskPlaceOnEventListRestricted>
1a000ebc:	e7ec      	b.n	1a000e98 <vQueueWaitForMessageRestricted+0x2c>

1a000ebe <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ebe:	f100 0308 	add.w	r3, r0, #8
1a000ec2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ec8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000eca:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ecc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000ece:	2300      	movs	r3, #0
1a000ed0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000ed2:	4770      	bx	lr

1a000ed4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000ed4:	2300      	movs	r3, #0
1a000ed6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000ed8:	4770      	bx	lr

1a000eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000eda:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000edc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000ede:	689a      	ldr	r2, [r3, #8]
1a000ee0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000ee2:	689a      	ldr	r2, [r3, #8]
1a000ee4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000ee6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000ee8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000eea:	6803      	ldr	r3, [r0, #0]
1a000eec:	3301      	adds	r3, #1
1a000eee:	6003      	str	r3, [r0, #0]
}
1a000ef0:	4770      	bx	lr

1a000ef2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000ef2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000ef4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000ef6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000efa:	d002      	beq.n	1a000f02 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000efc:	f100 0208 	add.w	r2, r0, #8
1a000f00:	e002      	b.n	1a000f08 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000f02:	6902      	ldr	r2, [r0, #16]
1a000f04:	e004      	b.n	1a000f10 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f06:	461a      	mov	r2, r3
1a000f08:	6853      	ldr	r3, [r2, #4]
1a000f0a:	681c      	ldr	r4, [r3, #0]
1a000f0c:	42ac      	cmp	r4, r5
1a000f0e:	d9fa      	bls.n	1a000f06 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000f10:	6853      	ldr	r3, [r2, #4]
1a000f12:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000f14:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000f16:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000f18:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f1a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f1c:	6803      	ldr	r3, [r0, #0]
1a000f1e:	3301      	adds	r3, #1
1a000f20:	6003      	str	r3, [r0, #0]
}
1a000f22:	bc30      	pop	{r4, r5}
1a000f24:	4770      	bx	lr

1a000f26 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000f26:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000f28:	6842      	ldr	r2, [r0, #4]
1a000f2a:	6881      	ldr	r1, [r0, #8]
1a000f2c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000f2e:	6882      	ldr	r2, [r0, #8]
1a000f30:	6841      	ldr	r1, [r0, #4]
1a000f32:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000f34:	685a      	ldr	r2, [r3, #4]
1a000f36:	4282      	cmp	r2, r0
1a000f38:	d006      	beq.n	1a000f48 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000f3a:	2200      	movs	r2, #0
1a000f3c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000f3e:	681a      	ldr	r2, [r3, #0]
1a000f40:	3a01      	subs	r2, #1
1a000f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000f44:	6818      	ldr	r0, [r3, #0]
}
1a000f46:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000f48:	6882      	ldr	r2, [r0, #8]
1a000f4a:	605a      	str	r2, [r3, #4]
1a000f4c:	e7f5      	b.n	1a000f3a <uxListRemove+0x14>
1a000f4e:	Address 0x000000001a000f4e is out of bounds.


1a000f50 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000f50:	4b03      	ldr	r3, [pc, #12]	; (1a000f60 <vApplicationGetIdleTaskMemory+0x10>)
1a000f52:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000f54:	4b03      	ldr	r3, [pc, #12]	; (1a000f64 <vApplicationGetIdleTaskMemory+0x14>)
1a000f56:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000f58:	235a      	movs	r3, #90	; 0x5a
1a000f5a:	6013      	str	r3, [r2, #0]
}
1a000f5c:	4770      	bx	lr
1a000f5e:	bf00      	nop
1a000f60:	100027c8 	.word	0x100027c8
1a000f64:	100020c0 	.word	0x100020c0

1a000f68 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000f68:	4b03      	ldr	r3, [pc, #12]	; (1a000f78 <vApplicationGetTimerTaskMemory+0x10>)
1a000f6a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000f6c:	4b03      	ldr	r3, [pc, #12]	; (1a000f7c <vApplicationGetTimerTaskMemory+0x14>)
1a000f6e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000f70:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000f74:	6013      	str	r3, [r2, #0]
1a000f76:	4770      	bx	lr
1a000f78:	10002828 	.word	0x10002828
1a000f7c:	10002228 	.word	0x10002228

1a000f80 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a000f80:	b510      	push	{r4, lr}
1a000f82:	b082      	sub	sp, #8
1a000f84:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a000f86:	9001      	str	r0, [sp, #4]
1a000f88:	2300      	movs	r3, #0
1a000f8a:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a000f8c:	f000 ffc2 	bl	1a001f14 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a000f90:	9901      	ldr	r1, [sp, #4]
1a000f92:	4622      	mov	r2, r4
1a000f94:	4804      	ldr	r0, [pc, #16]	; (1a000fa8 <vAssertCalled+0x28>)
1a000f96:	f002 fe93 	bl	1a003cc0 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a000f9a:	9b00      	ldr	r3, [sp, #0]
1a000f9c:	2b00      	cmp	r3, #0
1a000f9e:	d0fc      	beq.n	1a000f9a <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a000fa0:	f000 ffda 	bl	1a001f58 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a000fa4:	b002      	add	sp, #8
1a000fa6:	bd10      	pop	{r4, pc}
1a000fa8:	1a0047ac 	.word	0x1a0047ac

1a000fac <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a000fac:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a000fae:	4804      	ldr	r0, [pc, #16]	; (1a000fc0 <vApplicationMallocFailedHook+0x14>)
1a000fb0:	f002 fefa 	bl	1a003da8 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a000fb4:	4903      	ldr	r1, [pc, #12]	; (1a000fc4 <vApplicationMallocFailedHook+0x18>)
1a000fb6:	202c      	movs	r0, #44	; 0x2c
1a000fb8:	f7ff ffe2 	bl	1a000f80 <vAssertCalled>
}
1a000fbc:	bd08      	pop	{r3, pc}
1a000fbe:	bf00      	nop
1a000fc0:	1a004738 	.word	0x1a004738
1a000fc4:	1a00475c 	.word	0x1a00475c

1a000fc8 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a000fc8:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a000fca:	4804      	ldr	r0, [pc, #16]	; (1a000fdc <vApplicationStackOverflowHook+0x14>)
1a000fcc:	f002 fe78 	bl	1a003cc0 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a000fd0:	4903      	ldr	r1, [pc, #12]	; (1a000fe0 <vApplicationStackOverflowHook+0x18>)
1a000fd2:	2050      	movs	r0, #80	; 0x50
1a000fd4:	f7ff ffd4 	bl	1a000f80 <vAssertCalled>
}
1a000fd8:	bd08      	pop	{r3, pc}
1a000fda:	bf00      	nop
1a000fdc:	1a00477c 	.word	0x1a00477c
1a000fe0:	1a00475c 	.word	0x1a00475c

1a000fe4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000fe4:	4b08      	ldr	r3, [pc, #32]	; (1a001008 <prvResetNextTaskUnblockTime+0x24>)
1a000fe6:	681b      	ldr	r3, [r3, #0]
1a000fe8:	681b      	ldr	r3, [r3, #0]
1a000fea:	b13b      	cbz	r3, 1a000ffc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000fec:	4b06      	ldr	r3, [pc, #24]	; (1a001008 <prvResetNextTaskUnblockTime+0x24>)
1a000fee:	681b      	ldr	r3, [r3, #0]
1a000ff0:	68db      	ldr	r3, [r3, #12]
1a000ff2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000ff4:	685a      	ldr	r2, [r3, #4]
1a000ff6:	4b05      	ldr	r3, [pc, #20]	; (1a00100c <prvResetNextTaskUnblockTime+0x28>)
1a000ff8:	601a      	str	r2, [r3, #0]
	}
}
1a000ffa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000ffc:	4b03      	ldr	r3, [pc, #12]	; (1a00100c <prvResetNextTaskUnblockTime+0x28>)
1a000ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001002:	601a      	str	r2, [r3, #0]
1a001004:	4770      	bx	lr
1a001006:	bf00      	nop
1a001008:	1000288c 	.word	0x1000288c
1a00100c:	10002960 	.word	0x10002960

1a001010 <prvInitialiseNewTask>:
{
1a001010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001014:	4681      	mov	r9, r0
1a001016:	460d      	mov	r5, r1
1a001018:	4617      	mov	r7, r2
1a00101a:	469a      	mov	sl, r3
1a00101c:	9e08      	ldr	r6, [sp, #32]
1a00101e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001022:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001024:	0092      	lsls	r2, r2, #2
1a001026:	21a5      	movs	r1, #165	; 0xa5
1a001028:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00102a:	f002 fd98 	bl	1a003b5e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00102e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001030:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001034:	3a01      	subs	r2, #1
1a001036:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00103a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00103e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001040:	2300      	movs	r3, #0
1a001042:	2b0f      	cmp	r3, #15
1a001044:	d807      	bhi.n	1a001056 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001046:	5ce9      	ldrb	r1, [r5, r3]
1a001048:	18e2      	adds	r2, r4, r3
1a00104a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00104e:	5cea      	ldrb	r2, [r5, r3]
1a001050:	b10a      	cbz	r2, 1a001056 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001052:	3301      	adds	r3, #1
1a001054:	e7f5      	b.n	1a001042 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001056:	2300      	movs	r3, #0
1a001058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00105c:	2e06      	cmp	r6, #6
1a00105e:	d900      	bls.n	1a001062 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001060:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001062:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001064:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001066:	2500      	movs	r5, #0
1a001068:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00106a:	1d20      	adds	r0, r4, #4
1a00106c:	f7ff ff32 	bl	1a000ed4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001070:	f104 0018 	add.w	r0, r4, #24
1a001074:	f7ff ff2e 	bl	1a000ed4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001078:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00107a:	f1c6 0607 	rsb	r6, r6, #7
1a00107e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001080:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001082:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001084:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001088:	4652      	mov	r2, sl
1a00108a:	4649      	mov	r1, r9
1a00108c:	4638      	mov	r0, r7
1a00108e:	f000 ff15 	bl	1a001ebc <pxPortInitialiseStack>
1a001092:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001094:	f1b8 0f00 	cmp.w	r8, #0
1a001098:	d001      	beq.n	1a00109e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00109a:	f8c8 4000 	str.w	r4, [r8]
}
1a00109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0010a2:	Address 0x000000001a0010a2 is out of bounds.


1a0010a4 <prvInitialiseTaskLists>:
{
1a0010a4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0010a6:	2400      	movs	r4, #0
1a0010a8:	e007      	b.n	1a0010ba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0010aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0010ae:	0093      	lsls	r3, r2, #2
1a0010b0:	480e      	ldr	r0, [pc, #56]	; (1a0010ec <prvInitialiseTaskLists+0x48>)
1a0010b2:	4418      	add	r0, r3
1a0010b4:	f7ff ff03 	bl	1a000ebe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0010b8:	3401      	adds	r4, #1
1a0010ba:	2c06      	cmp	r4, #6
1a0010bc:	d9f5      	bls.n	1a0010aa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0010be:	4d0c      	ldr	r5, [pc, #48]	; (1a0010f0 <prvInitialiseTaskLists+0x4c>)
1a0010c0:	4628      	mov	r0, r5
1a0010c2:	f7ff fefc 	bl	1a000ebe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0010c6:	4c0b      	ldr	r4, [pc, #44]	; (1a0010f4 <prvInitialiseTaskLists+0x50>)
1a0010c8:	4620      	mov	r0, r4
1a0010ca:	f7ff fef8 	bl	1a000ebe <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0010ce:	480a      	ldr	r0, [pc, #40]	; (1a0010f8 <prvInitialiseTaskLists+0x54>)
1a0010d0:	f7ff fef5 	bl	1a000ebe <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0010d4:	4809      	ldr	r0, [pc, #36]	; (1a0010fc <prvInitialiseTaskLists+0x58>)
1a0010d6:	f7ff fef2 	bl	1a000ebe <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0010da:	4809      	ldr	r0, [pc, #36]	; (1a001100 <prvInitialiseTaskLists+0x5c>)
1a0010dc:	f7ff feef 	bl	1a000ebe <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0010e0:	4b08      	ldr	r3, [pc, #32]	; (1a001104 <prvInitialiseTaskLists+0x60>)
1a0010e2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0010e4:	4b08      	ldr	r3, [pc, #32]	; (1a001108 <prvInitialiseTaskLists+0x64>)
1a0010e6:	601c      	str	r4, [r3, #0]
}
1a0010e8:	bd38      	pop	{r3, r4, r5, pc}
1a0010ea:	bf00      	nop
1a0010ec:	10002894 	.word	0x10002894
1a0010f0:	10002938 	.word	0x10002938
1a0010f4:	1000294c 	.word	0x1000294c
1a0010f8:	10002968 	.word	0x10002968
1a0010fc:	10002994 	.word	0x10002994
1a001100:	10002980 	.word	0x10002980
1a001104:	1000288c 	.word	0x1000288c
1a001108:	10002890 	.word	0x10002890

1a00110c <prvAddNewTaskToReadyList>:
{
1a00110c:	b510      	push	{r4, lr}
1a00110e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001110:	f000 ff00 	bl	1a001f14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001114:	4a21      	ldr	r2, [pc, #132]	; (1a00119c <prvAddNewTaskToReadyList+0x90>)
1a001116:	6813      	ldr	r3, [r2, #0]
1a001118:	3301      	adds	r3, #1
1a00111a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a00111c:	4b20      	ldr	r3, [pc, #128]	; (1a0011a0 <prvAddNewTaskToReadyList+0x94>)
1a00111e:	681b      	ldr	r3, [r3, #0]
1a001120:	b15b      	cbz	r3, 1a00113a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001122:	4b20      	ldr	r3, [pc, #128]	; (1a0011a4 <prvAddNewTaskToReadyList+0x98>)
1a001124:	681b      	ldr	r3, [r3, #0]
1a001126:	b96b      	cbnz	r3, 1a001144 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001128:	4b1d      	ldr	r3, [pc, #116]	; (1a0011a0 <prvAddNewTaskToReadyList+0x94>)
1a00112a:	681b      	ldr	r3, [r3, #0]
1a00112c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00112e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001130:	429a      	cmp	r2, r3
1a001132:	d807      	bhi.n	1a001144 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001134:	4b1a      	ldr	r3, [pc, #104]	; (1a0011a0 <prvAddNewTaskToReadyList+0x94>)
1a001136:	601c      	str	r4, [r3, #0]
1a001138:	e004      	b.n	1a001144 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00113a:	4b19      	ldr	r3, [pc, #100]	; (1a0011a0 <prvAddNewTaskToReadyList+0x94>)
1a00113c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00113e:	6813      	ldr	r3, [r2, #0]
1a001140:	2b01      	cmp	r3, #1
1a001142:	d027      	beq.n	1a001194 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001144:	4a18      	ldr	r2, [pc, #96]	; (1a0011a8 <prvAddNewTaskToReadyList+0x9c>)
1a001146:	6813      	ldr	r3, [r2, #0]
1a001148:	3301      	adds	r3, #1
1a00114a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00114c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00114e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001150:	2201      	movs	r2, #1
1a001152:	409a      	lsls	r2, r3
1a001154:	4915      	ldr	r1, [pc, #84]	; (1a0011ac <prvAddNewTaskToReadyList+0xa0>)
1a001156:	6808      	ldr	r0, [r1, #0]
1a001158:	4302      	orrs	r2, r0
1a00115a:	600a      	str	r2, [r1, #0]
1a00115c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001160:	009a      	lsls	r2, r3, #2
1a001162:	1d21      	adds	r1, r4, #4
1a001164:	4812      	ldr	r0, [pc, #72]	; (1a0011b0 <prvAddNewTaskToReadyList+0xa4>)
1a001166:	4410      	add	r0, r2
1a001168:	f7ff feb7 	bl	1a000eda <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00116c:	f000 fef4 	bl	1a001f58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001170:	4b0c      	ldr	r3, [pc, #48]	; (1a0011a4 <prvAddNewTaskToReadyList+0x98>)
1a001172:	681b      	ldr	r3, [r3, #0]
1a001174:	b16b      	cbz	r3, 1a001192 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001176:	4b0a      	ldr	r3, [pc, #40]	; (1a0011a0 <prvAddNewTaskToReadyList+0x94>)
1a001178:	681b      	ldr	r3, [r3, #0]
1a00117a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00117c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00117e:	429a      	cmp	r2, r3
1a001180:	d207      	bcs.n	1a001192 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001182:	4b0c      	ldr	r3, [pc, #48]	; (1a0011b4 <prvAddNewTaskToReadyList+0xa8>)
1a001184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001188:	601a      	str	r2, [r3, #0]
1a00118a:	f3bf 8f4f 	dsb	sy
1a00118e:	f3bf 8f6f 	isb	sy
}
1a001192:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001194:	f7ff ff86 	bl	1a0010a4 <prvInitialiseTaskLists>
1a001198:	e7d4      	b.n	1a001144 <prvAddNewTaskToReadyList+0x38>
1a00119a:	bf00      	nop
1a00119c:	10002920 	.word	0x10002920
1a0011a0:	10002888 	.word	0x10002888
1a0011a4:	1000297c 	.word	0x1000297c
1a0011a8:	10002930 	.word	0x10002930
1a0011ac:	10002934 	.word	0x10002934
1a0011b0:	10002894 	.word	0x10002894
1a0011b4:	e000ed04 	.word	0xe000ed04

1a0011b8 <prvDeleteTCB>:
	{
1a0011b8:	b510      	push	{r4, lr}
1a0011ba:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0011bc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0011c0:	b933      	cbnz	r3, 1a0011d0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0011c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0011c4:	f7ff fad4 	bl	1a000770 <vPortFree>
				vPortFree( pxTCB );
1a0011c8:	4620      	mov	r0, r4
1a0011ca:	f7ff fad1 	bl	1a000770 <vPortFree>
	}
1a0011ce:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0011d0:	2b01      	cmp	r3, #1
1a0011d2:	d00a      	beq.n	1a0011ea <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0011d4:	2b02      	cmp	r3, #2
1a0011d6:	d0fa      	beq.n	1a0011ce <prvDeleteTCB+0x16>
1a0011d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011dc:	f383 8811 	msr	BASEPRI, r3
1a0011e0:	f3bf 8f6f 	isb	sy
1a0011e4:	f3bf 8f4f 	dsb	sy
1a0011e8:	e7fe      	b.n	1a0011e8 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0011ea:	f7ff fac1 	bl	1a000770 <vPortFree>
1a0011ee:	e7ee      	b.n	1a0011ce <prvDeleteTCB+0x16>

1a0011f0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0011f0:	4b0f      	ldr	r3, [pc, #60]	; (1a001230 <prvCheckTasksWaitingTermination+0x40>)
1a0011f2:	681b      	ldr	r3, [r3, #0]
1a0011f4:	b1d3      	cbz	r3, 1a00122c <prvCheckTasksWaitingTermination+0x3c>
{
1a0011f6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0011f8:	f000 fe8c 	bl	1a001f14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0011fc:	4b0d      	ldr	r3, [pc, #52]	; (1a001234 <prvCheckTasksWaitingTermination+0x44>)
1a0011fe:	68db      	ldr	r3, [r3, #12]
1a001200:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001202:	1d20      	adds	r0, r4, #4
1a001204:	f7ff fe8f 	bl	1a000f26 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001208:	4a0b      	ldr	r2, [pc, #44]	; (1a001238 <prvCheckTasksWaitingTermination+0x48>)
1a00120a:	6813      	ldr	r3, [r2, #0]
1a00120c:	3b01      	subs	r3, #1
1a00120e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001210:	4a07      	ldr	r2, [pc, #28]	; (1a001230 <prvCheckTasksWaitingTermination+0x40>)
1a001212:	6813      	ldr	r3, [r2, #0]
1a001214:	3b01      	subs	r3, #1
1a001216:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001218:	f000 fe9e 	bl	1a001f58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00121c:	4620      	mov	r0, r4
1a00121e:	f7ff ffcb 	bl	1a0011b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001222:	4b03      	ldr	r3, [pc, #12]	; (1a001230 <prvCheckTasksWaitingTermination+0x40>)
1a001224:	681b      	ldr	r3, [r3, #0]
1a001226:	2b00      	cmp	r3, #0
1a001228:	d1e6      	bne.n	1a0011f8 <prvCheckTasksWaitingTermination+0x8>
}
1a00122a:	bd10      	pop	{r4, pc}
1a00122c:	4770      	bx	lr
1a00122e:	bf00      	nop
1a001230:	10002924 	.word	0x10002924
1a001234:	10002994 	.word	0x10002994
1a001238:	10002920 	.word	0x10002920

1a00123c <prvIdleTask>:
{
1a00123c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00123e:	f7ff ffd7 	bl	1a0011f0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001242:	4b06      	ldr	r3, [pc, #24]	; (1a00125c <prvIdleTask+0x20>)
1a001244:	681b      	ldr	r3, [r3, #0]
1a001246:	2b01      	cmp	r3, #1
1a001248:	d9f9      	bls.n	1a00123e <prvIdleTask+0x2>
				taskYIELD();
1a00124a:	4b05      	ldr	r3, [pc, #20]	; (1a001260 <prvIdleTask+0x24>)
1a00124c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001250:	601a      	str	r2, [r3, #0]
1a001252:	f3bf 8f4f 	dsb	sy
1a001256:	f3bf 8f6f 	isb	sy
1a00125a:	e7f0      	b.n	1a00123e <prvIdleTask+0x2>
1a00125c:	10002894 	.word	0x10002894
1a001260:	e000ed04 	.word	0xe000ed04

1a001264 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001264:	b570      	push	{r4, r5, r6, lr}
1a001266:	4604      	mov	r4, r0
1a001268:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00126a:	4b1d      	ldr	r3, [pc, #116]	; (1a0012e0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00126c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00126e:	4b1d      	ldr	r3, [pc, #116]	; (1a0012e4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001270:	6818      	ldr	r0, [r3, #0]
1a001272:	3004      	adds	r0, #4
1a001274:	f7ff fe57 	bl	1a000f26 <uxListRemove>
1a001278:	b950      	cbnz	r0, 1a001290 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00127a:	4b1a      	ldr	r3, [pc, #104]	; (1a0012e4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00127c:	681b      	ldr	r3, [r3, #0]
1a00127e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001280:	2301      	movs	r3, #1
1a001282:	fa03 f202 	lsl.w	r2, r3, r2
1a001286:	4918      	ldr	r1, [pc, #96]	; (1a0012e8 <prvAddCurrentTaskToDelayedList+0x84>)
1a001288:	680b      	ldr	r3, [r1, #0]
1a00128a:	ea23 0302 	bic.w	r3, r3, r2
1a00128e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001290:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001294:	d013      	beq.n	1a0012be <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001296:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001298:	4b12      	ldr	r3, [pc, #72]	; (1a0012e4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00129a:	681b      	ldr	r3, [r3, #0]
1a00129c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00129e:	42a5      	cmp	r5, r4
1a0012a0:	d816      	bhi.n	1a0012d0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012a2:	4b12      	ldr	r3, [pc, #72]	; (1a0012ec <prvAddCurrentTaskToDelayedList+0x88>)
1a0012a4:	6818      	ldr	r0, [r3, #0]
1a0012a6:	4b0f      	ldr	r3, [pc, #60]	; (1a0012e4 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012a8:	6819      	ldr	r1, [r3, #0]
1a0012aa:	3104      	adds	r1, #4
1a0012ac:	f7ff fe21 	bl	1a000ef2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0012b0:	4b0f      	ldr	r3, [pc, #60]	; (1a0012f0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0012b2:	681b      	ldr	r3, [r3, #0]
1a0012b4:	42a3      	cmp	r3, r4
1a0012b6:	d912      	bls.n	1a0012de <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0012b8:	4b0d      	ldr	r3, [pc, #52]	; (1a0012f0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0012ba:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0012bc:	e00f      	b.n	1a0012de <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0012be:	2e00      	cmp	r6, #0
1a0012c0:	d0e9      	beq.n	1a001296 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012c2:	4b08      	ldr	r3, [pc, #32]	; (1a0012e4 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012c4:	6819      	ldr	r1, [r3, #0]
1a0012c6:	3104      	adds	r1, #4
1a0012c8:	480a      	ldr	r0, [pc, #40]	; (1a0012f4 <prvAddCurrentTaskToDelayedList+0x90>)
1a0012ca:	f7ff fe06 	bl	1a000eda <vListInsertEnd>
1a0012ce:	e006      	b.n	1a0012de <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012d0:	4b09      	ldr	r3, [pc, #36]	; (1a0012f8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0012d2:	6818      	ldr	r0, [r3, #0]
1a0012d4:	4b03      	ldr	r3, [pc, #12]	; (1a0012e4 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012d6:	6819      	ldr	r1, [r3, #0]
1a0012d8:	3104      	adds	r1, #4
1a0012da:	f7ff fe0a 	bl	1a000ef2 <vListInsert>
}
1a0012de:	bd70      	pop	{r4, r5, r6, pc}
1a0012e0:	100029a8 	.word	0x100029a8
1a0012e4:	10002888 	.word	0x10002888
1a0012e8:	10002934 	.word	0x10002934
1a0012ec:	1000288c 	.word	0x1000288c
1a0012f0:	10002960 	.word	0x10002960
1a0012f4:	10002980 	.word	0x10002980
1a0012f8:	10002890 	.word	0x10002890

1a0012fc <xTaskCreateStatic>:
	{
1a0012fc:	b570      	push	{r4, r5, r6, lr}
1a0012fe:	b086      	sub	sp, #24
1a001300:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001302:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001304:	b945      	cbnz	r5, 1a001318 <xTaskCreateStatic+0x1c>
1a001306:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00130a:	f383 8811 	msr	BASEPRI, r3
1a00130e:	f3bf 8f6f 	isb	sy
1a001312:	f3bf 8f4f 	dsb	sy
1a001316:	e7fe      	b.n	1a001316 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001318:	b944      	cbnz	r4, 1a00132c <xTaskCreateStatic+0x30>
1a00131a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00131e:	f383 8811 	msr	BASEPRI, r3
1a001322:	f3bf 8f6f 	isb	sy
1a001326:	f3bf 8f4f 	dsb	sy
1a00132a:	e7fe      	b.n	1a00132a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a00132c:	2660      	movs	r6, #96	; 0x60
1a00132e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001330:	9e04      	ldr	r6, [sp, #16]
1a001332:	2e60      	cmp	r6, #96	; 0x60
1a001334:	d008      	beq.n	1a001348 <xTaskCreateStatic+0x4c>
1a001336:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00133a:	f383 8811 	msr	BASEPRI, r3
1a00133e:	f3bf 8f6f 	isb	sy
1a001342:	f3bf 8f4f 	dsb	sy
1a001346:	e7fe      	b.n	1a001346 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001348:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00134a:	2502      	movs	r5, #2
1a00134c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001350:	2500      	movs	r5, #0
1a001352:	9503      	str	r5, [sp, #12]
1a001354:	9402      	str	r4, [sp, #8]
1a001356:	ad05      	add	r5, sp, #20
1a001358:	9501      	str	r5, [sp, #4]
1a00135a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00135c:	9500      	str	r5, [sp, #0]
1a00135e:	f7ff fe57 	bl	1a001010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001362:	4620      	mov	r0, r4
1a001364:	f7ff fed2 	bl	1a00110c <prvAddNewTaskToReadyList>
	}
1a001368:	9805      	ldr	r0, [sp, #20]
1a00136a:	b006      	add	sp, #24
1a00136c:	bd70      	pop	{r4, r5, r6, pc}

1a00136e <xTaskCreate>:
	{
1a00136e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001372:	b085      	sub	sp, #20
1a001374:	4607      	mov	r7, r0
1a001376:	4688      	mov	r8, r1
1a001378:	4615      	mov	r5, r2
1a00137a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00137c:	0090      	lsls	r0, r2, #2
1a00137e:	f7ff f969 	bl	1a000654 <pvPortMalloc>
			if( pxStack != NULL )
1a001382:	b308      	cbz	r0, 1a0013c8 <xTaskCreate+0x5a>
1a001384:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001386:	2060      	movs	r0, #96	; 0x60
1a001388:	f7ff f964 	bl	1a000654 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00138c:	4604      	mov	r4, r0
1a00138e:	b1b8      	cbz	r0, 1a0013c0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001390:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001392:	b1e4      	cbz	r4, 1a0013ce <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001394:	2300      	movs	r3, #0
1a001396:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00139a:	9303      	str	r3, [sp, #12]
1a00139c:	9402      	str	r4, [sp, #8]
1a00139e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0013a0:	9301      	str	r3, [sp, #4]
1a0013a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0013a4:	9300      	str	r3, [sp, #0]
1a0013a6:	464b      	mov	r3, r9
1a0013a8:	462a      	mov	r2, r5
1a0013aa:	4641      	mov	r1, r8
1a0013ac:	4638      	mov	r0, r7
1a0013ae:	f7ff fe2f 	bl	1a001010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0013b2:	4620      	mov	r0, r4
1a0013b4:	f7ff feaa 	bl	1a00110c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0013b8:	2001      	movs	r0, #1
	}
1a0013ba:	b005      	add	sp, #20
1a0013bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0013c0:	4630      	mov	r0, r6
1a0013c2:	f7ff f9d5 	bl	1a000770 <vPortFree>
1a0013c6:	e7e4      	b.n	1a001392 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0013c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0013cc:	e7f5      	b.n	1a0013ba <xTaskCreate+0x4c>
1a0013ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0013d2:	e7f2      	b.n	1a0013ba <xTaskCreate+0x4c>

1a0013d4 <vTaskStartScheduler>:
{
1a0013d4:	b510      	push	{r4, lr}
1a0013d6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0013d8:	2400      	movs	r4, #0
1a0013da:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0013dc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0013de:	aa07      	add	r2, sp, #28
1a0013e0:	a906      	add	r1, sp, #24
1a0013e2:	a805      	add	r0, sp, #20
1a0013e4:	f7ff fdb4 	bl	1a000f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0013e8:	9b05      	ldr	r3, [sp, #20]
1a0013ea:	9302      	str	r3, [sp, #8]
1a0013ec:	9b06      	ldr	r3, [sp, #24]
1a0013ee:	9301      	str	r3, [sp, #4]
1a0013f0:	9400      	str	r4, [sp, #0]
1a0013f2:	4623      	mov	r3, r4
1a0013f4:	9a07      	ldr	r2, [sp, #28]
1a0013f6:	4917      	ldr	r1, [pc, #92]	; (1a001454 <vTaskStartScheduler+0x80>)
1a0013f8:	4817      	ldr	r0, [pc, #92]	; (1a001458 <vTaskStartScheduler+0x84>)
1a0013fa:	f7ff ff7f 	bl	1a0012fc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0013fe:	b140      	cbz	r0, 1a001412 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001400:	f000 fb70 	bl	1a001ae4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001404:	2801      	cmp	r0, #1
1a001406:	d006      	beq.n	1a001416 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001408:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00140c:	d018      	beq.n	1a001440 <vTaskStartScheduler+0x6c>
}
1a00140e:	b008      	add	sp, #32
1a001410:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001412:	2000      	movs	r0, #0
1a001414:	e7f6      	b.n	1a001404 <vTaskStartScheduler+0x30>
1a001416:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00141a:	f383 8811 	msr	BASEPRI, r3
1a00141e:	f3bf 8f6f 	isb	sy
1a001422:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001426:	4b0d      	ldr	r3, [pc, #52]	; (1a00145c <vTaskStartScheduler+0x88>)
1a001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00142c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00142e:	4b0c      	ldr	r3, [pc, #48]	; (1a001460 <vTaskStartScheduler+0x8c>)
1a001430:	2201      	movs	r2, #1
1a001432:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001434:	4b0b      	ldr	r3, [pc, #44]	; (1a001464 <vTaskStartScheduler+0x90>)
1a001436:	2200      	movs	r2, #0
1a001438:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00143a:	f000 fe0d 	bl	1a002058 <xPortStartScheduler>
1a00143e:	e7e6      	b.n	1a00140e <vTaskStartScheduler+0x3a>
1a001440:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001444:	f383 8811 	msr	BASEPRI, r3
1a001448:	f3bf 8f6f 	isb	sy
1a00144c:	f3bf 8f4f 	dsb	sy
1a001450:	e7fe      	b.n	1a001450 <vTaskStartScheduler+0x7c>
1a001452:	bf00      	nop
1a001454:	1a0047ec 	.word	0x1a0047ec
1a001458:	1a00123d 	.word	0x1a00123d
1a00145c:	10002960 	.word	0x10002960
1a001460:	1000297c 	.word	0x1000297c
1a001464:	100029a8 	.word	0x100029a8

1a001468 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001468:	4a02      	ldr	r2, [pc, #8]	; (1a001474 <vTaskSuspendAll+0xc>)
1a00146a:	6813      	ldr	r3, [r2, #0]
1a00146c:	3301      	adds	r3, #1
1a00146e:	6013      	str	r3, [r2, #0]
}
1a001470:	4770      	bx	lr
1a001472:	bf00      	nop
1a001474:	1000292c 	.word	0x1000292c

1a001478 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001478:	4b01      	ldr	r3, [pc, #4]	; (1a001480 <xTaskGetTickCount+0x8>)
1a00147a:	6818      	ldr	r0, [r3, #0]
}
1a00147c:	4770      	bx	lr
1a00147e:	bf00      	nop
1a001480:	100029a8 	.word	0x100029a8

1a001484 <xTaskIncrementTick>:
{
1a001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001486:	4b3a      	ldr	r3, [pc, #232]	; (1a001570 <xTaskIncrementTick+0xec>)
1a001488:	681b      	ldr	r3, [r3, #0]
1a00148a:	2b00      	cmp	r3, #0
1a00148c:	d164      	bne.n	1a001558 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00148e:	4b39      	ldr	r3, [pc, #228]	; (1a001574 <xTaskIncrementTick+0xf0>)
1a001490:	681d      	ldr	r5, [r3, #0]
1a001492:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001494:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001496:	b9c5      	cbnz	r5, 1a0014ca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001498:	4b37      	ldr	r3, [pc, #220]	; (1a001578 <xTaskIncrementTick+0xf4>)
1a00149a:	681b      	ldr	r3, [r3, #0]
1a00149c:	681b      	ldr	r3, [r3, #0]
1a00149e:	b143      	cbz	r3, 1a0014b2 <xTaskIncrementTick+0x2e>
1a0014a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014a4:	f383 8811 	msr	BASEPRI, r3
1a0014a8:	f3bf 8f6f 	isb	sy
1a0014ac:	f3bf 8f4f 	dsb	sy
1a0014b0:	e7fe      	b.n	1a0014b0 <xTaskIncrementTick+0x2c>
1a0014b2:	4a31      	ldr	r2, [pc, #196]	; (1a001578 <xTaskIncrementTick+0xf4>)
1a0014b4:	6811      	ldr	r1, [r2, #0]
1a0014b6:	4b31      	ldr	r3, [pc, #196]	; (1a00157c <xTaskIncrementTick+0xf8>)
1a0014b8:	6818      	ldr	r0, [r3, #0]
1a0014ba:	6010      	str	r0, [r2, #0]
1a0014bc:	6019      	str	r1, [r3, #0]
1a0014be:	4a30      	ldr	r2, [pc, #192]	; (1a001580 <xTaskIncrementTick+0xfc>)
1a0014c0:	6813      	ldr	r3, [r2, #0]
1a0014c2:	3301      	adds	r3, #1
1a0014c4:	6013      	str	r3, [r2, #0]
1a0014c6:	f7ff fd8d 	bl	1a000fe4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0014ca:	4b2e      	ldr	r3, [pc, #184]	; (1a001584 <xTaskIncrementTick+0x100>)
1a0014cc:	681b      	ldr	r3, [r3, #0]
1a0014ce:	42ab      	cmp	r3, r5
1a0014d0:	d938      	bls.n	1a001544 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0014d2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0014d4:	4b2c      	ldr	r3, [pc, #176]	; (1a001588 <xTaskIncrementTick+0x104>)
1a0014d6:	681b      	ldr	r3, [r3, #0]
1a0014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014de:	009a      	lsls	r2, r3, #2
1a0014e0:	4b2a      	ldr	r3, [pc, #168]	; (1a00158c <xTaskIncrementTick+0x108>)
1a0014e2:	589b      	ldr	r3, [r3, r2]
1a0014e4:	2b01      	cmp	r3, #1
1a0014e6:	d93c      	bls.n	1a001562 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0014e8:	2401      	movs	r4, #1
1a0014ea:	e03a      	b.n	1a001562 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0014ec:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0014ee:	4b22      	ldr	r3, [pc, #136]	; (1a001578 <xTaskIncrementTick+0xf4>)
1a0014f0:	681b      	ldr	r3, [r3, #0]
1a0014f2:	681b      	ldr	r3, [r3, #0]
1a0014f4:	b343      	cbz	r3, 1a001548 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0014f6:	4b20      	ldr	r3, [pc, #128]	; (1a001578 <xTaskIncrementTick+0xf4>)
1a0014f8:	681b      	ldr	r3, [r3, #0]
1a0014fa:	68db      	ldr	r3, [r3, #12]
1a0014fc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0014fe:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001500:	429d      	cmp	r5, r3
1a001502:	d326      	bcc.n	1a001552 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001504:	1d37      	adds	r7, r6, #4
1a001506:	4638      	mov	r0, r7
1a001508:	f7ff fd0d 	bl	1a000f26 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a00150c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00150e:	b11b      	cbz	r3, 1a001518 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001510:	f106 0018 	add.w	r0, r6, #24
1a001514:	f7ff fd07 	bl	1a000f26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001518:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00151a:	2201      	movs	r2, #1
1a00151c:	409a      	lsls	r2, r3
1a00151e:	491c      	ldr	r1, [pc, #112]	; (1a001590 <xTaskIncrementTick+0x10c>)
1a001520:	6808      	ldr	r0, [r1, #0]
1a001522:	4302      	orrs	r2, r0
1a001524:	600a      	str	r2, [r1, #0]
1a001526:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00152a:	009a      	lsls	r2, r3, #2
1a00152c:	4639      	mov	r1, r7
1a00152e:	4817      	ldr	r0, [pc, #92]	; (1a00158c <xTaskIncrementTick+0x108>)
1a001530:	4410      	add	r0, r2
1a001532:	f7ff fcd2 	bl	1a000eda <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001536:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001538:	4b13      	ldr	r3, [pc, #76]	; (1a001588 <xTaskIncrementTick+0x104>)
1a00153a:	681b      	ldr	r3, [r3, #0]
1a00153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00153e:	429a      	cmp	r2, r3
1a001540:	d2d4      	bcs.n	1a0014ec <xTaskIncrementTick+0x68>
1a001542:	e7d4      	b.n	1a0014ee <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001544:	2400      	movs	r4, #0
1a001546:	e7d2      	b.n	1a0014ee <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001548:	4b0e      	ldr	r3, [pc, #56]	; (1a001584 <xTaskIncrementTick+0x100>)
1a00154a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00154e:	601a      	str	r2, [r3, #0]
					break;
1a001550:	e7c0      	b.n	1a0014d4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001552:	4a0c      	ldr	r2, [pc, #48]	; (1a001584 <xTaskIncrementTick+0x100>)
1a001554:	6013      	str	r3, [r2, #0]
						break;
1a001556:	e7bd      	b.n	1a0014d4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001558:	4a0e      	ldr	r2, [pc, #56]	; (1a001594 <xTaskIncrementTick+0x110>)
1a00155a:	6813      	ldr	r3, [r2, #0]
1a00155c:	3301      	adds	r3, #1
1a00155e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001560:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001562:	4b0d      	ldr	r3, [pc, #52]	; (1a001598 <xTaskIncrementTick+0x114>)
1a001564:	681b      	ldr	r3, [r3, #0]
1a001566:	b103      	cbz	r3, 1a00156a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001568:	2401      	movs	r4, #1
}
1a00156a:	4620      	mov	r0, r4
1a00156c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00156e:	bf00      	nop
1a001570:	1000292c 	.word	0x1000292c
1a001574:	100029a8 	.word	0x100029a8
1a001578:	1000288c 	.word	0x1000288c
1a00157c:	10002890 	.word	0x10002890
1a001580:	10002964 	.word	0x10002964
1a001584:	10002960 	.word	0x10002960
1a001588:	10002888 	.word	0x10002888
1a00158c:	10002894 	.word	0x10002894
1a001590:	10002934 	.word	0x10002934
1a001594:	10002928 	.word	0x10002928
1a001598:	100029ac 	.word	0x100029ac

1a00159c <xTaskResumeAll>:
{
1a00159c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00159e:	4b33      	ldr	r3, [pc, #204]	; (1a00166c <xTaskResumeAll+0xd0>)
1a0015a0:	681b      	ldr	r3, [r3, #0]
1a0015a2:	b943      	cbnz	r3, 1a0015b6 <xTaskResumeAll+0x1a>
1a0015a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015a8:	f383 8811 	msr	BASEPRI, r3
1a0015ac:	f3bf 8f6f 	isb	sy
1a0015b0:	f3bf 8f4f 	dsb	sy
1a0015b4:	e7fe      	b.n	1a0015b4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0015b6:	f000 fcad 	bl	1a001f14 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0015ba:	4b2c      	ldr	r3, [pc, #176]	; (1a00166c <xTaskResumeAll+0xd0>)
1a0015bc:	681a      	ldr	r2, [r3, #0]
1a0015be:	3a01      	subs	r2, #1
1a0015c0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0015c2:	681b      	ldr	r3, [r3, #0]
1a0015c4:	2b00      	cmp	r3, #0
1a0015c6:	d14d      	bne.n	1a001664 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0015c8:	4b29      	ldr	r3, [pc, #164]	; (1a001670 <xTaskResumeAll+0xd4>)
1a0015ca:	681b      	ldr	r3, [r3, #0]
1a0015cc:	b923      	cbnz	r3, 1a0015d8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0015ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0015d0:	f000 fcc2 	bl	1a001f58 <vPortExitCritical>
}
1a0015d4:	4620      	mov	r0, r4
1a0015d6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0015d8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0015da:	4b26      	ldr	r3, [pc, #152]	; (1a001674 <xTaskResumeAll+0xd8>)
1a0015dc:	681b      	ldr	r3, [r3, #0]
1a0015de:	b31b      	cbz	r3, 1a001628 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0015e0:	4b24      	ldr	r3, [pc, #144]	; (1a001674 <xTaskResumeAll+0xd8>)
1a0015e2:	68db      	ldr	r3, [r3, #12]
1a0015e4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0015e6:	f104 0018 	add.w	r0, r4, #24
1a0015ea:	f7ff fc9c 	bl	1a000f26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0015ee:	1d25      	adds	r5, r4, #4
1a0015f0:	4628      	mov	r0, r5
1a0015f2:	f7ff fc98 	bl	1a000f26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0015f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0015f8:	2201      	movs	r2, #1
1a0015fa:	409a      	lsls	r2, r3
1a0015fc:	491e      	ldr	r1, [pc, #120]	; (1a001678 <xTaskResumeAll+0xdc>)
1a0015fe:	6808      	ldr	r0, [r1, #0]
1a001600:	4302      	orrs	r2, r0
1a001602:	600a      	str	r2, [r1, #0]
1a001604:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001608:	009a      	lsls	r2, r3, #2
1a00160a:	4629      	mov	r1, r5
1a00160c:	481b      	ldr	r0, [pc, #108]	; (1a00167c <xTaskResumeAll+0xe0>)
1a00160e:	4410      	add	r0, r2
1a001610:	f7ff fc63 	bl	1a000eda <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001614:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001616:	4b1a      	ldr	r3, [pc, #104]	; (1a001680 <xTaskResumeAll+0xe4>)
1a001618:	681b      	ldr	r3, [r3, #0]
1a00161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00161c:	429a      	cmp	r2, r3
1a00161e:	d3dc      	bcc.n	1a0015da <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001620:	4b18      	ldr	r3, [pc, #96]	; (1a001684 <xTaskResumeAll+0xe8>)
1a001622:	2201      	movs	r2, #1
1a001624:	601a      	str	r2, [r3, #0]
1a001626:	e7d8      	b.n	1a0015da <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001628:	b10c      	cbz	r4, 1a00162e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00162a:	f7ff fcdb 	bl	1a000fe4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00162e:	4b16      	ldr	r3, [pc, #88]	; (1a001688 <xTaskResumeAll+0xec>)
1a001630:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001632:	b154      	cbz	r4, 1a00164a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001634:	f7ff ff26 	bl	1a001484 <xTaskIncrementTick>
1a001638:	b110      	cbz	r0, 1a001640 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00163a:	4b12      	ldr	r3, [pc, #72]	; (1a001684 <xTaskResumeAll+0xe8>)
1a00163c:	2201      	movs	r2, #1
1a00163e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001640:	3c01      	subs	r4, #1
1a001642:	d1f7      	bne.n	1a001634 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001644:	4b10      	ldr	r3, [pc, #64]	; (1a001688 <xTaskResumeAll+0xec>)
1a001646:	2200      	movs	r2, #0
1a001648:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a00164a:	4b0e      	ldr	r3, [pc, #56]	; (1a001684 <xTaskResumeAll+0xe8>)
1a00164c:	681b      	ldr	r3, [r3, #0]
1a00164e:	b15b      	cbz	r3, 1a001668 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001650:	4b0e      	ldr	r3, [pc, #56]	; (1a00168c <xTaskResumeAll+0xf0>)
1a001652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001656:	601a      	str	r2, [r3, #0]
1a001658:	f3bf 8f4f 	dsb	sy
1a00165c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001660:	2401      	movs	r4, #1
1a001662:	e7b5      	b.n	1a0015d0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001664:	2400      	movs	r4, #0
1a001666:	e7b3      	b.n	1a0015d0 <xTaskResumeAll+0x34>
1a001668:	2400      	movs	r4, #0
1a00166a:	e7b1      	b.n	1a0015d0 <xTaskResumeAll+0x34>
1a00166c:	1000292c 	.word	0x1000292c
1a001670:	10002920 	.word	0x10002920
1a001674:	10002968 	.word	0x10002968
1a001678:	10002934 	.word	0x10002934
1a00167c:	10002894 	.word	0x10002894
1a001680:	10002888 	.word	0x10002888
1a001684:	100029ac 	.word	0x100029ac
1a001688:	10002928 	.word	0x10002928
1a00168c:	e000ed04 	.word	0xe000ed04

1a001690 <vTaskDelay>:
	{
1a001690:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001692:	b1a8      	cbz	r0, 1a0016c0 <vTaskDelay+0x30>
1a001694:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001696:	4b0f      	ldr	r3, [pc, #60]	; (1a0016d4 <vTaskDelay+0x44>)
1a001698:	681b      	ldr	r3, [r3, #0]
1a00169a:	b143      	cbz	r3, 1a0016ae <vTaskDelay+0x1e>
1a00169c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a0:	f383 8811 	msr	BASEPRI, r3
1a0016a4:	f3bf 8f6f 	isb	sy
1a0016a8:	f3bf 8f4f 	dsb	sy
1a0016ac:	e7fe      	b.n	1a0016ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0016ae:	f7ff fedb 	bl	1a001468 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0016b2:	2100      	movs	r1, #0
1a0016b4:	4620      	mov	r0, r4
1a0016b6:	f7ff fdd5 	bl	1a001264 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0016ba:	f7ff ff6f 	bl	1a00159c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0016be:	b938      	cbnz	r0, 1a0016d0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0016c0:	4b05      	ldr	r3, [pc, #20]	; (1a0016d8 <vTaskDelay+0x48>)
1a0016c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016c6:	601a      	str	r2, [r3, #0]
1a0016c8:	f3bf 8f4f 	dsb	sy
1a0016cc:	f3bf 8f6f 	isb	sy
	}
1a0016d0:	bd10      	pop	{r4, pc}
1a0016d2:	bf00      	nop
1a0016d4:	1000292c 	.word	0x1000292c
1a0016d8:	e000ed04 	.word	0xe000ed04

1a0016dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0016dc:	4b2c      	ldr	r3, [pc, #176]	; (1a001790 <vTaskSwitchContext+0xb4>)
1a0016de:	681b      	ldr	r3, [r3, #0]
1a0016e0:	b11b      	cbz	r3, 1a0016ea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0016e2:	4b2c      	ldr	r3, [pc, #176]	; (1a001794 <vTaskSwitchContext+0xb8>)
1a0016e4:	2201      	movs	r2, #1
1a0016e6:	601a      	str	r2, [r3, #0]
1a0016e8:	4770      	bx	lr
{
1a0016ea:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0016ec:	4b29      	ldr	r3, [pc, #164]	; (1a001794 <vTaskSwitchContext+0xb8>)
1a0016ee:	2200      	movs	r2, #0
1a0016f0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0016f2:	4b29      	ldr	r3, [pc, #164]	; (1a001798 <vTaskSwitchContext+0xbc>)
1a0016f4:	681b      	ldr	r3, [r3, #0]
1a0016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0016f8:	681a      	ldr	r2, [r3, #0]
1a0016fa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0016fe:	d103      	bne.n	1a001708 <vTaskSwitchContext+0x2c>
1a001700:	685a      	ldr	r2, [r3, #4]
1a001702:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001706:	d01b      	beq.n	1a001740 <vTaskSwitchContext+0x64>
1a001708:	4b23      	ldr	r3, [pc, #140]	; (1a001798 <vTaskSwitchContext+0xbc>)
1a00170a:	6818      	ldr	r0, [r3, #0]
1a00170c:	6819      	ldr	r1, [r3, #0]
1a00170e:	3134      	adds	r1, #52	; 0x34
1a001710:	f7ff fc5a 	bl	1a000fc8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001714:	4b21      	ldr	r3, [pc, #132]	; (1a00179c <vTaskSwitchContext+0xc0>)
1a001716:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001718:	fab3 f383 	clz	r3, r3
1a00171c:	b2db      	uxtb	r3, r3
1a00171e:	f1c3 031f 	rsb	r3, r3, #31
1a001722:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001726:	008a      	lsls	r2, r1, #2
1a001728:	491d      	ldr	r1, [pc, #116]	; (1a0017a0 <vTaskSwitchContext+0xc4>)
1a00172a:	588a      	ldr	r2, [r1, r2]
1a00172c:	b98a      	cbnz	r2, 1a001752 <vTaskSwitchContext+0x76>
	__asm volatile
1a00172e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001732:	f383 8811 	msr	BASEPRI, r3
1a001736:	f3bf 8f6f 	isb	sy
1a00173a:	f3bf 8f4f 	dsb	sy
1a00173e:	e7fe      	b.n	1a00173e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001740:	689a      	ldr	r2, [r3, #8]
1a001742:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001746:	d1df      	bne.n	1a001708 <vTaskSwitchContext+0x2c>
1a001748:	68db      	ldr	r3, [r3, #12]
1a00174a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00174e:	d1db      	bne.n	1a001708 <vTaskSwitchContext+0x2c>
1a001750:	e7e0      	b.n	1a001714 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001752:	4813      	ldr	r0, [pc, #76]	; (1a0017a0 <vTaskSwitchContext+0xc4>)
1a001754:	009a      	lsls	r2, r3, #2
1a001756:	18d4      	adds	r4, r2, r3
1a001758:	00a1      	lsls	r1, r4, #2
1a00175a:	4401      	add	r1, r0
1a00175c:	684c      	ldr	r4, [r1, #4]
1a00175e:	6864      	ldr	r4, [r4, #4]
1a001760:	604c      	str	r4, [r1, #4]
1a001762:	441a      	add	r2, r3
1a001764:	0091      	lsls	r1, r2, #2
1a001766:	3108      	adds	r1, #8
1a001768:	4408      	add	r0, r1
1a00176a:	4284      	cmp	r4, r0
1a00176c:	d009      	beq.n	1a001782 <vTaskSwitchContext+0xa6>
1a00176e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001772:	009a      	lsls	r2, r3, #2
1a001774:	4b0a      	ldr	r3, [pc, #40]	; (1a0017a0 <vTaskSwitchContext+0xc4>)
1a001776:	4413      	add	r3, r2
1a001778:	685b      	ldr	r3, [r3, #4]
1a00177a:	68da      	ldr	r2, [r3, #12]
1a00177c:	4b06      	ldr	r3, [pc, #24]	; (1a001798 <vTaskSwitchContext+0xbc>)
1a00177e:	601a      	str	r2, [r3, #0]
}
1a001780:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001782:	6861      	ldr	r1, [r4, #4]
1a001784:	4806      	ldr	r0, [pc, #24]	; (1a0017a0 <vTaskSwitchContext+0xc4>)
1a001786:	2214      	movs	r2, #20
1a001788:	fb02 0203 	mla	r2, r2, r3, r0
1a00178c:	6051      	str	r1, [r2, #4]
1a00178e:	e7ee      	b.n	1a00176e <vTaskSwitchContext+0x92>
1a001790:	1000292c 	.word	0x1000292c
1a001794:	100029ac 	.word	0x100029ac
1a001798:	10002888 	.word	0x10002888
1a00179c:	10002934 	.word	0x10002934
1a0017a0:	10002894 	.word	0x10002894

1a0017a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0017a4:	b940      	cbnz	r0, 1a0017b8 <vTaskPlaceOnEventList+0x14>
1a0017a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017aa:	f383 8811 	msr	BASEPRI, r3
1a0017ae:	f3bf 8f6f 	isb	sy
1a0017b2:	f3bf 8f4f 	dsb	sy
1a0017b6:	e7fe      	b.n	1a0017b6 <vTaskPlaceOnEventList+0x12>
{
1a0017b8:	b510      	push	{r4, lr}
1a0017ba:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017bc:	4b04      	ldr	r3, [pc, #16]	; (1a0017d0 <vTaskPlaceOnEventList+0x2c>)
1a0017be:	6819      	ldr	r1, [r3, #0]
1a0017c0:	3118      	adds	r1, #24
1a0017c2:	f7ff fb96 	bl	1a000ef2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0017c6:	2101      	movs	r1, #1
1a0017c8:	4620      	mov	r0, r4
1a0017ca:	f7ff fd4b 	bl	1a001264 <prvAddCurrentTaskToDelayedList>
}
1a0017ce:	bd10      	pop	{r4, pc}
1a0017d0:	10002888 	.word	0x10002888

1a0017d4 <vTaskPlaceOnEventListRestricted>:
	{
1a0017d4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0017d6:	b940      	cbnz	r0, 1a0017ea <vTaskPlaceOnEventListRestricted+0x16>
1a0017d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017dc:	f383 8811 	msr	BASEPRI, r3
1a0017e0:	f3bf 8f6f 	isb	sy
1a0017e4:	f3bf 8f4f 	dsb	sy
1a0017e8:	e7fe      	b.n	1a0017e8 <vTaskPlaceOnEventListRestricted+0x14>
1a0017ea:	460c      	mov	r4, r1
1a0017ec:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017ee:	4a06      	ldr	r2, [pc, #24]	; (1a001808 <vTaskPlaceOnEventListRestricted+0x34>)
1a0017f0:	6811      	ldr	r1, [r2, #0]
1a0017f2:	3118      	adds	r1, #24
1a0017f4:	f7ff fb71 	bl	1a000eda <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0017f8:	b10d      	cbz	r5, 1a0017fe <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0017fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0017fe:	4629      	mov	r1, r5
1a001800:	4620      	mov	r0, r4
1a001802:	f7ff fd2f 	bl	1a001264 <prvAddCurrentTaskToDelayedList>
	}
1a001806:	bd38      	pop	{r3, r4, r5, pc}
1a001808:	10002888 	.word	0x10002888

1a00180c <xTaskRemoveFromEventList>:
{
1a00180c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00180e:	68c3      	ldr	r3, [r0, #12]
1a001810:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001812:	b944      	cbnz	r4, 1a001826 <xTaskRemoveFromEventList+0x1a>
1a001814:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001818:	f383 8811 	msr	BASEPRI, r3
1a00181c:	f3bf 8f6f 	isb	sy
1a001820:	f3bf 8f4f 	dsb	sy
1a001824:	e7fe      	b.n	1a001824 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001826:	f104 0518 	add.w	r5, r4, #24
1a00182a:	4628      	mov	r0, r5
1a00182c:	f7ff fb7b 	bl	1a000f26 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001830:	4b13      	ldr	r3, [pc, #76]	; (1a001880 <xTaskRemoveFromEventList+0x74>)
1a001832:	681b      	ldr	r3, [r3, #0]
1a001834:	b9e3      	cbnz	r3, 1a001870 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001836:	1d25      	adds	r5, r4, #4
1a001838:	4628      	mov	r0, r5
1a00183a:	f7ff fb74 	bl	1a000f26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00183e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001840:	2201      	movs	r2, #1
1a001842:	409a      	lsls	r2, r3
1a001844:	490f      	ldr	r1, [pc, #60]	; (1a001884 <xTaskRemoveFromEventList+0x78>)
1a001846:	6808      	ldr	r0, [r1, #0]
1a001848:	4302      	orrs	r2, r0
1a00184a:	600a      	str	r2, [r1, #0]
1a00184c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001850:	009a      	lsls	r2, r3, #2
1a001852:	4629      	mov	r1, r5
1a001854:	480c      	ldr	r0, [pc, #48]	; (1a001888 <xTaskRemoveFromEventList+0x7c>)
1a001856:	4410      	add	r0, r2
1a001858:	f7ff fb3f 	bl	1a000eda <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00185c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00185e:	4b0b      	ldr	r3, [pc, #44]	; (1a00188c <xTaskRemoveFromEventList+0x80>)
1a001860:	681b      	ldr	r3, [r3, #0]
1a001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001864:	429a      	cmp	r2, r3
1a001866:	d908      	bls.n	1a00187a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001868:	2001      	movs	r0, #1
1a00186a:	4b09      	ldr	r3, [pc, #36]	; (1a001890 <xTaskRemoveFromEventList+0x84>)
1a00186c:	6018      	str	r0, [r3, #0]
}
1a00186e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001870:	4629      	mov	r1, r5
1a001872:	4808      	ldr	r0, [pc, #32]	; (1a001894 <xTaskRemoveFromEventList+0x88>)
1a001874:	f7ff fb31 	bl	1a000eda <vListInsertEnd>
1a001878:	e7f0      	b.n	1a00185c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00187a:	2000      	movs	r0, #0
	return xReturn;
1a00187c:	e7f7      	b.n	1a00186e <xTaskRemoveFromEventList+0x62>
1a00187e:	bf00      	nop
1a001880:	1000292c 	.word	0x1000292c
1a001884:	10002934 	.word	0x10002934
1a001888:	10002894 	.word	0x10002894
1a00188c:	10002888 	.word	0x10002888
1a001890:	100029ac 	.word	0x100029ac
1a001894:	10002968 	.word	0x10002968

1a001898 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001898:	4b03      	ldr	r3, [pc, #12]	; (1a0018a8 <vTaskInternalSetTimeOutState+0x10>)
1a00189a:	681b      	ldr	r3, [r3, #0]
1a00189c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00189e:	4b03      	ldr	r3, [pc, #12]	; (1a0018ac <vTaskInternalSetTimeOutState+0x14>)
1a0018a0:	681b      	ldr	r3, [r3, #0]
1a0018a2:	6043      	str	r3, [r0, #4]
}
1a0018a4:	4770      	bx	lr
1a0018a6:	bf00      	nop
1a0018a8:	10002964 	.word	0x10002964
1a0018ac:	100029a8 	.word	0x100029a8

1a0018b0 <xTaskCheckForTimeOut>:
{
1a0018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0018b2:	b150      	cbz	r0, 1a0018ca <xTaskCheckForTimeOut+0x1a>
1a0018b4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0018b6:	b989      	cbnz	r1, 1a0018dc <xTaskCheckForTimeOut+0x2c>
1a0018b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018bc:	f383 8811 	msr	BASEPRI, r3
1a0018c0:	f3bf 8f6f 	isb	sy
1a0018c4:	f3bf 8f4f 	dsb	sy
1a0018c8:	e7fe      	b.n	1a0018c8 <xTaskCheckForTimeOut+0x18>
1a0018ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ce:	f383 8811 	msr	BASEPRI, r3
1a0018d2:	f3bf 8f6f 	isb	sy
1a0018d6:	f3bf 8f4f 	dsb	sy
1a0018da:	e7fe      	b.n	1a0018da <xTaskCheckForTimeOut+0x2a>
1a0018dc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0018de:	f000 fb19 	bl	1a001f14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0018e2:	4b11      	ldr	r3, [pc, #68]	; (1a001928 <xTaskCheckForTimeOut+0x78>)
1a0018e4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0018e6:	6868      	ldr	r0, [r5, #4]
1a0018e8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0018ea:	6823      	ldr	r3, [r4, #0]
1a0018ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018f0:	d016      	beq.n	1a001920 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0018f2:	682f      	ldr	r7, [r5, #0]
1a0018f4:	4e0d      	ldr	r6, [pc, #52]	; (1a00192c <xTaskCheckForTimeOut+0x7c>)
1a0018f6:	6836      	ldr	r6, [r6, #0]
1a0018f8:	42b7      	cmp	r7, r6
1a0018fa:	d001      	beq.n	1a001900 <xTaskCheckForTimeOut+0x50>
1a0018fc:	4288      	cmp	r0, r1
1a0018fe:	d911      	bls.n	1a001924 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001900:	4293      	cmp	r3, r2
1a001902:	d803      	bhi.n	1a00190c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001904:	2300      	movs	r3, #0
1a001906:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001908:	2401      	movs	r4, #1
1a00190a:	e005      	b.n	1a001918 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a00190c:	1a9b      	subs	r3, r3, r2
1a00190e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001910:	4628      	mov	r0, r5
1a001912:	f7ff ffc1 	bl	1a001898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001916:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001918:	f000 fb1e 	bl	1a001f58 <vPortExitCritical>
}
1a00191c:	4620      	mov	r0, r4
1a00191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001920:	2400      	movs	r4, #0
1a001922:	e7f9      	b.n	1a001918 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001924:	2401      	movs	r4, #1
1a001926:	e7f7      	b.n	1a001918 <xTaskCheckForTimeOut+0x68>
1a001928:	100029a8 	.word	0x100029a8
1a00192c:	10002964 	.word	0x10002964

1a001930 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001930:	4b01      	ldr	r3, [pc, #4]	; (1a001938 <vTaskMissedYield+0x8>)
1a001932:	2201      	movs	r2, #1
1a001934:	601a      	str	r2, [r3, #0]
}
1a001936:	4770      	bx	lr
1a001938:	100029ac 	.word	0x100029ac

1a00193c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00193c:	4b05      	ldr	r3, [pc, #20]	; (1a001954 <xTaskGetSchedulerState+0x18>)
1a00193e:	681b      	ldr	r3, [r3, #0]
1a001940:	b133      	cbz	r3, 1a001950 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001942:	4b05      	ldr	r3, [pc, #20]	; (1a001958 <xTaskGetSchedulerState+0x1c>)
1a001944:	681b      	ldr	r3, [r3, #0]
1a001946:	b10b      	cbz	r3, 1a00194c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001948:	2000      	movs	r0, #0
	}
1a00194a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00194c:	2002      	movs	r0, #2
1a00194e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001950:	2001      	movs	r0, #1
1a001952:	4770      	bx	lr
1a001954:	1000297c 	.word	0x1000297c
1a001958:	1000292c 	.word	0x1000292c

1a00195c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a00195c:	2800      	cmp	r0, #0
1a00195e:	d049      	beq.n	1a0019f4 <xTaskPriorityDisinherit+0x98>
	{
1a001960:	b538      	push	{r3, r4, r5, lr}
1a001962:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001964:	4a26      	ldr	r2, [pc, #152]	; (1a001a00 <xTaskPriorityDisinherit+0xa4>)
1a001966:	6812      	ldr	r2, [r2, #0]
1a001968:	4282      	cmp	r2, r0
1a00196a:	d008      	beq.n	1a00197e <xTaskPriorityDisinherit+0x22>
1a00196c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001970:	f383 8811 	msr	BASEPRI, r3
1a001974:	f3bf 8f6f 	isb	sy
1a001978:	f3bf 8f4f 	dsb	sy
1a00197c:	e7fe      	b.n	1a00197c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00197e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001980:	b942      	cbnz	r2, 1a001994 <xTaskPriorityDisinherit+0x38>
1a001982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001986:	f383 8811 	msr	BASEPRI, r3
1a00198a:	f3bf 8f6f 	isb	sy
1a00198e:	f3bf 8f4f 	dsb	sy
1a001992:	e7fe      	b.n	1a001992 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001994:	3a01      	subs	r2, #1
1a001996:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001998:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00199a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00199c:	4288      	cmp	r0, r1
1a00199e:	d02b      	beq.n	1a0019f8 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0019a0:	bb62      	cbnz	r2, 1a0019fc <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019a2:	1d25      	adds	r5, r4, #4
1a0019a4:	4628      	mov	r0, r5
1a0019a6:	f7ff fabe 	bl	1a000f26 <uxListRemove>
1a0019aa:	b970      	cbnz	r0, 1a0019ca <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0019ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019ae:	2314      	movs	r3, #20
1a0019b0:	fb03 f302 	mul.w	r3, r3, r2
1a0019b4:	4913      	ldr	r1, [pc, #76]	; (1a001a04 <xTaskPriorityDisinherit+0xa8>)
1a0019b6:	58cb      	ldr	r3, [r1, r3]
1a0019b8:	b93b      	cbnz	r3, 1a0019ca <xTaskPriorityDisinherit+0x6e>
1a0019ba:	2301      	movs	r3, #1
1a0019bc:	fa03 f202 	lsl.w	r2, r3, r2
1a0019c0:	4911      	ldr	r1, [pc, #68]	; (1a001a08 <xTaskPriorityDisinherit+0xac>)
1a0019c2:	680b      	ldr	r3, [r1, #0]
1a0019c4:	ea23 0302 	bic.w	r3, r3, r2
1a0019c8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0019ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0019cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0019ce:	f1c3 0207 	rsb	r2, r3, #7
1a0019d2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0019d4:	2401      	movs	r4, #1
1a0019d6:	fa04 f203 	lsl.w	r2, r4, r3
1a0019da:	490b      	ldr	r1, [pc, #44]	; (1a001a08 <xTaskPriorityDisinherit+0xac>)
1a0019dc:	6808      	ldr	r0, [r1, #0]
1a0019de:	4302      	orrs	r2, r0
1a0019e0:	600a      	str	r2, [r1, #0]
1a0019e2:	4629      	mov	r1, r5
1a0019e4:	4a07      	ldr	r2, [pc, #28]	; (1a001a04 <xTaskPriorityDisinherit+0xa8>)
1a0019e6:	2014      	movs	r0, #20
1a0019e8:	fb00 2003 	mla	r0, r0, r3, r2
1a0019ec:	f7ff fa75 	bl	1a000eda <vListInsertEnd>
					xReturn = pdTRUE;
1a0019f0:	4620      	mov	r0, r4
	}
1a0019f2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0019f4:	2000      	movs	r0, #0
	}
1a0019f6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0019f8:	2000      	movs	r0, #0
1a0019fa:	e7fa      	b.n	1a0019f2 <xTaskPriorityDisinherit+0x96>
1a0019fc:	2000      	movs	r0, #0
		return xReturn;
1a0019fe:	e7f8      	b.n	1a0019f2 <xTaskPriorityDisinherit+0x96>
1a001a00:	10002888 	.word	0x10002888
1a001a04:	10002894 	.word	0x10002894
1a001a08:	10002934 	.word	0x10002934

1a001a0c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001a0c:	4b06      	ldr	r3, [pc, #24]	; (1a001a28 <prvGetNextExpireTime+0x1c>)
1a001a0e:	681a      	ldr	r2, [r3, #0]
1a001a10:	6813      	ldr	r3, [r2, #0]
1a001a12:	fab3 f383 	clz	r3, r3
1a001a16:	095b      	lsrs	r3, r3, #5
1a001a18:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001a1a:	b913      	cbnz	r3, 1a001a22 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001a1c:	68d3      	ldr	r3, [r2, #12]
1a001a1e:	6818      	ldr	r0, [r3, #0]
1a001a20:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001a22:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001a24:	4770      	bx	lr
1a001a26:	bf00      	nop
1a001a28:	100029b0 	.word	0x100029b0

1a001a2c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001a2c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001a2e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001a30:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001a32:	4291      	cmp	r1, r2
1a001a34:	d80c      	bhi.n	1a001a50 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a36:	1ad2      	subs	r2, r2, r3
1a001a38:	6983      	ldr	r3, [r0, #24]
1a001a3a:	429a      	cmp	r2, r3
1a001a3c:	d301      	bcc.n	1a001a42 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001a3e:	2001      	movs	r0, #1
1a001a40:	e010      	b.n	1a001a64 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001a42:	1d01      	adds	r1, r0, #4
1a001a44:	4b09      	ldr	r3, [pc, #36]	; (1a001a6c <prvInsertTimerInActiveList+0x40>)
1a001a46:	6818      	ldr	r0, [r3, #0]
1a001a48:	f7ff fa53 	bl	1a000ef2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a4c:	2000      	movs	r0, #0
1a001a4e:	e009      	b.n	1a001a64 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001a50:	429a      	cmp	r2, r3
1a001a52:	d201      	bcs.n	1a001a58 <prvInsertTimerInActiveList+0x2c>
1a001a54:	4299      	cmp	r1, r3
1a001a56:	d206      	bcs.n	1a001a66 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001a58:	1d01      	adds	r1, r0, #4
1a001a5a:	4b05      	ldr	r3, [pc, #20]	; (1a001a70 <prvInsertTimerInActiveList+0x44>)
1a001a5c:	6818      	ldr	r0, [r3, #0]
1a001a5e:	f7ff fa48 	bl	1a000ef2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a62:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001a64:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001a66:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001a68:	e7fc      	b.n	1a001a64 <prvInsertTimerInActiveList+0x38>
1a001a6a:	bf00      	nop
1a001a6c:	100029b4 	.word	0x100029b4
1a001a70:	100029b0 	.word	0x100029b0

1a001a74 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001a74:	b530      	push	{r4, r5, lr}
1a001a76:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001a78:	f000 fa4c 	bl	1a001f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001a7c:	4b11      	ldr	r3, [pc, #68]	; (1a001ac4 <prvCheckForValidListAndQueue+0x50>)
1a001a7e:	681b      	ldr	r3, [r3, #0]
1a001a80:	b11b      	cbz	r3, 1a001a8a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001a82:	f000 fa69 	bl	1a001f58 <vPortExitCritical>
}
1a001a86:	b003      	add	sp, #12
1a001a88:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001a8a:	4d0f      	ldr	r5, [pc, #60]	; (1a001ac8 <prvCheckForValidListAndQueue+0x54>)
1a001a8c:	4628      	mov	r0, r5
1a001a8e:	f7ff fa16 	bl	1a000ebe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001a92:	4c0e      	ldr	r4, [pc, #56]	; (1a001acc <prvCheckForValidListAndQueue+0x58>)
1a001a94:	4620      	mov	r0, r4
1a001a96:	f7ff fa12 	bl	1a000ebe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001a9a:	4b0d      	ldr	r3, [pc, #52]	; (1a001ad0 <prvCheckForValidListAndQueue+0x5c>)
1a001a9c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001a9e:	4b0d      	ldr	r3, [pc, #52]	; (1a001ad4 <prvCheckForValidListAndQueue+0x60>)
1a001aa0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001aa2:	2300      	movs	r3, #0
1a001aa4:	9300      	str	r3, [sp, #0]
1a001aa6:	4b0c      	ldr	r3, [pc, #48]	; (1a001ad8 <prvCheckForValidListAndQueue+0x64>)
1a001aa8:	4a0c      	ldr	r2, [pc, #48]	; (1a001adc <prvCheckForValidListAndQueue+0x68>)
1a001aaa:	2110      	movs	r1, #16
1a001aac:	200a      	movs	r0, #10
1a001aae:	f7fe ff8a 	bl	1a0009c6 <xQueueGenericCreateStatic>
1a001ab2:	4b04      	ldr	r3, [pc, #16]	; (1a001ac4 <prvCheckForValidListAndQueue+0x50>)
1a001ab4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001ab6:	2800      	cmp	r0, #0
1a001ab8:	d0e3      	beq.n	1a001a82 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001aba:	4909      	ldr	r1, [pc, #36]	; (1a001ae0 <prvCheckForValidListAndQueue+0x6c>)
1a001abc:	f7ff f9c2 	bl	1a000e44 <vQueueAddToRegistry>
1a001ac0:	e7df      	b.n	1a001a82 <prvCheckForValidListAndQueue+0xe>
1a001ac2:	bf00      	nop
1a001ac4:	10002ad4 	.word	0x10002ad4
1a001ac8:	10002a58 	.word	0x10002a58
1a001acc:	10002a6c 	.word	0x10002a6c
1a001ad0:	100029b0 	.word	0x100029b0
1a001ad4:	100029b4 	.word	0x100029b4
1a001ad8:	10002a84 	.word	0x10002a84
1a001adc:	100029b8 	.word	0x100029b8
1a001ae0:	1a0047f4 	.word	0x1a0047f4

1a001ae4 <xTimerCreateTimerTask>:
{
1a001ae4:	b510      	push	{r4, lr}
1a001ae6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001ae8:	f7ff ffc4 	bl	1a001a74 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001aec:	4b12      	ldr	r3, [pc, #72]	; (1a001b38 <xTimerCreateTimerTask+0x54>)
1a001aee:	681b      	ldr	r3, [r3, #0]
1a001af0:	b1cb      	cbz	r3, 1a001b26 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001af2:	2400      	movs	r4, #0
1a001af4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001af6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001af8:	aa07      	add	r2, sp, #28
1a001afa:	a906      	add	r1, sp, #24
1a001afc:	a805      	add	r0, sp, #20
1a001afe:	f7ff fa33 	bl	1a000f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001b02:	9b05      	ldr	r3, [sp, #20]
1a001b04:	9302      	str	r3, [sp, #8]
1a001b06:	9b06      	ldr	r3, [sp, #24]
1a001b08:	9301      	str	r3, [sp, #4]
1a001b0a:	2304      	movs	r3, #4
1a001b0c:	9300      	str	r3, [sp, #0]
1a001b0e:	4623      	mov	r3, r4
1a001b10:	9a07      	ldr	r2, [sp, #28]
1a001b12:	490a      	ldr	r1, [pc, #40]	; (1a001b3c <xTimerCreateTimerTask+0x58>)
1a001b14:	480a      	ldr	r0, [pc, #40]	; (1a001b40 <xTimerCreateTimerTask+0x5c>)
1a001b16:	f7ff fbf1 	bl	1a0012fc <xTaskCreateStatic>
1a001b1a:	4b0a      	ldr	r3, [pc, #40]	; (1a001b44 <xTimerCreateTimerTask+0x60>)
1a001b1c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001b1e:	b110      	cbz	r0, 1a001b26 <xTimerCreateTimerTask+0x42>
}
1a001b20:	2001      	movs	r0, #1
1a001b22:	b008      	add	sp, #32
1a001b24:	bd10      	pop	{r4, pc}
1a001b26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b2a:	f383 8811 	msr	BASEPRI, r3
1a001b2e:	f3bf 8f6f 	isb	sy
1a001b32:	f3bf 8f4f 	dsb	sy
1a001b36:	e7fe      	b.n	1a001b36 <xTimerCreateTimerTask+0x52>
1a001b38:	10002ad4 	.word	0x10002ad4
1a001b3c:	1a0047fc 	.word	0x1a0047fc
1a001b40:	1a001e29 	.word	0x1a001e29
1a001b44:	10002ad8 	.word	0x10002ad8

1a001b48 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001b48:	b1c8      	cbz	r0, 1a001b7e <xTimerGenericCommand+0x36>
{
1a001b4a:	b530      	push	{r4, r5, lr}
1a001b4c:	b085      	sub	sp, #20
1a001b4e:	4615      	mov	r5, r2
1a001b50:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001b52:	4a17      	ldr	r2, [pc, #92]	; (1a001bb0 <xTimerGenericCommand+0x68>)
1a001b54:	6810      	ldr	r0, [r2, #0]
1a001b56:	b340      	cbz	r0, 1a001baa <xTimerGenericCommand+0x62>
1a001b58:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001b5a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001b5c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001b5e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001b60:	2905      	cmp	r1, #5
1a001b62:	dc1d      	bgt.n	1a001ba0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001b64:	f7ff feea 	bl	1a00193c <xTaskGetSchedulerState>
1a001b68:	2802      	cmp	r0, #2
1a001b6a:	d011      	beq.n	1a001b90 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001b6c:	2300      	movs	r3, #0
1a001b6e:	461a      	mov	r2, r3
1a001b70:	4669      	mov	r1, sp
1a001b72:	480f      	ldr	r0, [pc, #60]	; (1a001bb0 <xTimerGenericCommand+0x68>)
1a001b74:	6800      	ldr	r0, [r0, #0]
1a001b76:	f7fe ff95 	bl	1a000aa4 <xQueueGenericSend>
}
1a001b7a:	b005      	add	sp, #20
1a001b7c:	bd30      	pop	{r4, r5, pc}
1a001b7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b82:	f383 8811 	msr	BASEPRI, r3
1a001b86:	f3bf 8f6f 	isb	sy
1a001b8a:	f3bf 8f4f 	dsb	sy
1a001b8e:	e7fe      	b.n	1a001b8e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001b90:	2300      	movs	r3, #0
1a001b92:	9a08      	ldr	r2, [sp, #32]
1a001b94:	4669      	mov	r1, sp
1a001b96:	4806      	ldr	r0, [pc, #24]	; (1a001bb0 <xTimerGenericCommand+0x68>)
1a001b98:	6800      	ldr	r0, [r0, #0]
1a001b9a:	f7fe ff83 	bl	1a000aa4 <xQueueGenericSend>
1a001b9e:	e7ec      	b.n	1a001b7a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001ba0:	2300      	movs	r3, #0
1a001ba2:	4669      	mov	r1, sp
1a001ba4:	f7ff f83c 	bl	1a000c20 <xQueueGenericSendFromISR>
1a001ba8:	e7e7      	b.n	1a001b7a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001baa:	2000      	movs	r0, #0
	return xReturn;
1a001bac:	e7e5      	b.n	1a001b7a <xTimerGenericCommand+0x32>
1a001bae:	bf00      	nop
1a001bb0:	10002ad4 	.word	0x10002ad4

1a001bb4 <prvSwitchTimerLists>:
{
1a001bb4:	b570      	push	{r4, r5, r6, lr}
1a001bb6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001bb8:	4b1a      	ldr	r3, [pc, #104]	; (1a001c24 <prvSwitchTimerLists+0x70>)
1a001bba:	681b      	ldr	r3, [r3, #0]
1a001bbc:	681a      	ldr	r2, [r3, #0]
1a001bbe:	b352      	cbz	r2, 1a001c16 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001bc0:	68db      	ldr	r3, [r3, #12]
1a001bc2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001bc4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001bc6:	1d25      	adds	r5, r4, #4
1a001bc8:	4628      	mov	r0, r5
1a001bca:	f7ff f9ac 	bl	1a000f26 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001bd0:	4620      	mov	r0, r4
1a001bd2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001bd4:	69e3      	ldr	r3, [r4, #28]
1a001bd6:	2b01      	cmp	r3, #1
1a001bd8:	d1ee      	bne.n	1a001bb8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001bda:	69a3      	ldr	r3, [r4, #24]
1a001bdc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001bde:	429e      	cmp	r6, r3
1a001be0:	d207      	bcs.n	1a001bf2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001be2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001be4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001be6:	4629      	mov	r1, r5
1a001be8:	4b0e      	ldr	r3, [pc, #56]	; (1a001c24 <prvSwitchTimerLists+0x70>)
1a001bea:	6818      	ldr	r0, [r3, #0]
1a001bec:	f7ff f981 	bl	1a000ef2 <vListInsert>
1a001bf0:	e7e2      	b.n	1a001bb8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001bf2:	2100      	movs	r1, #0
1a001bf4:	9100      	str	r1, [sp, #0]
1a001bf6:	460b      	mov	r3, r1
1a001bf8:	4632      	mov	r2, r6
1a001bfa:	4620      	mov	r0, r4
1a001bfc:	f7ff ffa4 	bl	1a001b48 <xTimerGenericCommand>
				configASSERT( xResult );
1a001c00:	2800      	cmp	r0, #0
1a001c02:	d1d9      	bne.n	1a001bb8 <prvSwitchTimerLists+0x4>
1a001c04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c08:	f383 8811 	msr	BASEPRI, r3
1a001c0c:	f3bf 8f6f 	isb	sy
1a001c10:	f3bf 8f4f 	dsb	sy
1a001c14:	e7fe      	b.n	1a001c14 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001c16:	4a04      	ldr	r2, [pc, #16]	; (1a001c28 <prvSwitchTimerLists+0x74>)
1a001c18:	6810      	ldr	r0, [r2, #0]
1a001c1a:	4902      	ldr	r1, [pc, #8]	; (1a001c24 <prvSwitchTimerLists+0x70>)
1a001c1c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001c1e:	6013      	str	r3, [r2, #0]
}
1a001c20:	b002      	add	sp, #8
1a001c22:	bd70      	pop	{r4, r5, r6, pc}
1a001c24:	100029b0 	.word	0x100029b0
1a001c28:	100029b4 	.word	0x100029b4

1a001c2c <prvSampleTimeNow>:
{
1a001c2c:	b538      	push	{r3, r4, r5, lr}
1a001c2e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001c30:	f7ff fc22 	bl	1a001478 <xTaskGetTickCount>
1a001c34:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001c36:	4b07      	ldr	r3, [pc, #28]	; (1a001c54 <prvSampleTimeNow+0x28>)
1a001c38:	681b      	ldr	r3, [r3, #0]
1a001c3a:	4283      	cmp	r3, r0
1a001c3c:	d805      	bhi.n	1a001c4a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001c3e:	2300      	movs	r3, #0
1a001c40:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001c42:	4b04      	ldr	r3, [pc, #16]	; (1a001c54 <prvSampleTimeNow+0x28>)
1a001c44:	601c      	str	r4, [r3, #0]
}
1a001c46:	4620      	mov	r0, r4
1a001c48:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001c4a:	f7ff ffb3 	bl	1a001bb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001c4e:	2301      	movs	r3, #1
1a001c50:	602b      	str	r3, [r5, #0]
1a001c52:	e7f6      	b.n	1a001c42 <prvSampleTimeNow+0x16>
1a001c54:	10002a80 	.word	0x10002a80

1a001c58 <prvProcessExpiredTimer>:
{
1a001c58:	b570      	push	{r4, r5, r6, lr}
1a001c5a:	b082      	sub	sp, #8
1a001c5c:	4605      	mov	r5, r0
1a001c5e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c60:	4b14      	ldr	r3, [pc, #80]	; (1a001cb4 <prvProcessExpiredTimer+0x5c>)
1a001c62:	681b      	ldr	r3, [r3, #0]
1a001c64:	68db      	ldr	r3, [r3, #12]
1a001c66:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001c68:	1d20      	adds	r0, r4, #4
1a001c6a:	f7ff f95c 	bl	1a000f26 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001c6e:	69e3      	ldr	r3, [r4, #28]
1a001c70:	2b01      	cmp	r3, #1
1a001c72:	d004      	beq.n	1a001c7e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001c76:	4620      	mov	r0, r4
1a001c78:	4798      	blx	r3
}
1a001c7a:	b002      	add	sp, #8
1a001c7c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001c7e:	69a1      	ldr	r1, [r4, #24]
1a001c80:	462b      	mov	r3, r5
1a001c82:	4632      	mov	r2, r6
1a001c84:	4429      	add	r1, r5
1a001c86:	4620      	mov	r0, r4
1a001c88:	f7ff fed0 	bl	1a001a2c <prvInsertTimerInActiveList>
1a001c8c:	2800      	cmp	r0, #0
1a001c8e:	d0f1      	beq.n	1a001c74 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001c90:	2100      	movs	r1, #0
1a001c92:	9100      	str	r1, [sp, #0]
1a001c94:	460b      	mov	r3, r1
1a001c96:	462a      	mov	r2, r5
1a001c98:	4620      	mov	r0, r4
1a001c9a:	f7ff ff55 	bl	1a001b48 <xTimerGenericCommand>
			configASSERT( xResult );
1a001c9e:	2800      	cmp	r0, #0
1a001ca0:	d1e8      	bne.n	1a001c74 <prvProcessExpiredTimer+0x1c>
1a001ca2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ca6:	f383 8811 	msr	BASEPRI, r3
1a001caa:	f3bf 8f6f 	isb	sy
1a001cae:	f3bf 8f4f 	dsb	sy
1a001cb2:	e7fe      	b.n	1a001cb2 <prvProcessExpiredTimer+0x5a>
1a001cb4:	100029b0 	.word	0x100029b0

1a001cb8 <prvProcessTimerOrBlockTask>:
{
1a001cb8:	b570      	push	{r4, r5, r6, lr}
1a001cba:	b082      	sub	sp, #8
1a001cbc:	4606      	mov	r6, r0
1a001cbe:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001cc0:	f7ff fbd2 	bl	1a001468 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001cc4:	a801      	add	r0, sp, #4
1a001cc6:	f7ff ffb1 	bl	1a001c2c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001cca:	9b01      	ldr	r3, [sp, #4]
1a001ccc:	bb1b      	cbnz	r3, 1a001d16 <prvProcessTimerOrBlockTask+0x5e>
1a001cce:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001cd0:	b90c      	cbnz	r4, 1a001cd6 <prvProcessTimerOrBlockTask+0x1e>
1a001cd2:	42b0      	cmp	r0, r6
1a001cd4:	d218      	bcs.n	1a001d08 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001cd6:	b12c      	cbz	r4, 1a001ce4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001cd8:	4b11      	ldr	r3, [pc, #68]	; (1a001d20 <prvProcessTimerOrBlockTask+0x68>)
1a001cda:	681b      	ldr	r3, [r3, #0]
1a001cdc:	681c      	ldr	r4, [r3, #0]
1a001cde:	fab4 f484 	clz	r4, r4
1a001ce2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001ce4:	4622      	mov	r2, r4
1a001ce6:	1b71      	subs	r1, r6, r5
1a001ce8:	4b0e      	ldr	r3, [pc, #56]	; (1a001d24 <prvProcessTimerOrBlockTask+0x6c>)
1a001cea:	6818      	ldr	r0, [r3, #0]
1a001cec:	f7ff f8be 	bl	1a000e6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001cf0:	f7ff fc54 	bl	1a00159c <xTaskResumeAll>
1a001cf4:	b988      	cbnz	r0, 1a001d1a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001cf6:	4b0c      	ldr	r3, [pc, #48]	; (1a001d28 <prvProcessTimerOrBlockTask+0x70>)
1a001cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cfc:	601a      	str	r2, [r3, #0]
1a001cfe:	f3bf 8f4f 	dsb	sy
1a001d02:	f3bf 8f6f 	isb	sy
1a001d06:	e008      	b.n	1a001d1a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001d08:	f7ff fc48 	bl	1a00159c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001d0c:	4629      	mov	r1, r5
1a001d0e:	4630      	mov	r0, r6
1a001d10:	f7ff ffa2 	bl	1a001c58 <prvProcessExpiredTimer>
1a001d14:	e001      	b.n	1a001d1a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001d16:	f7ff fc41 	bl	1a00159c <xTaskResumeAll>
}
1a001d1a:	b002      	add	sp, #8
1a001d1c:	bd70      	pop	{r4, r5, r6, pc}
1a001d1e:	bf00      	nop
1a001d20:	100029b4 	.word	0x100029b4
1a001d24:	10002ad4 	.word	0x10002ad4
1a001d28:	e000ed04 	.word	0xe000ed04

1a001d2c <prvProcessReceivedCommands>:
{
1a001d2c:	b530      	push	{r4, r5, lr}
1a001d2e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d30:	e002      	b.n	1a001d38 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001d32:	9b04      	ldr	r3, [sp, #16]
1a001d34:	2b00      	cmp	r3, #0
1a001d36:	da0f      	bge.n	1a001d58 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d38:	2200      	movs	r2, #0
1a001d3a:	a904      	add	r1, sp, #16
1a001d3c:	4b39      	ldr	r3, [pc, #228]	; (1a001e24 <prvProcessReceivedCommands+0xf8>)
1a001d3e:	6818      	ldr	r0, [r3, #0]
1a001d40:	f7fe ffd4 	bl	1a000cec <xQueueReceive>
1a001d44:	2800      	cmp	r0, #0
1a001d46:	d06a      	beq.n	1a001e1e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001d48:	9b04      	ldr	r3, [sp, #16]
1a001d4a:	2b00      	cmp	r3, #0
1a001d4c:	daf1      	bge.n	1a001d32 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001d4e:	9907      	ldr	r1, [sp, #28]
1a001d50:	9806      	ldr	r0, [sp, #24]
1a001d52:	9b05      	ldr	r3, [sp, #20]
1a001d54:	4798      	blx	r3
1a001d56:	e7ec      	b.n	1a001d32 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001d58:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001d5a:	6963      	ldr	r3, [r4, #20]
1a001d5c:	b113      	cbz	r3, 1a001d64 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d5e:	1d20      	adds	r0, r4, #4
1a001d60:	f7ff f8e1 	bl	1a000f26 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001d64:	a803      	add	r0, sp, #12
1a001d66:	f7ff ff61 	bl	1a001c2c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001d6a:	9b04      	ldr	r3, [sp, #16]
1a001d6c:	2b09      	cmp	r3, #9
1a001d6e:	d8e3      	bhi.n	1a001d38 <prvProcessReceivedCommands+0xc>
1a001d70:	a201      	add	r2, pc, #4	; (adr r2, 1a001d78 <prvProcessReceivedCommands+0x4c>)
1a001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001d76:	bf00      	nop
1a001d78:	1a001da1 	.word	0x1a001da1
1a001d7c:	1a001da1 	.word	0x1a001da1
1a001d80:	1a001da1 	.word	0x1a001da1
1a001d84:	1a001d39 	.word	0x1a001d39
1a001d88:	1a001de9 	.word	0x1a001de9
1a001d8c:	1a001e0f 	.word	0x1a001e0f
1a001d90:	1a001da1 	.word	0x1a001da1
1a001d94:	1a001da1 	.word	0x1a001da1
1a001d98:	1a001d39 	.word	0x1a001d39
1a001d9c:	1a001de9 	.word	0x1a001de9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001da0:	9905      	ldr	r1, [sp, #20]
1a001da2:	69a5      	ldr	r5, [r4, #24]
1a001da4:	460b      	mov	r3, r1
1a001da6:	4602      	mov	r2, r0
1a001da8:	4429      	add	r1, r5
1a001daa:	4620      	mov	r0, r4
1a001dac:	f7ff fe3e 	bl	1a001a2c <prvInsertTimerInActiveList>
1a001db0:	2800      	cmp	r0, #0
1a001db2:	d0c1      	beq.n	1a001d38 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001db6:	4620      	mov	r0, r4
1a001db8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001dba:	69e3      	ldr	r3, [r4, #28]
1a001dbc:	2b01      	cmp	r3, #1
1a001dbe:	d1bb      	bne.n	1a001d38 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001dc0:	69a2      	ldr	r2, [r4, #24]
1a001dc2:	2100      	movs	r1, #0
1a001dc4:	9100      	str	r1, [sp, #0]
1a001dc6:	460b      	mov	r3, r1
1a001dc8:	9805      	ldr	r0, [sp, #20]
1a001dca:	4402      	add	r2, r0
1a001dcc:	4620      	mov	r0, r4
1a001dce:	f7ff febb 	bl	1a001b48 <xTimerGenericCommand>
							configASSERT( xResult );
1a001dd2:	2800      	cmp	r0, #0
1a001dd4:	d1b0      	bne.n	1a001d38 <prvProcessReceivedCommands+0xc>
1a001dd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dda:	f383 8811 	msr	BASEPRI, r3
1a001dde:	f3bf 8f6f 	isb	sy
1a001de2:	f3bf 8f4f 	dsb	sy
1a001de6:	e7fe      	b.n	1a001de6 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001de8:	9905      	ldr	r1, [sp, #20]
1a001dea:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001dec:	b131      	cbz	r1, 1a001dfc <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001dee:	4603      	mov	r3, r0
1a001df0:	4602      	mov	r2, r0
1a001df2:	4401      	add	r1, r0
1a001df4:	4620      	mov	r0, r4
1a001df6:	f7ff fe19 	bl	1a001a2c <prvInsertTimerInActiveList>
					break;
1a001dfa:	e79d      	b.n	1a001d38 <prvProcessReceivedCommands+0xc>
1a001dfc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e00:	f383 8811 	msr	BASEPRI, r3
1a001e04:	f3bf 8f6f 	isb	sy
1a001e08:	f3bf 8f4f 	dsb	sy
1a001e0c:	e7fe      	b.n	1a001e0c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001e0e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001e12:	2b00      	cmp	r3, #0
1a001e14:	d190      	bne.n	1a001d38 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001e16:	4620      	mov	r0, r4
1a001e18:	f7fe fcaa 	bl	1a000770 <vPortFree>
1a001e1c:	e78c      	b.n	1a001d38 <prvProcessReceivedCommands+0xc>
}
1a001e1e:	b009      	add	sp, #36	; 0x24
1a001e20:	bd30      	pop	{r4, r5, pc}
1a001e22:	bf00      	nop
1a001e24:	10002ad4 	.word	0x10002ad4

1a001e28 <prvTimerTask>:
{
1a001e28:	b500      	push	{lr}
1a001e2a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001e2c:	a801      	add	r0, sp, #4
1a001e2e:	f7ff fded 	bl	1a001a0c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001e32:	9901      	ldr	r1, [sp, #4]
1a001e34:	f7ff ff40 	bl	1a001cb8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001e38:	f7ff ff78 	bl	1a001d2c <prvProcessReceivedCommands>
1a001e3c:	e7f6      	b.n	1a001e2c <prvTimerTask+0x4>
1a001e3e:	Address 0x000000001a001e3e is out of bounds.


1a001e40 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001e40:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001e42:	2300      	movs	r3, #0
1a001e44:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001e46:	4b0d      	ldr	r3, [pc, #52]	; (1a001e7c <prvTaskExitError+0x3c>)
1a001e48:	681b      	ldr	r3, [r3, #0]
1a001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001e4e:	d008      	beq.n	1a001e62 <prvTaskExitError+0x22>
1a001e50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e54:	f383 8811 	msr	BASEPRI, r3
1a001e58:	f3bf 8f6f 	isb	sy
1a001e5c:	f3bf 8f4f 	dsb	sy
1a001e60:	e7fe      	b.n	1a001e60 <prvTaskExitError+0x20>
1a001e62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e66:	f383 8811 	msr	BASEPRI, r3
1a001e6a:	f3bf 8f6f 	isb	sy
1a001e6e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001e72:	9b01      	ldr	r3, [sp, #4]
1a001e74:	2b00      	cmp	r3, #0
1a001e76:	d0fc      	beq.n	1a001e72 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001e78:	b002      	add	sp, #8
1a001e7a:	4770      	bx	lr
1a001e7c:	10000000 	.word	0x10000000

1a001e80 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001e80:	4808      	ldr	r0, [pc, #32]	; (1a001ea4 <prvPortStartFirstTask+0x24>)
1a001e82:	6800      	ldr	r0, [r0, #0]
1a001e84:	6800      	ldr	r0, [r0, #0]
1a001e86:	f380 8808 	msr	MSP, r0
1a001e8a:	f04f 0000 	mov.w	r0, #0
1a001e8e:	f380 8814 	msr	CONTROL, r0
1a001e92:	b662      	cpsie	i
1a001e94:	b661      	cpsie	f
1a001e96:	f3bf 8f4f 	dsb	sy
1a001e9a:	f3bf 8f6f 	isb	sy
1a001e9e:	df00      	svc	0
1a001ea0:	bf00      	nop
1a001ea2:	0000      	.short	0x0000
1a001ea4:	e000ed08 	.word	0xe000ed08

1a001ea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001ea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001eb8 <vPortEnableVFP+0x10>
1a001eac:	6801      	ldr	r1, [r0, #0]
1a001eae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001eb2:	6001      	str	r1, [r0, #0]
1a001eb4:	4770      	bx	lr
1a001eb6:	0000      	.short	0x0000
1a001eb8:	e000ed88 	.word	0xe000ed88

1a001ebc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001ec0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001ec4:	f021 0101 	bic.w	r1, r1, #1
1a001ec8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001ecc:	4b05      	ldr	r3, [pc, #20]	; (1a001ee4 <pxPortInitialiseStack+0x28>)
1a001ece:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001ed2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001ed6:	f06f 0302 	mvn.w	r3, #2
1a001eda:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001ede:	3844      	subs	r0, #68	; 0x44
1a001ee0:	4770      	bx	lr
1a001ee2:	bf00      	nop
1a001ee4:	1a001e41 	.word	0x1a001e41
1a001ee8:	ffffffff 	.word	0xffffffff
1a001eec:	ffffffff 	.word	0xffffffff

1a001ef0 <SVC_Handler>:
	__asm volatile (
1a001ef0:	4b07      	ldr	r3, [pc, #28]	; (1a001f10 <pxCurrentTCBConst2>)
1a001ef2:	6819      	ldr	r1, [r3, #0]
1a001ef4:	6808      	ldr	r0, [r1, #0]
1a001ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001efa:	f380 8809 	msr	PSP, r0
1a001efe:	f3bf 8f6f 	isb	sy
1a001f02:	f04f 0000 	mov.w	r0, #0
1a001f06:	f380 8811 	msr	BASEPRI, r0
1a001f0a:	4770      	bx	lr
1a001f0c:	f3af 8000 	nop.w

1a001f10 <pxCurrentTCBConst2>:
1a001f10:	10002888 	.word	0x10002888

1a001f14 <vPortEnterCritical>:
1a001f14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f18:	f383 8811 	msr	BASEPRI, r3
1a001f1c:	f3bf 8f6f 	isb	sy
1a001f20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001f24:	4a0a      	ldr	r2, [pc, #40]	; (1a001f50 <vPortEnterCritical+0x3c>)
1a001f26:	6813      	ldr	r3, [r2, #0]
1a001f28:	3301      	adds	r3, #1
1a001f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001f2c:	2b01      	cmp	r3, #1
1a001f2e:	d000      	beq.n	1a001f32 <vPortEnterCritical+0x1e>
}
1a001f30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001f32:	4b08      	ldr	r3, [pc, #32]	; (1a001f54 <vPortEnterCritical+0x40>)
1a001f34:	681b      	ldr	r3, [r3, #0]
1a001f36:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001f3a:	d0f9      	beq.n	1a001f30 <vPortEnterCritical+0x1c>
1a001f3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f40:	f383 8811 	msr	BASEPRI, r3
1a001f44:	f3bf 8f6f 	isb	sy
1a001f48:	f3bf 8f4f 	dsb	sy
1a001f4c:	e7fe      	b.n	1a001f4c <vPortEnterCritical+0x38>
1a001f4e:	bf00      	nop
1a001f50:	10000000 	.word	0x10000000
1a001f54:	e000ed04 	.word	0xe000ed04

1a001f58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001f58:	4b09      	ldr	r3, [pc, #36]	; (1a001f80 <vPortExitCritical+0x28>)
1a001f5a:	681b      	ldr	r3, [r3, #0]
1a001f5c:	b943      	cbnz	r3, 1a001f70 <vPortExitCritical+0x18>
1a001f5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f62:	f383 8811 	msr	BASEPRI, r3
1a001f66:	f3bf 8f6f 	isb	sy
1a001f6a:	f3bf 8f4f 	dsb	sy
1a001f6e:	e7fe      	b.n	1a001f6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001f70:	3b01      	subs	r3, #1
1a001f72:	4a03      	ldr	r2, [pc, #12]	; (1a001f80 <vPortExitCritical+0x28>)
1a001f74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001f76:	b90b      	cbnz	r3, 1a001f7c <vPortExitCritical+0x24>
	__asm volatile
1a001f78:	f383 8811 	msr	BASEPRI, r3
}
1a001f7c:	4770      	bx	lr
1a001f7e:	bf00      	nop
1a001f80:	10000000 	.word	0x10000000
1a001f84:	ffffffff 	.word	0xffffffff
1a001f88:	ffffffff 	.word	0xffffffff
1a001f8c:	ffffffff 	.word	0xffffffff

1a001f90 <PendSV_Handler>:
	__asm volatile
1a001f90:	f3ef 8009 	mrs	r0, PSP
1a001f94:	f3bf 8f6f 	isb	sy
1a001f98:	4b15      	ldr	r3, [pc, #84]	; (1a001ff0 <pxCurrentTCBConst>)
1a001f9a:	681a      	ldr	r2, [r3, #0]
1a001f9c:	f01e 0f10 	tst.w	lr, #16
1a001fa0:	bf08      	it	eq
1a001fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001faa:	6010      	str	r0, [r2, #0]
1a001fac:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001fb0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001fb4:	f380 8811 	msr	BASEPRI, r0
1a001fb8:	f3bf 8f4f 	dsb	sy
1a001fbc:	f3bf 8f6f 	isb	sy
1a001fc0:	f7ff fb8c 	bl	1a0016dc <vTaskSwitchContext>
1a001fc4:	f04f 0000 	mov.w	r0, #0
1a001fc8:	f380 8811 	msr	BASEPRI, r0
1a001fcc:	bc09      	pop	{r0, r3}
1a001fce:	6819      	ldr	r1, [r3, #0]
1a001fd0:	6808      	ldr	r0, [r1, #0]
1a001fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001fd6:	f01e 0f10 	tst.w	lr, #16
1a001fda:	bf08      	it	eq
1a001fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001fe0:	f380 8809 	msr	PSP, r0
1a001fe4:	f3bf 8f6f 	isb	sy
1a001fe8:	4770      	bx	lr
1a001fea:	bf00      	nop
1a001fec:	f3af 8000 	nop.w

1a001ff0 <pxCurrentTCBConst>:
1a001ff0:	10002888 	.word	0x10002888

1a001ff4 <SysTick_Handler>:
{
1a001ff4:	b508      	push	{r3, lr}
	__asm volatile
1a001ff6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ffa:	f383 8811 	msr	BASEPRI, r3
1a001ffe:	f3bf 8f6f 	isb	sy
1a002002:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002006:	f7ff fa3d 	bl	1a001484 <xTaskIncrementTick>
1a00200a:	b118      	cbz	r0, 1a002014 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00200c:	4b03      	ldr	r3, [pc, #12]	; (1a00201c <SysTick_Handler+0x28>)
1a00200e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002012:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002014:	2300      	movs	r3, #0
1a002016:	f383 8811 	msr	BASEPRI, r3
}
1a00201a:	bd08      	pop	{r3, pc}
1a00201c:	e000ed04 	.word	0xe000ed04

1a002020 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002020:	4a08      	ldr	r2, [pc, #32]	; (1a002044 <vPortSetupTimerInterrupt+0x24>)
1a002022:	2300      	movs	r3, #0
1a002024:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002026:	4908      	ldr	r1, [pc, #32]	; (1a002048 <vPortSetupTimerInterrupt+0x28>)
1a002028:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00202a:	4b08      	ldr	r3, [pc, #32]	; (1a00204c <vPortSetupTimerInterrupt+0x2c>)
1a00202c:	681b      	ldr	r3, [r3, #0]
1a00202e:	4908      	ldr	r1, [pc, #32]	; (1a002050 <vPortSetupTimerInterrupt+0x30>)
1a002030:	fba1 1303 	umull	r1, r3, r1, r3
1a002034:	099b      	lsrs	r3, r3, #6
1a002036:	3b01      	subs	r3, #1
1a002038:	4906      	ldr	r1, [pc, #24]	; (1a002054 <vPortSetupTimerInterrupt+0x34>)
1a00203a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00203c:	2307      	movs	r3, #7
1a00203e:	6013      	str	r3, [r2, #0]
}
1a002040:	4770      	bx	lr
1a002042:	bf00      	nop
1a002044:	e000e010 	.word	0xe000e010
1a002048:	e000e018 	.word	0xe000e018
1a00204c:	10002b5c 	.word	0x10002b5c
1a002050:	10624dd3 	.word	0x10624dd3
1a002054:	e000e014 	.word	0xe000e014

1a002058 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002058:	4b3a      	ldr	r3, [pc, #232]	; (1a002144 <xPortStartScheduler+0xec>)
1a00205a:	681a      	ldr	r2, [r3, #0]
1a00205c:	4b3a      	ldr	r3, [pc, #232]	; (1a002148 <xPortStartScheduler+0xf0>)
1a00205e:	429a      	cmp	r2, r3
1a002060:	d00d      	beq.n	1a00207e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002062:	4b38      	ldr	r3, [pc, #224]	; (1a002144 <xPortStartScheduler+0xec>)
1a002064:	681a      	ldr	r2, [r3, #0]
1a002066:	4b39      	ldr	r3, [pc, #228]	; (1a00214c <xPortStartScheduler+0xf4>)
1a002068:	429a      	cmp	r2, r3
1a00206a:	d111      	bne.n	1a002090 <xPortStartScheduler+0x38>
	__asm volatile
1a00206c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002070:	f383 8811 	msr	BASEPRI, r3
1a002074:	f3bf 8f6f 	isb	sy
1a002078:	f3bf 8f4f 	dsb	sy
1a00207c:	e7fe      	b.n	1a00207c <xPortStartScheduler+0x24>
1a00207e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002082:	f383 8811 	msr	BASEPRI, r3
1a002086:	f3bf 8f6f 	isb	sy
1a00208a:	f3bf 8f4f 	dsb	sy
1a00208e:	e7fe      	b.n	1a00208e <xPortStartScheduler+0x36>
{
1a002090:	b510      	push	{r4, lr}
1a002092:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002094:	4b2e      	ldr	r3, [pc, #184]	; (1a002150 <xPortStartScheduler+0xf8>)
1a002096:	781a      	ldrb	r2, [r3, #0]
1a002098:	b2d2      	uxtb	r2, r2
1a00209a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00209c:	22ff      	movs	r2, #255	; 0xff
1a00209e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0020a0:	781b      	ldrb	r3, [r3, #0]
1a0020a2:	b2db      	uxtb	r3, r3
1a0020a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0020a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0020b0:	4a28      	ldr	r2, [pc, #160]	; (1a002154 <xPortStartScheduler+0xfc>)
1a0020b2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0020b4:	4b28      	ldr	r3, [pc, #160]	; (1a002158 <xPortStartScheduler+0x100>)
1a0020b6:	2207      	movs	r2, #7
1a0020b8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0020ba:	e009      	b.n	1a0020d0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0020bc:	4a26      	ldr	r2, [pc, #152]	; (1a002158 <xPortStartScheduler+0x100>)
1a0020be:	6813      	ldr	r3, [r2, #0]
1a0020c0:	3b01      	subs	r3, #1
1a0020c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0020c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020c8:	005b      	lsls	r3, r3, #1
1a0020ca:	b2db      	uxtb	r3, r3
1a0020cc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0020d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020d4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020d8:	d1f0      	bne.n	1a0020bc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0020da:	4b1f      	ldr	r3, [pc, #124]	; (1a002158 <xPortStartScheduler+0x100>)
1a0020dc:	681b      	ldr	r3, [r3, #0]
1a0020de:	2b04      	cmp	r3, #4
1a0020e0:	d008      	beq.n	1a0020f4 <xPortStartScheduler+0x9c>
1a0020e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020e6:	f383 8811 	msr	BASEPRI, r3
1a0020ea:	f3bf 8f6f 	isb	sy
1a0020ee:	f3bf 8f4f 	dsb	sy
1a0020f2:	e7fe      	b.n	1a0020f2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0020f4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0020f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0020fa:	4a17      	ldr	r2, [pc, #92]	; (1a002158 <xPortStartScheduler+0x100>)
1a0020fc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0020fe:	9b01      	ldr	r3, [sp, #4]
1a002100:	b2db      	uxtb	r3, r3
1a002102:	4a13      	ldr	r2, [pc, #76]	; (1a002150 <xPortStartScheduler+0xf8>)
1a002104:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002106:	4b15      	ldr	r3, [pc, #84]	; (1a00215c <xPortStartScheduler+0x104>)
1a002108:	681a      	ldr	r2, [r3, #0]
1a00210a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00210e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002110:	681a      	ldr	r2, [r3, #0]
1a002112:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002116:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002118:	f7ff ff82 	bl	1a002020 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00211c:	2400      	movs	r4, #0
1a00211e:	4b10      	ldr	r3, [pc, #64]	; (1a002160 <xPortStartScheduler+0x108>)
1a002120:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002122:	f7ff fec1 	bl	1a001ea8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002126:	4a0f      	ldr	r2, [pc, #60]	; (1a002164 <xPortStartScheduler+0x10c>)
1a002128:	6813      	ldr	r3, [r2, #0]
1a00212a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00212e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002130:	f7ff fea6 	bl	1a001e80 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002134:	f7ff fad2 	bl	1a0016dc <vTaskSwitchContext>
	prvTaskExitError();
1a002138:	f7ff fe82 	bl	1a001e40 <prvTaskExitError>
}
1a00213c:	4620      	mov	r0, r4
1a00213e:	b002      	add	sp, #8
1a002140:	bd10      	pop	{r4, pc}
1a002142:	bf00      	nop
1a002144:	e000ed00 	.word	0xe000ed00
1a002148:	410fc271 	.word	0x410fc271
1a00214c:	410fc270 	.word	0x410fc270
1a002150:	e000e400 	.word	0xe000e400
1a002154:	10002adc 	.word	0x10002adc
1a002158:	10002ae0 	.word	0x10002ae0
1a00215c:	e000ed20 	.word	0xe000ed20
1a002160:	10000000 	.word	0x10000000
1a002164:	e000ef34 	.word	0xe000ef34

1a002168 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002168:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00216c:	2b0f      	cmp	r3, #15
1a00216e:	d90f      	bls.n	1a002190 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002170:	4a10      	ldr	r2, [pc, #64]	; (1a0021b4 <vPortValidateInterruptPriority+0x4c>)
1a002172:	5c9b      	ldrb	r3, [r3, r2]
1a002174:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002176:	4a10      	ldr	r2, [pc, #64]	; (1a0021b8 <vPortValidateInterruptPriority+0x50>)
1a002178:	7812      	ldrb	r2, [r2, #0]
1a00217a:	429a      	cmp	r2, r3
1a00217c:	d908      	bls.n	1a002190 <vPortValidateInterruptPriority+0x28>
1a00217e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002182:	f383 8811 	msr	BASEPRI, r3
1a002186:	f3bf 8f6f 	isb	sy
1a00218a:	f3bf 8f4f 	dsb	sy
1a00218e:	e7fe      	b.n	1a00218e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002190:	4b0a      	ldr	r3, [pc, #40]	; (1a0021bc <vPortValidateInterruptPriority+0x54>)
1a002192:	681b      	ldr	r3, [r3, #0]
1a002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002198:	4a09      	ldr	r2, [pc, #36]	; (1a0021c0 <vPortValidateInterruptPriority+0x58>)
1a00219a:	6812      	ldr	r2, [r2, #0]
1a00219c:	4293      	cmp	r3, r2
1a00219e:	d908      	bls.n	1a0021b2 <vPortValidateInterruptPriority+0x4a>
1a0021a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021a4:	f383 8811 	msr	BASEPRI, r3
1a0021a8:	f3bf 8f6f 	isb	sy
1a0021ac:	f3bf 8f4f 	dsb	sy
1a0021b0:	e7fe      	b.n	1a0021b0 <vPortValidateInterruptPriority+0x48>
	}
1a0021b2:	4770      	bx	lr
1a0021b4:	e000e3f0 	.word	0xe000e3f0
1a0021b8:	10002adc 	.word	0x10002adc
1a0021bc:	e000ed0c 	.word	0xe000ed0c
1a0021c0:	10002ae0 	.word	0x10002ae0

1a0021c4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0021c4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0021c6:	4b05      	ldr	r3, [pc, #20]	; (1a0021dc <DAC_IRQHandler+0x18>)
1a0021c8:	2201      	movs	r2, #1
1a0021ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0021ce:	4b04      	ldr	r3, [pc, #16]	; (1a0021e0 <DAC_IRQHandler+0x1c>)
1a0021d0:	681b      	ldr	r3, [r3, #0]
1a0021d2:	b113      	cbz	r3, 1a0021da <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0021d4:	4b02      	ldr	r3, [pc, #8]	; (1a0021e0 <DAC_IRQHandler+0x1c>)
1a0021d6:	681b      	ldr	r3, [r3, #0]
1a0021d8:	4798      	blx	r3
   }
}
1a0021da:	bd08      	pop	{r3, pc}
1a0021dc:	e000e100 	.word	0xe000e100
1a0021e0:	10002ae4 	.word	0x10002ae4

1a0021e4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0021e4:	2200      	movs	r2, #0
1a0021e6:	2a05      	cmp	r2, #5
1a0021e8:	d819      	bhi.n	1a00221e <Board_LED_Init+0x3a>
{
1a0021ea:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0021ec:	490c      	ldr	r1, [pc, #48]	; (1a002220 <Board_LED_Init+0x3c>)
1a0021ee:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0021f2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0021f6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0021f8:	4b0a      	ldr	r3, [pc, #40]	; (1a002224 <Board_LED_Init+0x40>)
1a0021fa:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0021fe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002202:	2001      	movs	r0, #1
1a002204:	40a0      	lsls	r0, r4
1a002206:	4301      	orrs	r1, r0
1a002208:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00220c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002210:	2100      	movs	r1, #0
1a002212:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002214:	3201      	adds	r2, #1
1a002216:	2a05      	cmp	r2, #5
1a002218:	d9e8      	bls.n	1a0021ec <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00221a:	bc70      	pop	{r4, r5, r6}
1a00221c:	4770      	bx	lr
1a00221e:	4770      	bx	lr
1a002220:	1a004810 	.word	0x1a004810
1a002224:	400f4000 	.word	0x400f4000

1a002228 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002228:	2300      	movs	r3, #0
1a00222a:	2b03      	cmp	r3, #3
1a00222c:	d816      	bhi.n	1a00225c <Board_TEC_Init+0x34>
{
1a00222e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002230:	490b      	ldr	r1, [pc, #44]	; (1a002260 <Board_TEC_Init+0x38>)
1a002232:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002236:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00223a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00223c:	4c09      	ldr	r4, [pc, #36]	; (1a002264 <Board_TEC_Init+0x3c>)
1a00223e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002242:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002246:	2001      	movs	r0, #1
1a002248:	40a8      	lsls	r0, r5
1a00224a:	ea21 0100 	bic.w	r1, r1, r0
1a00224e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002252:	3301      	adds	r3, #1
1a002254:	2b03      	cmp	r3, #3
1a002256:	d9eb      	bls.n	1a002230 <Board_TEC_Init+0x8>
   }
}
1a002258:	bc30      	pop	{r4, r5}
1a00225a:	4770      	bx	lr
1a00225c:	4770      	bx	lr
1a00225e:	bf00      	nop
1a002260:	1a004808 	.word	0x1a004808
1a002264:	400f4000 	.word	0x400f4000

1a002268 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002268:	2300      	movs	r3, #0
1a00226a:	2b08      	cmp	r3, #8
1a00226c:	d816      	bhi.n	1a00229c <Board_GPIO_Init+0x34>
{
1a00226e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002270:	490b      	ldr	r1, [pc, #44]	; (1a0022a0 <Board_GPIO_Init+0x38>)
1a002272:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002276:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00227a:	784d      	ldrb	r5, [r1, #1]
1a00227c:	4c09      	ldr	r4, [pc, #36]	; (1a0022a4 <Board_GPIO_Init+0x3c>)
1a00227e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002282:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002286:	2001      	movs	r0, #1
1a002288:	40a8      	lsls	r0, r5
1a00228a:	ea21 0100 	bic.w	r1, r1, r0
1a00228e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002292:	3301      	adds	r3, #1
1a002294:	2b08      	cmp	r3, #8
1a002296:	d9eb      	bls.n	1a002270 <Board_GPIO_Init+0x8>
   }
}
1a002298:	bc30      	pop	{r4, r5}
1a00229a:	4770      	bx	lr
1a00229c:	4770      	bx	lr
1a00229e:	bf00      	nop
1a0022a0:	1a00481c 	.word	0x1a00481c
1a0022a4:	400f4000 	.word	0x400f4000

1a0022a8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0022a8:	b510      	push	{r4, lr}
1a0022aa:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0022ac:	4c08      	ldr	r4, [pc, #32]	; (1a0022d0 <Board_ADC_Init+0x28>)
1a0022ae:	4669      	mov	r1, sp
1a0022b0:	4620      	mov	r0, r4
1a0022b2:	f000 f9df 	bl	1a002674 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0022b6:	4a07      	ldr	r2, [pc, #28]	; (1a0022d4 <Board_ADC_Init+0x2c>)
1a0022b8:	4669      	mov	r1, sp
1a0022ba:	4620      	mov	r0, r4
1a0022bc:	f000 f9fa 	bl	1a0026b4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0022c0:	2200      	movs	r2, #0
1a0022c2:	4669      	mov	r1, sp
1a0022c4:	4620      	mov	r0, r4
1a0022c6:	f000 fa0e 	bl	1a0026e6 <Chip_ADC_SetResolution>
}
1a0022ca:	b002      	add	sp, #8
1a0022cc:	bd10      	pop	{r4, pc}
1a0022ce:	bf00      	nop
1a0022d0:	400e3000 	.word	0x400e3000
1a0022d4:	00061a80 	.word	0x00061a80

1a0022d8 <Board_SPI_Init>:
{
1a0022d8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0022da:	4c0b      	ldr	r4, [pc, #44]	; (1a002308 <Board_SPI_Init+0x30>)
1a0022dc:	4620      	mov	r0, r4
1a0022de:	f000 fe03 	bl	1a002ee8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0022e2:	6863      	ldr	r3, [r4, #4]
1a0022e4:	f023 0304 	bic.w	r3, r3, #4
1a0022e8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0022ea:	6823      	ldr	r3, [r4, #0]
1a0022ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0022f0:	f043 0307 	orr.w	r3, r3, #7
1a0022f4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0022f6:	4905      	ldr	r1, [pc, #20]	; (1a00230c <Board_SPI_Init+0x34>)
1a0022f8:	4620      	mov	r0, r4
1a0022fa:	f000 fdd6 	bl	1a002eaa <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0022fe:	6863      	ldr	r3, [r4, #4]
1a002300:	f043 0302 	orr.w	r3, r3, #2
1a002304:	6063      	str	r3, [r4, #4]
}
1a002306:	bd10      	pop	{r4, pc}
1a002308:	400c5000 	.word	0x400c5000
1a00230c:	000186a0 	.word	0x000186a0

1a002310 <Board_I2C_Init>:
{
1a002310:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002312:	2000      	movs	r0, #0
1a002314:	f000 fd7c 	bl	1a002e10 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002318:	4b04      	ldr	r3, [pc, #16]	; (1a00232c <Board_I2C_Init+0x1c>)
1a00231a:	f640 0208 	movw	r2, #2056	; 0x808
1a00231e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002322:	4903      	ldr	r1, [pc, #12]	; (1a002330 <Board_I2C_Init+0x20>)
1a002324:	2000      	movs	r0, #0
1a002326:	f000 fd85 	bl	1a002e34 <Chip_I2C_SetClockRate>
}
1a00232a:	bd08      	pop	{r3, pc}
1a00232c:	40086000 	.word	0x40086000
1a002330:	000f4240 	.word	0x000f4240

1a002334 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002334:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002336:	4c07      	ldr	r4, [pc, #28]	; (1a002354 <Board_Debug_Init+0x20>)
1a002338:	4620      	mov	r0, r4
1a00233a:	f000 f8b9 	bl	1a0024b0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00233e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002342:	4620      	mov	r0, r4
1a002344:	f000 f8fe 	bl	1a002544 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002348:	2303      	movs	r3, #3
1a00234a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00234c:	2301      	movs	r3, #1
1a00234e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002350:	bd10      	pop	{r4, pc}
1a002352:	bf00      	nop
1a002354:	400c1000 	.word	0x400c1000

1a002358 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002358:	4b03      	ldr	r3, [pc, #12]	; (1a002368 <Board_UARTPutChar+0x10>)
1a00235a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00235c:	f013 0f20 	tst.w	r3, #32
1a002360:	d0fa      	beq.n	1a002358 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002362:	4b01      	ldr	r3, [pc, #4]	; (1a002368 <Board_UARTPutChar+0x10>)
1a002364:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002366:	4770      	bx	lr
1a002368:	400c1000 	.word	0x400c1000

1a00236c <Board_UARTGetChar>:
	return pUART->LSR;
1a00236c:	4b05      	ldr	r3, [pc, #20]	; (1a002384 <Board_UARTGetChar+0x18>)
1a00236e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002370:	f013 0f01 	tst.w	r3, #1
1a002374:	d003      	beq.n	1a00237e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002376:	4b03      	ldr	r3, [pc, #12]	; (1a002384 <Board_UARTGetChar+0x18>)
1a002378:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00237a:	b2c0      	uxtb	r0, r0
1a00237c:	4770      	bx	lr
   }
   return EOF;
1a00237e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002382:	4770      	bx	lr
1a002384:	400c1000 	.word	0x400c1000

1a002388 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002388:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00238a:	f7ff ffd3 	bl	1a002334 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00238e:	4809      	ldr	r0, [pc, #36]	; (1a0023b4 <Board_Init+0x2c>)
1a002390:	f000 fc82 	bl	1a002c98 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002394:	f7ff ff68 	bl	1a002268 <Board_GPIO_Init>
   Board_ADC_Init();
1a002398:	f7ff ff86 	bl	1a0022a8 <Board_ADC_Init>
   Board_SPI_Init();
1a00239c:	f7ff ff9c 	bl	1a0022d8 <Board_SPI_Init>
   Board_I2C_Init();
1a0023a0:	f7ff ffb6 	bl	1a002310 <Board_I2C_Init>

   Board_LED_Init();
1a0023a4:	f7ff ff1e 	bl	1a0021e4 <Board_LED_Init>
   Board_TEC_Init();
1a0023a8:	f7ff ff3e 	bl	1a002228 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0023ac:	f000 fc6a 	bl	1a002c84 <SystemCoreClockUpdate>
}
1a0023b0:	bd08      	pop	{r3, pc}
1a0023b2:	bf00      	nop
1a0023b4:	400f4000 	.word	0x400f4000

1a0023b8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0023b8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0023ba:	b2c0      	uxtb	r0, r0
1a0023bc:	f7ff ffcc 	bl	1a002358 <Board_UARTPutChar>
}
1a0023c0:	bd08      	pop	{r3, pc}

1a0023c2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0023c2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0023c4:	f7ff ffd2 	bl	1a00236c <Board_UARTGetChar>
}
1a0023c8:	bd08      	pop	{r3, pc}

1a0023ca <__stdio_init>:

void __stdio_init()
{
1a0023ca:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0023cc:	f7ff ffb2 	bl	1a002334 <Board_Debug_Init>
1a0023d0:	bd08      	pop	{r3, pc}
1a0023d2:	Address 0x000000001a0023d2 is out of bounds.


1a0023d4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0023d4:	2300      	movs	r3, #0
1a0023d6:	2b1c      	cmp	r3, #28
1a0023d8:	d812      	bhi.n	1a002400 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0023da:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0023dc:	4a09      	ldr	r2, [pc, #36]	; (1a002404 <Board_SetupMuxing+0x30>)
1a0023de:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0023e2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0023e6:	784a      	ldrb	r2, [r1, #1]
1a0023e8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0023ea:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0023ee:	4906      	ldr	r1, [pc, #24]	; (1a002408 <Board_SetupMuxing+0x34>)
1a0023f0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0023f4:	3301      	adds	r3, #1
1a0023f6:	2b1c      	cmp	r3, #28
1a0023f8:	d9f0      	bls.n	1a0023dc <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0023fa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0023fe:	4770      	bx	lr
1a002400:	4770      	bx	lr
1a002402:	bf00      	nop
1a002404:	1a004838 	.word	0x1a004838
1a002408:	40086000 	.word	0x40086000

1a00240c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00240c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00240e:	4a17      	ldr	r2, [pc, #92]	; (1a00246c <Board_SetupClocking+0x60>)
1a002410:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002418:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00241c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002420:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002428:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00242c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002430:	2201      	movs	r2, #1
1a002432:	490f      	ldr	r1, [pc, #60]	; (1a002470 <Board_SetupClocking+0x64>)
1a002434:	2006      	movs	r0, #6
1a002436:	f000 fc31 	bl	1a002c9c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00243a:	2400      	movs	r4, #0
1a00243c:	b14c      	cbz	r4, 1a002452 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00243e:	4b0b      	ldr	r3, [pc, #44]	; (1a00246c <Board_SetupClocking+0x60>)
1a002440:	685a      	ldr	r2, [r3, #4]
1a002442:	f022 020c 	bic.w	r2, r2, #12
1a002446:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002448:	685a      	ldr	r2, [r3, #4]
1a00244a:	f042 0203 	orr.w	r2, r2, #3
1a00244e:	605a      	str	r2, [r3, #4]
}
1a002450:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002452:	4808      	ldr	r0, [pc, #32]	; (1a002474 <Board_SetupClocking+0x68>)
1a002454:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002458:	2301      	movs	r3, #1
1a00245a:	788a      	ldrb	r2, [r1, #2]
1a00245c:	7849      	ldrb	r1, [r1, #1]
1a00245e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002462:	f000 fb6b 	bl	1a002b3c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002466:	3401      	adds	r4, #1
1a002468:	e7e8      	b.n	1a00243c <Board_SetupClocking+0x30>
1a00246a:	bf00      	nop
1a00246c:	40043000 	.word	0x40043000
1a002470:	0c28cb00 	.word	0x0c28cb00
1a002474:	1a004834 	.word	0x1a004834

1a002478 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002478:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00247a:	f7ff ffab 	bl	1a0023d4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00247e:	f7ff ffc5 	bl	1a00240c <Board_SetupClocking>
}
1a002482:	bd08      	pop	{r3, pc}

1a002484 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002484:	4b09      	ldr	r3, [pc, #36]	; (1a0024ac <Chip_UART_GetIndex+0x28>)
1a002486:	4298      	cmp	r0, r3
1a002488:	d009      	beq.n	1a00249e <Chip_UART_GetIndex+0x1a>
1a00248a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00248e:	4298      	cmp	r0, r3
1a002490:	d007      	beq.n	1a0024a2 <Chip_UART_GetIndex+0x1e>
1a002492:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002496:	4298      	cmp	r0, r3
1a002498:	d005      	beq.n	1a0024a6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00249a:	2000      	movs	r0, #0
1a00249c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00249e:	2002      	movs	r0, #2
1a0024a0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0024a2:	2003      	movs	r0, #3
1a0024a4:	4770      	bx	lr
			return 1;
1a0024a6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0024a8:	4770      	bx	lr
1a0024aa:	bf00      	nop
1a0024ac:	400c1000 	.word	0x400c1000

1a0024b0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0024b0:	b530      	push	{r4, r5, lr}
1a0024b2:	b083      	sub	sp, #12
1a0024b4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0024b6:	f7ff ffe5 	bl	1a002484 <Chip_UART_GetIndex>
1a0024ba:	2301      	movs	r3, #1
1a0024bc:	461a      	mov	r2, r3
1a0024be:	4619      	mov	r1, r3
1a0024c0:	4d0e      	ldr	r5, [pc, #56]	; (1a0024fc <Chip_UART_Init+0x4c>)
1a0024c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0024c6:	f000 fb7f 	bl	1a002bc8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0024ca:	2307      	movs	r3, #7
1a0024cc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0024ce:	2300      	movs	r3, #0
1a0024d0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0024d2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0024d4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0024d6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0024d8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0024da:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0024dc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0024de:	4b08      	ldr	r3, [pc, #32]	; (1a002500 <Chip_UART_Init+0x50>)
1a0024e0:	429c      	cmp	r4, r3
1a0024e2:	d006      	beq.n	1a0024f2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0024e4:	2303      	movs	r3, #3
1a0024e6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0024e8:	2310      	movs	r3, #16
1a0024ea:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0024ec:	9b01      	ldr	r3, [sp, #4]
}
1a0024ee:	b003      	add	sp, #12
1a0024f0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0024f2:	2300      	movs	r3, #0
1a0024f4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0024f6:	69a3      	ldr	r3, [r4, #24]
1a0024f8:	9301      	str	r3, [sp, #4]
1a0024fa:	e7f3      	b.n	1a0024e4 <Chip_UART_Init+0x34>
1a0024fc:	1a0048b4 	.word	0x1a0048b4
1a002500:	40082000 	.word	0x40082000

1a002504 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002504:	b538      	push	{r3, r4, r5, lr}
1a002506:	4605      	mov	r5, r0
1a002508:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00250a:	f7ff ffbb 	bl	1a002484 <Chip_UART_GetIndex>
1a00250e:	4b0c      	ldr	r3, [pc, #48]	; (1a002540 <Chip_UART_SetBaud+0x3c>)
1a002510:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002514:	f000 fb90 	bl	1a002c38 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002518:	0123      	lsls	r3, r4, #4
1a00251a:	fbb0 f3f3 	udiv	r3, r0, r3
1a00251e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002520:	68ea      	ldr	r2, [r5, #12]
1a002522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002526:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002528:	6029      	str	r1, [r5, #0]
1a00252a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00252e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002530:	68ea      	ldr	r2, [r5, #12]
1a002532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002536:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002538:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00253c:	0900      	lsrs	r0, r0, #4
1a00253e:	bd38      	pop	{r3, r4, r5, pc}
1a002540:	1a0048ac 	.word	0x1a0048ac

1a002544 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002548:	b083      	sub	sp, #12
1a00254a:	4683      	mov	fp, r0
1a00254c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00254e:	f7ff ff99 	bl	1a002484 <Chip_UART_GetIndex>
1a002552:	4b35      	ldr	r3, [pc, #212]	; (1a002628 <Chip_UART_SetBaudFDR+0xe4>)
1a002554:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002558:	f000 fb6e 	bl	1a002c38 <Chip_Clock_GetRate>
1a00255c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00255e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002562:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002564:	2300      	movs	r3, #0
1a002566:	9301      	str	r3, [sp, #4]
1a002568:	46a2      	mov	sl, r4
1a00256a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00256c:	e02a      	b.n	1a0025c4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00256e:	4242      	negs	r2, r0
				div ++;
1a002570:	1c4b      	adds	r3, r1, #1
1a002572:	e017      	b.n	1a0025a4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002574:	b30a      	cbz	r2, 1a0025ba <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002576:	4617      	mov	r7, r2
			sd = d;
1a002578:	9501      	str	r5, [sp, #4]
			sm = m;
1a00257a:	46a2      	mov	sl, r4
			sdiv = div;
1a00257c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00257e:	3501      	adds	r5, #1
1a002580:	42ac      	cmp	r4, r5
1a002582:	d91e      	bls.n	1a0025c2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002584:	0933      	lsrs	r3, r6, #4
1a002586:	0730      	lsls	r0, r6, #28
1a002588:	fba4 0100 	umull	r0, r1, r4, r0
1a00258c:	fb04 1103 	mla	r1, r4, r3, r1
1a002590:	1962      	adds	r2, r4, r5
1a002592:	fb08 f202 	mul.w	r2, r8, r2
1a002596:	2300      	movs	r3, #0
1a002598:	f000 ffb8 	bl	1a00350c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00259c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00259e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0025a0:	2800      	cmp	r0, #0
1a0025a2:	dbe4      	blt.n	1a00256e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0025a4:	4297      	cmp	r7, r2
1a0025a6:	d3ea      	bcc.n	1a00257e <Chip_UART_SetBaudFDR+0x3a>
1a0025a8:	2b00      	cmp	r3, #0
1a0025aa:	d0e8      	beq.n	1a00257e <Chip_UART_SetBaudFDR+0x3a>
1a0025ac:	0c19      	lsrs	r1, r3, #16
1a0025ae:	d1e6      	bne.n	1a00257e <Chip_UART_SetBaudFDR+0x3a>
1a0025b0:	2b02      	cmp	r3, #2
1a0025b2:	d8df      	bhi.n	1a002574 <Chip_UART_SetBaudFDR+0x30>
1a0025b4:	2d00      	cmp	r5, #0
1a0025b6:	d0dd      	beq.n	1a002574 <Chip_UART_SetBaudFDR+0x30>
1a0025b8:	e7e1      	b.n	1a00257e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0025ba:	4617      	mov	r7, r2
			sd = d;
1a0025bc:	9501      	str	r5, [sp, #4]
			sm = m;
1a0025be:	46a2      	mov	sl, r4
			sdiv = div;
1a0025c0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0025c2:	3401      	adds	r4, #1
1a0025c4:	b11f      	cbz	r7, 1a0025ce <Chip_UART_SetBaudFDR+0x8a>
1a0025c6:	2c0f      	cmp	r4, #15
1a0025c8:	d801      	bhi.n	1a0025ce <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0025ca:	2500      	movs	r5, #0
1a0025cc:	e7d8      	b.n	1a002580 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0025ce:	f1b9 0f00 	cmp.w	r9, #0
1a0025d2:	d024      	beq.n	1a00261e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0025d4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0025d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0025dc:	f8cb 300c 	str.w	r3, [fp, #12]
1a0025e0:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0025e4:	f8cb 3000 	str.w	r3, [fp]
1a0025e8:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0025ec:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0025f0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0025f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0025f8:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0025fc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002600:	b2db      	uxtb	r3, r3
1a002602:	9901      	ldr	r1, [sp, #4]
1a002604:	f001 020f 	and.w	r2, r1, #15
1a002608:	4313      	orrs	r3, r2
1a00260a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00260e:	0933      	lsrs	r3, r6, #4
1a002610:	fb0a f303 	mul.w	r3, sl, r3
1a002614:	448a      	add	sl, r1
1a002616:	fb09 f90a 	mul.w	r9, r9, sl
1a00261a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00261e:	4648      	mov	r0, r9
1a002620:	b003      	add	sp, #12
1a002622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002626:	bf00      	nop
1a002628:	1a0048ac 	.word	0x1a0048ac

1a00262c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00262c:	4b03      	ldr	r3, [pc, #12]	; (1a00263c <Chip_ADC_GetClockIndex+0x10>)
1a00262e:	4298      	cmp	r0, r3
1a002630:	d001      	beq.n	1a002636 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002632:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002634:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002636:	2004      	movs	r0, #4
1a002638:	4770      	bx	lr
1a00263a:	bf00      	nop
1a00263c:	400e4000 	.word	0x400e4000

1a002640 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002640:	b570      	push	{r4, r5, r6, lr}
1a002642:	460d      	mov	r5, r1
1a002644:	4614      	mov	r4, r2
1a002646:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002648:	f7ff fff0 	bl	1a00262c <Chip_ADC_GetClockIndex>
1a00264c:	f000 faf4 	bl	1a002c38 <Chip_Clock_GetRate>
	if (burstMode) {
1a002650:	b965      	cbnz	r5, 1a00266c <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002652:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002656:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00265a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00265e:	0064      	lsls	r4, r4, #1
1a002660:	fbb0 f0f4 	udiv	r0, r0, r4
1a002664:	b2c0      	uxtb	r0, r0
1a002666:	3801      	subs	r0, #1
	return div;
}
1a002668:	b2c0      	uxtb	r0, r0
1a00266a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a00266c:	fb04 f406 	mul.w	r4, r4, r6
1a002670:	e7f3      	b.n	1a00265a <getClkDiv+0x1a>
1a002672:	Address 0x000000001a002672 is out of bounds.


1a002674 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002674:	b538      	push	{r3, r4, r5, lr}
1a002676:	4605      	mov	r5, r0
1a002678:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00267a:	f7ff ffd7 	bl	1a00262c <Chip_ADC_GetClockIndex>
1a00267e:	2301      	movs	r3, #1
1a002680:	461a      	mov	r2, r3
1a002682:	4619      	mov	r1, r3
1a002684:	f000 faa0 	bl	1a002bc8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002688:	2100      	movs	r1, #0
1a00268a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00268c:	4a08      	ldr	r2, [pc, #32]	; (1a0026b0 <Chip_ADC_Init+0x3c>)
1a00268e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002690:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002692:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002694:	230b      	movs	r3, #11
1a002696:	4628      	mov	r0, r5
1a002698:	f7ff ffd2 	bl	1a002640 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00269c:	0200      	lsls	r0, r0, #8
1a00269e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0026a2:	7920      	ldrb	r0, [r4, #4]
1a0026a4:	0440      	lsls	r0, r0, #17
1a0026a6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0026aa:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0026ac:	6028      	str	r0, [r5, #0]
}
1a0026ae:	bd38      	pop	{r3, r4, r5, pc}
1a0026b0:	00061a80 	.word	0x00061a80

1a0026b4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0026b4:	b570      	push	{r4, r5, r6, lr}
1a0026b6:	4605      	mov	r5, r0
1a0026b8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0026ba:	6804      	ldr	r4, [r0, #0]
1a0026bc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0026c0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0026c4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0026c6:	790b      	ldrb	r3, [r1, #4]
1a0026c8:	f1c3 030b 	rsb	r3, r3, #11
1a0026cc:	b2db      	uxtb	r3, r3
1a0026ce:	7949      	ldrb	r1, [r1, #5]
1a0026d0:	f7ff ffb6 	bl	1a002640 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0026d4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0026d8:	7930      	ldrb	r0, [r6, #4]
1a0026da:	0440      	lsls	r0, r0, #17
1a0026dc:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0026e0:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0026e2:	6028      	str	r0, [r5, #0]
}
1a0026e4:	bd70      	pop	{r4, r5, r6, pc}

1a0026e6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0026e6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0026e8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0026ea:	680a      	ldr	r2, [r1, #0]
1a0026ec:	f7ff ffe2 	bl	1a0026b4 <Chip_ADC_SetSampleRate>
}
1a0026f0:	bd08      	pop	{r3, pc}
1a0026f2:	Address 0x000000001a0026f2 is out of bounds.


1a0026f4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0026f4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0026f6:	680b      	ldr	r3, [r1, #0]
1a0026f8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0026fc:	d002      	beq.n	1a002704 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0026fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002702:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002704:	4607      	mov	r7, r0
1a002706:	2501      	movs	r5, #1
1a002708:	e03b      	b.n	1a002782 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00270a:	694b      	ldr	r3, [r1, #20]
1a00270c:	fb03 f302 	mul.w	r3, r3, r2
1a002710:	fbb3 f3f5 	udiv	r3, r3, r5
1a002714:	e014      	b.n	1a002740 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002716:	461c      	mov	r4, r3
1a002718:	e020      	b.n	1a00275c <pll_calc_divs+0x68>
		return -val;
1a00271a:	f1cc 0c00 	rsb	ip, ip, #0
1a00271e:	e020      	b.n	1a002762 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002720:	3201      	adds	r2, #1
1a002722:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002726:	dc26      	bgt.n	1a002776 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002728:	680c      	ldr	r4, [r1, #0]
1a00272a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00272e:	d0ec      	beq.n	1a00270a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002730:	1c73      	adds	r3, r6, #1
1a002732:	fa02 fc03 	lsl.w	ip, r2, r3
1a002736:	694b      	ldr	r3, [r1, #20]
1a002738:	fb03 f30c 	mul.w	r3, r3, ip
1a00273c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002740:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002790 <pll_calc_divs+0x9c>
1a002744:	4563      	cmp	r3, ip
1a002746:	d9eb      	bls.n	1a002720 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002748:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002794 <pll_calc_divs+0xa0>
1a00274c:	4563      	cmp	r3, ip
1a00274e:	d812      	bhi.n	1a002776 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002750:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002754:	d1df      	bne.n	1a002716 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002756:	1c74      	adds	r4, r6, #1
1a002758:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a00275c:	ebb0 0c04 	subs.w	ip, r0, r4
1a002760:	d4db      	bmi.n	1a00271a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002762:	4567      	cmp	r7, ip
1a002764:	d9dc      	bls.n	1a002720 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002766:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002768:	1c77      	adds	r7, r6, #1
1a00276a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00276c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00276e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002770:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002772:	4667      	mov	r7, ip
1a002774:	e7d4      	b.n	1a002720 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002776:	3601      	adds	r6, #1
1a002778:	2e03      	cmp	r6, #3
1a00277a:	dc01      	bgt.n	1a002780 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a00277c:	2201      	movs	r2, #1
1a00277e:	e7d0      	b.n	1a002722 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002780:	3501      	adds	r5, #1
1a002782:	2d04      	cmp	r5, #4
1a002784:	dc01      	bgt.n	1a00278a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002786:	2600      	movs	r6, #0
1a002788:	e7f6      	b.n	1a002778 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00278a:	bcf0      	pop	{r4, r5, r6, r7}
1a00278c:	4770      	bx	lr
1a00278e:	bf00      	nop
1a002790:	094c5eff 	.word	0x094c5eff
1a002794:	1312d000 	.word	0x1312d000

1a002798 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002798:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00279a:	b099      	sub	sp, #100	; 0x64
1a00279c:	4605      	mov	r5, r0
1a00279e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0027a0:	225c      	movs	r2, #92	; 0x5c
1a0027a2:	2100      	movs	r1, #0
1a0027a4:	a801      	add	r0, sp, #4
1a0027a6:	f001 f9da 	bl	1a003b5e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0027aa:	2380      	movs	r3, #128	; 0x80
1a0027ac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0027ae:	6963      	ldr	r3, [r4, #20]
1a0027b0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0027b2:	7923      	ldrb	r3, [r4, #4]
1a0027b4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0027b8:	4669      	mov	r1, sp
1a0027ba:	4628      	mov	r0, r5
1a0027bc:	f7ff ff9a 	bl	1a0026f4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0027c0:	9b06      	ldr	r3, [sp, #24]
1a0027c2:	42ab      	cmp	r3, r5
1a0027c4:	d027      	beq.n	1a002816 <pll_get_frac+0x7e>
	if (val < 0)
1a0027c6:	1aeb      	subs	r3, r5, r3
1a0027c8:	d42e      	bmi.n	1a002828 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0027ca:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0027cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0027ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0027d2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0027d4:	6963      	ldr	r3, [r4, #20]
1a0027d6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0027d8:	7923      	ldrb	r3, [r4, #4]
1a0027da:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0027de:	a910      	add	r1, sp, #64	; 0x40
1a0027e0:	4628      	mov	r0, r5
1a0027e2:	f7ff ff87 	bl	1a0026f4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0027e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0027e8:	42ab      	cmp	r3, r5
1a0027ea:	d01f      	beq.n	1a00282c <pll_get_frac+0x94>
	if (val < 0)
1a0027ec:	1aeb      	subs	r3, r5, r3
1a0027ee:	d425      	bmi.n	1a00283c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0027f0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0027f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0028a0 <pll_get_frac+0x108>)
1a0027f4:	429d      	cmp	r5, r3
1a0027f6:	d923      	bls.n	1a002840 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0027f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0027fa:	1aed      	subs	r5, r5, r3
1a0027fc:	d433      	bmi.n	1a002866 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0027fe:	42ae      	cmp	r6, r5
1a002800:	dc3b      	bgt.n	1a00287a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002802:	42be      	cmp	r6, r7
1a002804:	dc31      	bgt.n	1a00286a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002806:	466d      	mov	r5, sp
1a002808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00280a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00280c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002814:	e006      	b.n	1a002824 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002816:	466d      	mov	r5, sp
1a002818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00281a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00281c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002824:	b019      	add	sp, #100	; 0x64
1a002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002828:	425b      	negs	r3, r3
1a00282a:	e7ce      	b.n	1a0027ca <pll_get_frac+0x32>
		*ppll = pll[2];
1a00282c:	ad10      	add	r5, sp, #64	; 0x40
1a00282e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002832:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00283a:	e7f3      	b.n	1a002824 <pll_get_frac+0x8c>
		return -val;
1a00283c:	425b      	negs	r3, r3
1a00283e:	e7d7      	b.n	1a0027f0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002840:	2340      	movs	r3, #64	; 0x40
1a002842:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002844:	6963      	ldr	r3, [r4, #20]
1a002846:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002848:	a908      	add	r1, sp, #32
1a00284a:	4628      	mov	r0, r5
1a00284c:	f7ff ff52 	bl	1a0026f4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002852:	42ab      	cmp	r3, r5
1a002854:	d1d0      	bne.n	1a0027f8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002856:	ad08      	add	r5, sp, #32
1a002858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00285a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00285c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002864:	e7de      	b.n	1a002824 <pll_get_frac+0x8c>
		return -val;
1a002866:	426d      	negs	r5, r5
1a002868:	e7c9      	b.n	1a0027fe <pll_get_frac+0x66>
			*ppll = pll[2];
1a00286a:	ad10      	add	r5, sp, #64	; 0x40
1a00286c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00286e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002870:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002878:	e7d4      	b.n	1a002824 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00287a:	42af      	cmp	r7, r5
1a00287c:	db07      	blt.n	1a00288e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00287e:	ad08      	add	r5, sp, #32
1a002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002884:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00288c:	e7ca      	b.n	1a002824 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00288e:	ad10      	add	r5, sp, #64	; 0x40
1a002890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002894:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00289c:	e7c2      	b.n	1a002824 <pll_get_frac+0x8c>
1a00289e:	bf00      	nop
1a0028a0:	068e7780 	.word	0x068e7780

1a0028a4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0028a4:	b430      	push	{r4, r5}
1a0028a6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0028a8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0028aa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0028ac:	e000      	b.n	1a0028b0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0028ae:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0028b0:	281c      	cmp	r0, #28
1a0028b2:	d118      	bne.n	1a0028e6 <Chip_Clock_FindBaseClock+0x42>
1a0028b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0028b8:	0051      	lsls	r1, r2, #1
1a0028ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0028ec <Chip_Clock_FindBaseClock+0x48>)
1a0028bc:	440a      	add	r2, r1
1a0028be:	7914      	ldrb	r4, [r2, #4]
1a0028c0:	4284      	cmp	r4, r0
1a0028c2:	d010      	beq.n	1a0028e6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0028c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0028c8:	004a      	lsls	r2, r1, #1
1a0028ca:	4908      	ldr	r1, [pc, #32]	; (1a0028ec <Chip_Clock_FindBaseClock+0x48>)
1a0028cc:	5a8a      	ldrh	r2, [r1, r2]
1a0028ce:	42aa      	cmp	r2, r5
1a0028d0:	d8ed      	bhi.n	1a0028ae <Chip_Clock_FindBaseClock+0xa>
1a0028d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0028d6:	0051      	lsls	r1, r2, #1
1a0028d8:	4a04      	ldr	r2, [pc, #16]	; (1a0028ec <Chip_Clock_FindBaseClock+0x48>)
1a0028da:	440a      	add	r2, r1
1a0028dc:	8852      	ldrh	r2, [r2, #2]
1a0028de:	42aa      	cmp	r2, r5
1a0028e0:	d3e5      	bcc.n	1a0028ae <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0028e2:	4620      	mov	r0, r4
1a0028e4:	e7e4      	b.n	1a0028b0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0028e6:	bc30      	pop	{r4, r5}
1a0028e8:	4770      	bx	lr
1a0028ea:	bf00      	nop
1a0028ec:	1a0048c8 	.word	0x1a0048c8

1a0028f0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0028f0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0028f6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0028f8:	4a0d      	ldr	r2, [pc, #52]	; (1a002930 <Chip_Clock_EnableCrystal+0x40>)
1a0028fa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0028fc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002900:	6992      	ldr	r2, [r2, #24]
1a002902:	428a      	cmp	r2, r1
1a002904:	d001      	beq.n	1a00290a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002906:	4a0a      	ldr	r2, [pc, #40]	; (1a002930 <Chip_Clock_EnableCrystal+0x40>)
1a002908:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00290a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00290e:	4a09      	ldr	r2, [pc, #36]	; (1a002934 <Chip_Clock_EnableCrystal+0x44>)
1a002910:	6811      	ldr	r1, [r2, #0]
1a002912:	4a09      	ldr	r2, [pc, #36]	; (1a002938 <Chip_Clock_EnableCrystal+0x48>)
1a002914:	4291      	cmp	r1, r2
1a002916:	d901      	bls.n	1a00291c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002918:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00291c:	4a04      	ldr	r2, [pc, #16]	; (1a002930 <Chip_Clock_EnableCrystal+0x40>)
1a00291e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002920:	9b01      	ldr	r3, [sp, #4]
1a002922:	1e5a      	subs	r2, r3, #1
1a002924:	9201      	str	r2, [sp, #4]
1a002926:	2b00      	cmp	r3, #0
1a002928:	d1fa      	bne.n	1a002920 <Chip_Clock_EnableCrystal+0x30>
}
1a00292a:	b002      	add	sp, #8
1a00292c:	4770      	bx	lr
1a00292e:	bf00      	nop
1a002930:	40050000 	.word	0x40050000
1a002934:	1a004830 	.word	0x1a004830
1a002938:	01312cff 	.word	0x01312cff

1a00293c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00293c:	3012      	adds	r0, #18
1a00293e:	4b05      	ldr	r3, [pc, #20]	; (1a002954 <Chip_Clock_GetDividerSource+0x18>)
1a002940:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002944:	f010 0f01 	tst.w	r0, #1
1a002948:	d102      	bne.n	1a002950 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00294a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00294e:	4770      	bx	lr
		return CLKINPUT_PD;
1a002950:	2011      	movs	r0, #17
}
1a002952:	4770      	bx	lr
1a002954:	40050000 	.word	0x40050000

1a002958 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002958:	f100 0212 	add.w	r2, r0, #18
1a00295c:	4b03      	ldr	r3, [pc, #12]	; (1a00296c <Chip_Clock_GetDividerDivisor+0x14>)
1a00295e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002962:	4b03      	ldr	r3, [pc, #12]	; (1a002970 <Chip_Clock_GetDividerDivisor+0x18>)
1a002964:	5c18      	ldrb	r0, [r3, r0]
}
1a002966:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00296a:	4770      	bx	lr
1a00296c:	40050000 	.word	0x40050000
1a002970:	1a0048c0 	.word	0x1a0048c0

1a002974 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002974:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002976:	2810      	cmp	r0, #16
1a002978:	d80a      	bhi.n	1a002990 <Chip_Clock_GetClockInputHz+0x1c>
1a00297a:	e8df f000 	tbb	[pc, r0]
1a00297e:	0b42      	.short	0x0b42
1a002980:	091f160d 	.word	0x091f160d
1a002984:	2b282522 	.word	0x2b282522
1a002988:	322e0909 	.word	0x322e0909
1a00298c:	3a36      	.short	0x3a36
1a00298e:	3e          	.byte	0x3e
1a00298f:	00          	.byte	0x00
	uint32_t rate = 0;
1a002990:	2000      	movs	r0, #0
1a002992:	e038      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002994:	481e      	ldr	r0, [pc, #120]	; (1a002a10 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002996:	e036      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002998:	4b1e      	ldr	r3, [pc, #120]	; (1a002a14 <Chip_Clock_GetClockInputHz+0xa0>)
1a00299a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00299e:	f003 0307 	and.w	r3, r3, #7
1a0029a2:	2b04      	cmp	r3, #4
1a0029a4:	d130      	bne.n	1a002a08 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0029a6:	2000      	movs	r0, #0
1a0029a8:	e02d      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0029aa:	4b1a      	ldr	r3, [pc, #104]	; (1a002a14 <Chip_Clock_GetClockInputHz+0xa0>)
1a0029ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0029b0:	f003 0307 	and.w	r3, r3, #7
1a0029b4:	2b04      	cmp	r3, #4
1a0029b6:	d029      	beq.n	1a002a0c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0029b8:	4817      	ldr	r0, [pc, #92]	; (1a002a18 <Chip_Clock_GetClockInputHz+0xa4>)
1a0029ba:	e024      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0029bc:	4b17      	ldr	r3, [pc, #92]	; (1a002a1c <Chip_Clock_GetClockInputHz+0xa8>)
1a0029be:	6818      	ldr	r0, [r3, #0]
		break;
1a0029c0:	e021      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0029c2:	4b17      	ldr	r3, [pc, #92]	; (1a002a20 <Chip_Clock_GetClockInputHz+0xac>)
1a0029c4:	6818      	ldr	r0, [r3, #0]
		break;
1a0029c6:	e01e      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0029c8:	4b16      	ldr	r3, [pc, #88]	; (1a002a24 <Chip_Clock_GetClockInputHz+0xb0>)
1a0029ca:	6818      	ldr	r0, [r3, #0]
		break;
1a0029cc:	e01b      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0029ce:	4b15      	ldr	r3, [pc, #84]	; (1a002a24 <Chip_Clock_GetClockInputHz+0xb0>)
1a0029d0:	6858      	ldr	r0, [r3, #4]
		break;
1a0029d2:	e018      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0029d4:	f000 f86a 	bl	1a002aac <Chip_Clock_GetMainPLLHz>
		break;
1a0029d8:	e015      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0029da:	2100      	movs	r1, #0
1a0029dc:	f000 f89c 	bl	1a002b18 <Chip_Clock_GetDivRate>
		break;
1a0029e0:	e011      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0029e2:	2101      	movs	r1, #1
1a0029e4:	f000 f898 	bl	1a002b18 <Chip_Clock_GetDivRate>
		break;
1a0029e8:	e00d      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0029ea:	2102      	movs	r1, #2
1a0029ec:	f000 f894 	bl	1a002b18 <Chip_Clock_GetDivRate>
		break;
1a0029f0:	e009      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0029f2:	2103      	movs	r1, #3
1a0029f4:	f000 f890 	bl	1a002b18 <Chip_Clock_GetDivRate>
		break;
1a0029f8:	e005      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0029fa:	2104      	movs	r1, #4
1a0029fc:	f000 f88c 	bl	1a002b18 <Chip_Clock_GetDivRate>
		break;
1a002a00:	e001      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002a02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002a06:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002a08:	4803      	ldr	r0, [pc, #12]	; (1a002a18 <Chip_Clock_GetClockInputHz+0xa4>)
1a002a0a:	e7fc      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002a0c:	4806      	ldr	r0, [pc, #24]	; (1a002a28 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002a0e:	e7fa      	b.n	1a002a06 <Chip_Clock_GetClockInputHz+0x92>
1a002a10:	00b71b00 	.word	0x00b71b00
1a002a14:	40043000 	.word	0x40043000
1a002a18:	017d7840 	.word	0x017d7840
1a002a1c:	1a004804 	.word	0x1a004804
1a002a20:	1a004830 	.word	0x1a004830
1a002a24:	10002ae8 	.word	0x10002ae8
1a002a28:	02faf080 	.word	0x02faf080

1a002a2c <Chip_Clock_CalcMainPLLValue>:
{
1a002a2c:	b538      	push	{r3, r4, r5, lr}
1a002a2e:	4605      	mov	r5, r0
1a002a30:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002a32:	7908      	ldrb	r0, [r1, #4]
1a002a34:	f7ff ff9e 	bl	1a002974 <Chip_Clock_GetClockInputHz>
1a002a38:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002a3a:	4b19      	ldr	r3, [pc, #100]	; (1a002aa0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002a3c:	442b      	add	r3, r5
1a002a3e:	4a19      	ldr	r2, [pc, #100]	; (1a002aa4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002a40:	4293      	cmp	r3, r2
1a002a42:	d821      	bhi.n	1a002a88 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002a44:	b318      	cbz	r0, 1a002a8e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002a46:	2380      	movs	r3, #128	; 0x80
1a002a48:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002a4a:	2300      	movs	r3, #0
1a002a4c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002a4e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002a50:	fbb5 f3f0 	udiv	r3, r5, r0
1a002a54:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002a56:	4a14      	ldr	r2, [pc, #80]	; (1a002aa8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002a58:	4295      	cmp	r5, r2
1a002a5a:	d903      	bls.n	1a002a64 <Chip_Clock_CalcMainPLLValue+0x38>
1a002a5c:	fb03 f000 	mul.w	r0, r3, r0
1a002a60:	42a8      	cmp	r0, r5
1a002a62:	d007      	beq.n	1a002a74 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002a64:	4621      	mov	r1, r4
1a002a66:	4628      	mov	r0, r5
1a002a68:	f7ff fe96 	bl	1a002798 <pll_get_frac>
		if (!ppll->nsel) {
1a002a6c:	68a3      	ldr	r3, [r4, #8]
1a002a6e:	b18b      	cbz	r3, 1a002a94 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002a70:	3b01      	subs	r3, #1
1a002a72:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002a74:	6923      	ldr	r3, [r4, #16]
1a002a76:	b183      	cbz	r3, 1a002a9a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002a78:	68e2      	ldr	r2, [r4, #12]
1a002a7a:	b10a      	cbz	r2, 1a002a80 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002a7c:	3a01      	subs	r2, #1
1a002a7e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002a80:	3b01      	subs	r3, #1
1a002a82:	6123      	str	r3, [r4, #16]
	return 0;
1a002a84:	2000      	movs	r0, #0
}
1a002a86:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a8c:	e7fb      	b.n	1a002a86 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a92:	e7f8      	b.n	1a002a86 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a98:	e7f5      	b.n	1a002a86 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a9e:	e7f2      	b.n	1a002a86 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002aa0:	ff6b3a10 	.word	0xff6b3a10
1a002aa4:	0b940510 	.word	0x0b940510
1a002aa8:	094c5eff 	.word	0x094c5eff

1a002aac <Chip_Clock_GetMainPLLHz>:
{
1a002aac:	b530      	push	{r4, r5, lr}
1a002aae:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002ab0:	4d17      	ldr	r5, [pc, #92]	; (1a002b10 <Chip_Clock_GetMainPLLHz+0x64>)
1a002ab2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002ab4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002ab8:	f7ff ff5c 	bl	1a002974 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002abc:	4b15      	ldr	r3, [pc, #84]	; (1a002b14 <Chip_Clock_GetMainPLLHz+0x68>)
1a002abe:	681b      	ldr	r3, [r3, #0]
1a002ac0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002ac2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002ac4:	f013 0f01 	tst.w	r3, #1
1a002ac8:	d01f      	beq.n	1a002b0a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002aca:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002ace:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002ad2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002ad6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002ada:	3301      	adds	r3, #1
	n = nsel + 1;
1a002adc:	3201      	adds	r2, #1
	p = ptab[psel];
1a002ade:	f10d 0c08 	add.w	ip, sp, #8
1a002ae2:	4461      	add	r1, ip
1a002ae4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002ae8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002aec:	d108      	bne.n	1a002b00 <Chip_Clock_GetMainPLLHz+0x54>
1a002aee:	b93d      	cbnz	r5, 1a002b00 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002af0:	0049      	lsls	r1, r1, #1
1a002af2:	fbb3 f3f1 	udiv	r3, r3, r1
1a002af6:	fbb0 f0f2 	udiv	r0, r0, r2
1a002afa:	fb00 f003 	mul.w	r0, r0, r3
1a002afe:	e005      	b.n	1a002b0c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002b00:	fbb0 f0f2 	udiv	r0, r0, r2
1a002b04:	fb03 f000 	mul.w	r0, r3, r0
1a002b08:	e000      	b.n	1a002b0c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002b0a:	2000      	movs	r0, #0
}
1a002b0c:	b003      	add	sp, #12
1a002b0e:	bd30      	pop	{r4, r5, pc}
1a002b10:	40050000 	.word	0x40050000
1a002b14:	1a0048bc 	.word	0x1a0048bc

1a002b18 <Chip_Clock_GetDivRate>:
{
1a002b18:	b538      	push	{r3, r4, r5, lr}
1a002b1a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002b1c:	4608      	mov	r0, r1
1a002b1e:	f7ff ff0d 	bl	1a00293c <Chip_Clock_GetDividerSource>
1a002b22:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002b24:	4620      	mov	r0, r4
1a002b26:	f7ff ff17 	bl	1a002958 <Chip_Clock_GetDividerDivisor>
1a002b2a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002b2c:	4628      	mov	r0, r5
1a002b2e:	f7ff ff21 	bl	1a002974 <Chip_Clock_GetClockInputHz>
1a002b32:	3401      	adds	r4, #1
}
1a002b34:	fbb0 f0f4 	udiv	r0, r0, r4
1a002b38:	bd38      	pop	{r3, r4, r5, pc}
1a002b3a:	Address 0x000000001a002b3a is out of bounds.


1a002b3c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002b3c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002b3e:	f100 0416 	add.w	r4, r0, #22
1a002b42:	00a4      	lsls	r4, r4, #2
1a002b44:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002b48:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002b4c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002b4e:	281b      	cmp	r0, #27
1a002b50:	d813      	bhi.n	1a002b7a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002b52:	2911      	cmp	r1, #17
1a002b54:	d01a      	beq.n	1a002b8c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002b56:	4d0e      	ldr	r5, [pc, #56]	; (1a002b90 <Chip_Clock_SetBaseClock+0x54>)
1a002b58:	4025      	ands	r5, r4

			if (autoblocken) {
1a002b5a:	b10a      	cbz	r2, 1a002b60 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002b5c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002b60:	b10b      	cbz	r3, 1a002b66 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002b62:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002b66:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002b6a:	3016      	adds	r0, #22
1a002b6c:	0080      	lsls	r0, r0, #2
1a002b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002b72:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002b76:	6045      	str	r5, [r0, #4]
1a002b78:	e008      	b.n	1a002b8c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002b7a:	f044 0401 	orr.w	r4, r4, #1
1a002b7e:	3016      	adds	r0, #22
1a002b80:	0080      	lsls	r0, r0, #2
1a002b82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002b86:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002b8a:	6044      	str	r4, [r0, #4]
	}
}
1a002b8c:	bc30      	pop	{r4, r5}
1a002b8e:	4770      	bx	lr
1a002b90:	e0fff7fe 	.word	0xe0fff7fe

1a002b94 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002b94:	281b      	cmp	r0, #27
1a002b96:	d80c      	bhi.n	1a002bb2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002b98:	3016      	adds	r0, #22
1a002b9a:	0080      	lsls	r0, r0, #2
1a002b9c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002ba0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002ba4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002ba6:	f010 0f01 	tst.w	r0, #1
1a002baa:	d104      	bne.n	1a002bb6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002bac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002bb0:	4770      	bx	lr
		return CLKINPUT_PD;
1a002bb2:	2011      	movs	r0, #17
1a002bb4:	4770      	bx	lr
		return CLKINPUT_PD;
1a002bb6:	2011      	movs	r0, #17
}
1a002bb8:	4770      	bx	lr

1a002bba <Chip_Clock_GetBaseClocktHz>:
{
1a002bba:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002bbc:	f7ff ffea 	bl	1a002b94 <Chip_Clock_GetBaseClock>
1a002bc0:	f7ff fed8 	bl	1a002974 <Chip_Clock_GetClockInputHz>
}
1a002bc4:	bd08      	pop	{r3, pc}
1a002bc6:	Address 0x000000001a002bc6 is out of bounds.


1a002bc8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002bc8:	b969      	cbnz	r1, 1a002be6 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002bca:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002bcc:	b10a      	cbz	r2, 1a002bd2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002bce:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002bd2:	2b02      	cmp	r3, #2
1a002bd4:	d009      	beq.n	1a002bea <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002bd6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002bda:	d209      	bcs.n	1a002bf0 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002bdc:	3020      	adds	r0, #32
1a002bde:	4b07      	ldr	r3, [pc, #28]	; (1a002bfc <Chip_Clock_EnableOpts+0x34>)
1a002be0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002be4:	4770      	bx	lr
		reg |= (1 << 1);
1a002be6:	2103      	movs	r1, #3
1a002be8:	e7f0      	b.n	1a002bcc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002bea:	f041 0120 	orr.w	r1, r1, #32
1a002bee:	e7f2      	b.n	1a002bd6 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002bf0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002bf4:	4b02      	ldr	r3, [pc, #8]	; (1a002c00 <Chip_Clock_EnableOpts+0x38>)
1a002bf6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002bfa:	4770      	bx	lr
1a002bfc:	40051000 	.word	0x40051000
1a002c00:	40052000 	.word	0x40052000

1a002c04 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002c04:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002c08:	d208      	bcs.n	1a002c1c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002c0a:	4a09      	ldr	r2, [pc, #36]	; (1a002c30 <Chip_Clock_Enable+0x2c>)
1a002c0c:	3020      	adds	r0, #32
1a002c0e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002c12:	f043 0301 	orr.w	r3, r3, #1
1a002c16:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002c1a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002c1c:	4a05      	ldr	r2, [pc, #20]	; (1a002c34 <Chip_Clock_Enable+0x30>)
1a002c1e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002c22:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002c26:	f043 0301 	orr.w	r3, r3, #1
1a002c2a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002c2e:	4770      	bx	lr
1a002c30:	40051000 	.word	0x40051000
1a002c34:	40052000 	.word	0x40052000

1a002c38 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002c38:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002c3a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002c3e:	d309      	bcc.n	1a002c54 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002c40:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002c44:	4a0d      	ldr	r2, [pc, #52]	; (1a002c7c <Chip_Clock_GetRate+0x44>)
1a002c46:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002c4a:	f014 0f01 	tst.w	r4, #1
1a002c4e:	d107      	bne.n	1a002c60 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002c50:	2000      	movs	r0, #0
	}

	return rate;
}
1a002c52:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002c54:	f100 0320 	add.w	r3, r0, #32
1a002c58:	4a09      	ldr	r2, [pc, #36]	; (1a002c80 <Chip_Clock_GetRate+0x48>)
1a002c5a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002c5e:	e7f4      	b.n	1a002c4a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002c60:	f7ff fe20 	bl	1a0028a4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002c64:	f7ff ffa9 	bl	1a002bba <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002c68:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002c6c:	d103      	bne.n	1a002c76 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002c6e:	2301      	movs	r3, #1
		rate = rate / div;
1a002c70:	fbb0 f0f3 	udiv	r0, r0, r3
1a002c74:	e7ed      	b.n	1a002c52 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002c76:	2302      	movs	r3, #2
1a002c78:	e7fa      	b.n	1a002c70 <Chip_Clock_GetRate+0x38>
1a002c7a:	bf00      	nop
1a002c7c:	40052000 	.word	0x40052000
1a002c80:	40051000 	.word	0x40051000

1a002c84 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002c84:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002c86:	2069      	movs	r0, #105	; 0x69
1a002c88:	f7ff ffd6 	bl	1a002c38 <Chip_Clock_GetRate>
1a002c8c:	4b01      	ldr	r3, [pc, #4]	; (1a002c94 <SystemCoreClockUpdate+0x10>)
1a002c8e:	6018      	str	r0, [r3, #0]
}
1a002c90:	bd08      	pop	{r3, pc}
1a002c92:	bf00      	nop
1a002c94:	10002b5c 	.word	0x10002b5c

1a002c98 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002c98:	4770      	bx	lr
1a002c9a:	Address 0x000000001a002c9a is out of bounds.


1a002c9c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002c9c:	b570      	push	{r4, r5, r6, lr}
1a002c9e:	b08a      	sub	sp, #40	; 0x28
1a002ca0:	4605      	mov	r5, r0
1a002ca2:	460e      	mov	r6, r1
1a002ca4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002ca6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002caa:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002cac:	2806      	cmp	r0, #6
1a002cae:	d018      	beq.n	1a002ce2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002cb0:	2300      	movs	r3, #0
1a002cb2:	2201      	movs	r2, #1
1a002cb4:	4629      	mov	r1, r5
1a002cb6:	2004      	movs	r0, #4
1a002cb8:	f7ff ff40 	bl	1a002b3c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002cbc:	4a49      	ldr	r2, [pc, #292]	; (1a002de4 <Chip_SetupCoreClock+0x148>)
1a002cbe:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002cc0:	f043 0301 	orr.w	r3, r3, #1
1a002cc4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002cc6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002cca:	a901      	add	r1, sp, #4
1a002ccc:	4630      	mov	r0, r6
1a002cce:	f7ff fead 	bl	1a002a2c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002cd2:	4b45      	ldr	r3, [pc, #276]	; (1a002de8 <Chip_SetupCoreClock+0x14c>)
1a002cd4:	429e      	cmp	r6, r3
1a002cd6:	d916      	bls.n	1a002d06 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002cd8:	9b01      	ldr	r3, [sp, #4]
1a002cda:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002cde:	d003      	beq.n	1a002ce8 <Chip_SetupCoreClock+0x4c>
1a002ce0:	e7fe      	b.n	1a002ce0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002ce2:	f7ff fe05 	bl	1a0028f0 <Chip_Clock_EnableCrystal>
1a002ce6:	e7e3      	b.n	1a002cb0 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a002ce8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002cec:	d005      	beq.n	1a002cfa <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002cf2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002cf4:	2500      	movs	r5, #0
			direct = 1;
1a002cf6:	2601      	movs	r6, #1
1a002cf8:	e007      	b.n	1a002d0a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002cfa:	9b04      	ldr	r3, [sp, #16]
1a002cfc:	3301      	adds	r3, #1
1a002cfe:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002d00:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002d02:	2600      	movs	r6, #0
1a002d04:	e001      	b.n	1a002d0a <Chip_SetupCoreClock+0x6e>
1a002d06:	2500      	movs	r5, #0
1a002d08:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002d0a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002d0e:	9b01      	ldr	r3, [sp, #4]
1a002d10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002d14:	9a05      	ldr	r2, [sp, #20]
1a002d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002d1a:	9a03      	ldr	r2, [sp, #12]
1a002d1c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002d20:	9a04      	ldr	r2, [sp, #16]
1a002d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002d26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002d2a:	4a2e      	ldr	r2, [pc, #184]	; (1a002de4 <Chip_SetupCoreClock+0x148>)
1a002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002d2e:	4b2d      	ldr	r3, [pc, #180]	; (1a002de4 <Chip_SetupCoreClock+0x148>)
1a002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002d32:	f013 0f01 	tst.w	r3, #1
1a002d36:	d0fa      	beq.n	1a002d2e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002d38:	2300      	movs	r3, #0
1a002d3a:	2201      	movs	r2, #1
1a002d3c:	2109      	movs	r1, #9
1a002d3e:	2004      	movs	r0, #4
1a002d40:	f7ff fefc 	bl	1a002b3c <Chip_Clock_SetBaseClock>

	if (direct) {
1a002d44:	b1fe      	cbz	r6, 1a002d86 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002d46:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002d4a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002d4e:	1e5a      	subs	r2, r3, #1
1a002d50:	9209      	str	r2, [sp, #36]	; 0x24
1a002d52:	2b00      	cmp	r3, #0
1a002d54:	d1fa      	bne.n	1a002d4c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002d56:	9b01      	ldr	r3, [sp, #4]
1a002d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002d5c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002d5e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002d62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002d66:	9a05      	ldr	r2, [sp, #20]
1a002d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002d6c:	9a03      	ldr	r2, [sp, #12]
1a002d6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002d72:	9a04      	ldr	r2, [sp, #16]
1a002d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002d7c:	4a19      	ldr	r2, [pc, #100]	; (1a002de4 <Chip_SetupCoreClock+0x148>)
1a002d7e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002d80:	b36c      	cbz	r4, 1a002dde <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002d82:	2400      	movs	r4, #0
1a002d84:	e029      	b.n	1a002dda <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002d86:	2d00      	cmp	r5, #0
1a002d88:	d0fa      	beq.n	1a002d80 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002d8a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002d8e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002d92:	1e5a      	subs	r2, r3, #1
1a002d94:	9209      	str	r2, [sp, #36]	; 0x24
1a002d96:	2b00      	cmp	r3, #0
1a002d98:	d1fa      	bne.n	1a002d90 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a002d9a:	9b04      	ldr	r3, [sp, #16]
1a002d9c:	1e5a      	subs	r2, r3, #1
1a002d9e:	9204      	str	r2, [sp, #16]
1a002da0:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002da4:	9b01      	ldr	r3, [sp, #4]
1a002da6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002daa:	9905      	ldr	r1, [sp, #20]
1a002dac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002db0:	9903      	ldr	r1, [sp, #12]
1a002db2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002dba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002dbe:	4a09      	ldr	r2, [pc, #36]	; (1a002de4 <Chip_SetupCoreClock+0x148>)
1a002dc0:	6453      	str	r3, [r2, #68]	; 0x44
1a002dc2:	e7dd      	b.n	1a002d80 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002dc4:	4809      	ldr	r0, [pc, #36]	; (1a002dec <Chip_SetupCoreClock+0x150>)
1a002dc6:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002dca:	78cb      	ldrb	r3, [r1, #3]
1a002dcc:	788a      	ldrb	r2, [r1, #2]
1a002dce:	7849      	ldrb	r1, [r1, #1]
1a002dd0:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002dd4:	f7ff feb2 	bl	1a002b3c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002dd8:	3401      	adds	r4, #1
1a002dda:	2c11      	cmp	r4, #17
1a002ddc:	d9f2      	bls.n	1a002dc4 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002dde:	b00a      	add	sp, #40	; 0x28
1a002de0:	bd70      	pop	{r4, r5, r6, pc}
1a002de2:	bf00      	nop
1a002de4:	40050000 	.word	0x40050000
1a002de8:	068e7780 	.word	0x068e7780
1a002dec:	1a004934 	.word	0x1a004934

1a002df0 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002df0:	2901      	cmp	r1, #1
1a002df2:	d000      	beq.n	1a002df6 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002df4:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002df6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002dfa:	0082      	lsls	r2, r0, #2
1a002dfc:	4b03      	ldr	r3, [pc, #12]	; (1a002e0c <Chip_I2C_EventHandler+0x1c>)
1a002dfe:	4413      	add	r3, r2
1a002e00:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002e02:	7d13      	ldrb	r3, [r2, #20]
1a002e04:	b2db      	uxtb	r3, r3
1a002e06:	2b04      	cmp	r3, #4
1a002e08:	d0fb      	beq.n	1a002e02 <Chip_I2C_EventHandler+0x12>
1a002e0a:	e7f3      	b.n	1a002df4 <Chip_I2C_EventHandler+0x4>
1a002e0c:	10000004 	.word	0x10000004

1a002e10 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002e10:	b570      	push	{r4, r5, r6, lr}
1a002e12:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002e14:	4e06      	ldr	r6, [pc, #24]	; (1a002e30 <Chip_I2C_Init+0x20>)
1a002e16:	00c4      	lsls	r4, r0, #3
1a002e18:	1a22      	subs	r2, r4, r0
1a002e1a:	0093      	lsls	r3, r2, #2
1a002e1c:	4433      	add	r3, r6
1a002e1e:	8898      	ldrh	r0, [r3, #4]
1a002e20:	f7ff fef0 	bl	1a002c04 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002e24:	1b64      	subs	r4, r4, r5
1a002e26:	00a3      	lsls	r3, r4, #2
1a002e28:	58f3      	ldr	r3, [r6, r3]
1a002e2a:	226c      	movs	r2, #108	; 0x6c
1a002e2c:	619a      	str	r2, [r3, #24]
}
1a002e2e:	bd70      	pop	{r4, r5, r6, pc}
1a002e30:	10000004 	.word	0x10000004

1a002e34 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002e38:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002e3a:	4e0b      	ldr	r6, [pc, #44]	; (1a002e68 <Chip_I2C_SetClockRate+0x34>)
1a002e3c:	00c5      	lsls	r5, r0, #3
1a002e3e:	1a2b      	subs	r3, r5, r0
1a002e40:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002e44:	eb06 0308 	add.w	r3, r6, r8
1a002e48:	8898      	ldrh	r0, [r3, #4]
1a002e4a:	f7ff fef5 	bl	1a002c38 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002e4e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002e52:	f856 3008 	ldr.w	r3, [r6, r8]
1a002e56:	0842      	lsrs	r2, r0, #1
1a002e58:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002e5a:	f856 3008 	ldr.w	r3, [r6, r8]
1a002e5e:	691a      	ldr	r2, [r3, #16]
1a002e60:	1a80      	subs	r0, r0, r2
1a002e62:	6158      	str	r0, [r3, #20]
}
1a002e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e68:	10000004 	.word	0x10000004

1a002e6c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002e6c:	4b03      	ldr	r3, [pc, #12]	; (1a002e7c <Chip_SSP_GetClockIndex+0x10>)
1a002e6e:	4298      	cmp	r0, r3
1a002e70:	d001      	beq.n	1a002e76 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002e72:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002e74:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002e76:	20a5      	movs	r0, #165	; 0xa5
1a002e78:	4770      	bx	lr
1a002e7a:	bf00      	nop
1a002e7c:	400c5000 	.word	0x400c5000

1a002e80 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002e80:	4b04      	ldr	r3, [pc, #16]	; (1a002e94 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002e82:	4298      	cmp	r0, r3
1a002e84:	d002      	beq.n	1a002e8c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002e86:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002e8a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002e8c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002e90:	4770      	bx	lr
1a002e92:	bf00      	nop
1a002e94:	400c5000 	.word	0x400c5000

1a002e98 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002e98:	6803      	ldr	r3, [r0, #0]
1a002e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002e9e:	0209      	lsls	r1, r1, #8
1a002ea0:	b289      	uxth	r1, r1
1a002ea2:	4319      	orrs	r1, r3
1a002ea4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002ea6:	6102      	str	r2, [r0, #16]
}
1a002ea8:	4770      	bx	lr

1a002eaa <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002eaa:	b570      	push	{r4, r5, r6, lr}
1a002eac:	4606      	mov	r6, r0
1a002eae:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002eb0:	f7ff ffe6 	bl	1a002e80 <Chip_SSP_GetPeriphClockIndex>
1a002eb4:	f7ff fec0 	bl	1a002c38 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002eb8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002ebe:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002ec0:	e000      	b.n	1a002ec4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002ec2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002ec4:	42ab      	cmp	r3, r5
1a002ec6:	d90b      	bls.n	1a002ee0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002ec8:	1c4c      	adds	r4, r1, #1
1a002eca:	fb02 f304 	mul.w	r3, r2, r4
1a002ece:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002ed2:	429d      	cmp	r5, r3
1a002ed4:	d2f6      	bcs.n	1a002ec4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002ed6:	2cff      	cmp	r4, #255	; 0xff
1a002ed8:	d9f3      	bls.n	1a002ec2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002eda:	3202      	adds	r2, #2
				cr0_div = 0;
1a002edc:	2100      	movs	r1, #0
1a002ede:	e7f1      	b.n	1a002ec4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002ee0:	4630      	mov	r0, r6
1a002ee2:	f7ff ffd9 	bl	1a002e98 <Chip_SSP_SetClockRate>
}
1a002ee6:	bd70      	pop	{r4, r5, r6, pc}

1a002ee8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002ee8:	b510      	push	{r4, lr}
1a002eea:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002eec:	f7ff ffbe 	bl	1a002e6c <Chip_SSP_GetClockIndex>
1a002ef0:	f7ff fe88 	bl	1a002c04 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002ef4:	4620      	mov	r0, r4
1a002ef6:	f7ff ffc3 	bl	1a002e80 <Chip_SSP_GetPeriphClockIndex>
1a002efa:	f7ff fe83 	bl	1a002c04 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002efe:	6863      	ldr	r3, [r4, #4]
1a002f00:	f023 0304 	bic.w	r3, r3, #4
1a002f04:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002f06:	6823      	ldr	r3, [r4, #0]
1a002f08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002f0c:	f043 0307 	orr.w	r3, r3, #7
1a002f10:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002f12:	4902      	ldr	r1, [pc, #8]	; (1a002f1c <Chip_SSP_Init+0x34>)
1a002f14:	4620      	mov	r0, r4
1a002f16:	f7ff ffc8 	bl	1a002eaa <Chip_SSP_SetBitRate>
}
1a002f1a:	bd10      	pop	{r4, pc}
1a002f1c:	000186a0 	.word	0x000186a0

1a002f20 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002f20:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002f22:	4a0b      	ldr	r2, [pc, #44]	; (1a002f50 <SystemInit+0x30>)
1a002f24:	4b0b      	ldr	r3, [pc, #44]	; (1a002f54 <SystemInit+0x34>)
1a002f26:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002f28:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002f2c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002f2e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002f32:	2b20      	cmp	r3, #32
1a002f34:	d004      	beq.n	1a002f40 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002f36:	f7ff fa9f 	bl	1a002478 <Board_SystemInit>
   Board_Init();
1a002f3a:	f7ff fa25 	bl	1a002388 <Board_Init>
}
1a002f3e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002f40:	4a04      	ldr	r2, [pc, #16]	; (1a002f54 <SystemInit+0x34>)
1a002f42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002f46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002f4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002f4e:	e7f2      	b.n	1a002f36 <SystemInit+0x16>
1a002f50:	1a000000 	.word	0x1a000000
1a002f54:	e000ed00 	.word	0xe000ed00

1a002f58 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002f58:	4b04      	ldr	r3, [pc, #16]	; (1a002f6c <cyclesCounterInit+0x14>)
1a002f5a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002f5c:	4a04      	ldr	r2, [pc, #16]	; (1a002f70 <cyclesCounterInit+0x18>)
1a002f5e:	6813      	ldr	r3, [r2, #0]
1a002f60:	f043 0301 	orr.w	r3, r3, #1
1a002f64:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002f66:	2001      	movs	r0, #1
1a002f68:	4770      	bx	lr
1a002f6a:	bf00      	nop
1a002f6c:	1000003c 	.word	0x1000003c
1a002f70:	e0001000 	.word	0xe0001000

1a002f74 <uartProcessIRQ>:
{
1a002f74:	b570      	push	{r4, r5, r6, lr}
1a002f76:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002f78:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a002f7c:	0093      	lsls	r3, r2, #2
1a002f7e:	4a1f      	ldr	r2, [pc, #124]	; (1a002ffc <uartProcessIRQ+0x88>)
1a002f80:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a002f82:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a002f84:	b2ed      	uxtb	r5, r5
1a002f86:	f015 0f01 	tst.w	r5, #1
1a002f8a:	d009      	beq.n	1a002fa0 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002f8c:	b920      	cbnz	r0, 1a002f98 <uartProcessIRQ+0x24>
1a002f8e:	4b1c      	ldr	r3, [pc, #112]	; (1a003000 <uartProcessIRQ+0x8c>)
1a002f90:	681b      	ldr	r3, [r3, #0]
1a002f92:	b10b      	cbz	r3, 1a002f98 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a002f94:	2000      	movs	r0, #0
1a002f96:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002f98:	2c03      	cmp	r4, #3
1a002f9a:	d013      	beq.n	1a002fc4 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002f9c:	2c05      	cmp	r4, #5
1a002f9e:	d018      	beq.n	1a002fd2 <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002fa0:	f015 0f20 	tst.w	r5, #32
1a002fa4:	d00d      	beq.n	1a002fc2 <uartProcessIRQ+0x4e>
	return pUART->IER;
1a002fa6:	6873      	ldr	r3, [r6, #4]
1a002fa8:	f013 0f02 	tst.w	r3, #2
1a002fac:	d009      	beq.n	1a002fc2 <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002fae:	b924      	cbnz	r4, 1a002fba <uartProcessIRQ+0x46>
1a002fb0:	4b14      	ldr	r3, [pc, #80]	; (1a003004 <uartProcessIRQ+0x90>)
1a002fb2:	681b      	ldr	r3, [r3, #0]
1a002fb4:	b10b      	cbz	r3, 1a002fba <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a002fb6:	2000      	movs	r0, #0
1a002fb8:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002fba:	2c03      	cmp	r4, #3
1a002fbc:	d010      	beq.n	1a002fe0 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002fbe:	2c05      	cmp	r4, #5
1a002fc0:	d015      	beq.n	1a002fee <uartProcessIRQ+0x7a>
}
1a002fc2:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002fc4:	4b10      	ldr	r3, [pc, #64]	; (1a003008 <uartProcessIRQ+0x94>)
1a002fc6:	681b      	ldr	r3, [r3, #0]
1a002fc8:	2b00      	cmp	r3, #0
1a002fca:	d0e7      	beq.n	1a002f9c <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a002fcc:	2000      	movs	r0, #0
1a002fce:	4798      	blx	r3
1a002fd0:	e7e4      	b.n	1a002f9c <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002fd2:	4b0e      	ldr	r3, [pc, #56]	; (1a00300c <uartProcessIRQ+0x98>)
1a002fd4:	681b      	ldr	r3, [r3, #0]
1a002fd6:	2b00      	cmp	r3, #0
1a002fd8:	d0e2      	beq.n	1a002fa0 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a002fda:	2000      	movs	r0, #0
1a002fdc:	4798      	blx	r3
1a002fde:	e7df      	b.n	1a002fa0 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002fe0:	4b0b      	ldr	r3, [pc, #44]	; (1a003010 <uartProcessIRQ+0x9c>)
1a002fe2:	681b      	ldr	r3, [r3, #0]
1a002fe4:	2b00      	cmp	r3, #0
1a002fe6:	d0ea      	beq.n	1a002fbe <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a002fe8:	2000      	movs	r0, #0
1a002fea:	4798      	blx	r3
1a002fec:	e7e7      	b.n	1a002fbe <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002fee:	4b09      	ldr	r3, [pc, #36]	; (1a003014 <uartProcessIRQ+0xa0>)
1a002ff0:	681b      	ldr	r3, [r3, #0]
1a002ff2:	2b00      	cmp	r3, #0
1a002ff4:	d0e5      	beq.n	1a002fc2 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a002ff6:	2000      	movs	r0, #0
1a002ff8:	4798      	blx	r3
}
1a002ffa:	e7e2      	b.n	1a002fc2 <uartProcessIRQ+0x4e>
1a002ffc:	1a00497c 	.word	0x1a00497c
1a003000:	10002af0 	.word	0x10002af0
1a003004:	10002afc 	.word	0x10002afc
1a003008:	10002af4 	.word	0x10002af4
1a00300c:	10002af8 	.word	0x10002af8
1a003010:	10002b00 	.word	0x10002b00
1a003014:	10002b04 	.word	0x10002b04

1a003018 <uartInterrupt>:
   if( enable ) {
1a003018:	b341      	cbz	r1, 1a00306c <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a00301a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00301e:	009a      	lsls	r2, r3, #2
1a003020:	4b1e      	ldr	r3, [pc, #120]	; (1a00309c <uartInterrupt+0x84>)
1a003022:	4413      	add	r3, r2
1a003024:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003028:	2b00      	cmp	r3, #0
1a00302a:	db18      	blt.n	1a00305e <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00302c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003030:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003034:	22a0      	movs	r2, #160	; 0xa0
1a003036:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a00303a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00303e:	0082      	lsls	r2, r0, #2
1a003040:	4b16      	ldr	r3, [pc, #88]	; (1a00309c <uartInterrupt+0x84>)
1a003042:	4413      	add	r3, r2
1a003044:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003048:	2b00      	cmp	r3, #0
1a00304a:	db25      	blt.n	1a003098 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00304c:	f003 011f 	and.w	r1, r3, #31
1a003050:	095b      	lsrs	r3, r3, #5
1a003052:	2201      	movs	r2, #1
1a003054:	408a      	lsls	r2, r1
1a003056:	4912      	ldr	r1, [pc, #72]	; (1a0030a0 <uartInterrupt+0x88>)
1a003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00305c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00305e:	f003 030f 	and.w	r3, r3, #15
1a003062:	4a10      	ldr	r2, [pc, #64]	; (1a0030a4 <uartInterrupt+0x8c>)
1a003064:	441a      	add	r2, r3
1a003066:	23a0      	movs	r3, #160	; 0xa0
1a003068:	7613      	strb	r3, [r2, #24]
1a00306a:	e7e6      	b.n	1a00303a <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a00306c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003070:	0082      	lsls	r2, r0, #2
1a003072:	4b0a      	ldr	r3, [pc, #40]	; (1a00309c <uartInterrupt+0x84>)
1a003074:	4413      	add	r3, r2
1a003076:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00307a:	2b00      	cmp	r3, #0
1a00307c:	db0c      	blt.n	1a003098 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00307e:	f003 011f 	and.w	r1, r3, #31
1a003082:	095b      	lsrs	r3, r3, #5
1a003084:	2201      	movs	r2, #1
1a003086:	408a      	lsls	r2, r1
1a003088:	3320      	adds	r3, #32
1a00308a:	4905      	ldr	r1, [pc, #20]	; (1a0030a0 <uartInterrupt+0x88>)
1a00308c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a003090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a003094:	f3bf 8f6f 	isb	sy
}
1a003098:	4770      	bx	lr
1a00309a:	bf00      	nop
1a00309c:	1a00497c 	.word	0x1a00497c
1a0030a0:	e000e100 	.word	0xe000e100
1a0030a4:	e000ecfc 	.word	0xe000ecfc

1a0030a8 <uartCallbackSet>:
   switch(event){
1a0030a8:	b111      	cbz	r1, 1a0030b0 <uartCallbackSet+0x8>
1a0030aa:	2901      	cmp	r1, #1
1a0030ac:	d01d      	beq.n	1a0030ea <uartCallbackSet+0x42>
1a0030ae:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a0030b0:	b182      	cbz	r2, 1a0030d4 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0030b2:	2801      	cmp	r0, #1
1a0030b4:	d90f      	bls.n	1a0030d6 <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0030b6:	1ec3      	subs	r3, r0, #3
1a0030b8:	b2db      	uxtb	r3, r3
1a0030ba:	2b01      	cmp	r3, #1
1a0030bc:	d90e      	bls.n	1a0030dc <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a0030be:	2805      	cmp	r0, #5
1a0030c0:	d00f      	beq.n	1a0030e2 <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0030c2:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0030c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0030c8:	0082      	lsls	r2, r0, #2
1a0030ca:	4913      	ldr	r1, [pc, #76]	; (1a003118 <uartCallbackSet+0x70>)
1a0030cc:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a0030ce:	6851      	ldr	r1, [r2, #4]
1a0030d0:	430b      	orrs	r3, r1
1a0030d2:	6053      	str	r3, [r2, #4]
}
1a0030d4:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a0030d6:	4b11      	ldr	r3, [pc, #68]	; (1a00311c <uartCallbackSet+0x74>)
1a0030d8:	601a      	str	r2, [r3, #0]
1a0030da:	e7ec      	b.n	1a0030b6 <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a0030dc:	4b10      	ldr	r3, [pc, #64]	; (1a003120 <uartCallbackSet+0x78>)
1a0030de:	601a      	str	r2, [r3, #0]
1a0030e0:	e7ed      	b.n	1a0030be <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a0030e2:	4b10      	ldr	r3, [pc, #64]	; (1a003124 <uartCallbackSet+0x7c>)
1a0030e4:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0030e6:	2305      	movs	r3, #5
1a0030e8:	e7ec      	b.n	1a0030c4 <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a0030ea:	2a00      	cmp	r2, #0
1a0030ec:	d0f2      	beq.n	1a0030d4 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0030ee:	2801      	cmp	r0, #1
1a0030f0:	d907      	bls.n	1a003102 <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0030f2:	1ec3      	subs	r3, r0, #3
1a0030f4:	b2db      	uxtb	r3, r3
1a0030f6:	2b01      	cmp	r3, #1
1a0030f8:	d906      	bls.n	1a003108 <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a0030fa:	2805      	cmp	r0, #5
1a0030fc:	d007      	beq.n	1a00310e <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a0030fe:	2302      	movs	r3, #2
1a003100:	e7e0      	b.n	1a0030c4 <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a003102:	4b09      	ldr	r3, [pc, #36]	; (1a003128 <uartCallbackSet+0x80>)
1a003104:	601a      	str	r2, [r3, #0]
1a003106:	e7f4      	b.n	1a0030f2 <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a003108:	4b08      	ldr	r3, [pc, #32]	; (1a00312c <uartCallbackSet+0x84>)
1a00310a:	601a      	str	r2, [r3, #0]
1a00310c:	e7f5      	b.n	1a0030fa <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a00310e:	4b08      	ldr	r3, [pc, #32]	; (1a003130 <uartCallbackSet+0x88>)
1a003110:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a003112:	2302      	movs	r3, #2
1a003114:	e7d6      	b.n	1a0030c4 <uartCallbackSet+0x1c>
1a003116:	bf00      	nop
1a003118:	1a00497c 	.word	0x1a00497c
1a00311c:	10002af0 	.word	0x10002af0
1a003120:	10002af4 	.word	0x10002af4
1a003124:	10002af8 	.word	0x10002af8
1a003128:	10002afc 	.word	0x10002afc
1a00312c:	10002b00 	.word	0x10002b00
1a003130:	10002b04 	.word	0x10002b04

1a003134 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003134:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003138:	0083      	lsls	r3, r0, #2
1a00313a:	4a03      	ldr	r2, [pc, #12]	; (1a003148 <uartTxReady+0x14>)
1a00313c:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00313e:	6958      	ldr	r0, [r3, #20]
}
1a003140:	f000 0020 	and.w	r0, r0, #32
1a003144:	4770      	bx	lr
1a003146:	bf00      	nop
1a003148:	1a00497c 	.word	0x1a00497c

1a00314c <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00314c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003150:	0083      	lsls	r3, r0, #2
1a003152:	4a02      	ldr	r2, [pc, #8]	; (1a00315c <uartRxRead+0x10>)
1a003154:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003156:	6818      	ldr	r0, [r3, #0]
}
1a003158:	b2c0      	uxtb	r0, r0
1a00315a:	4770      	bx	lr
1a00315c:	1a00497c 	.word	0x1a00497c

1a003160 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003160:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003164:	0083      	lsls	r3, r0, #2
1a003166:	4a02      	ldr	r2, [pc, #8]	; (1a003170 <uartTxWrite+0x10>)
1a003168:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00316a:	6019      	str	r1, [r3, #0]
}
1a00316c:	4770      	bx	lr
1a00316e:	bf00      	nop
1a003170:	1a00497c 	.word	0x1a00497c

1a003174 <uartInit>:
{
1a003174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003178:	4680      	mov	r8, r0
1a00317a:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00317c:	4c19      	ldr	r4, [pc, #100]	; (1a0031e4 <uartInit+0x70>)
1a00317e:	0045      	lsls	r5, r0, #1
1a003180:	182a      	adds	r2, r5, r0
1a003182:	0093      	lsls	r3, r2, #2
1a003184:	18e6      	adds	r6, r4, r3
1a003186:	58e7      	ldr	r7, [r4, r3]
1a003188:	4638      	mov	r0, r7
1a00318a:	f7ff f991 	bl	1a0024b0 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00318e:	4649      	mov	r1, r9
1a003190:	4638      	mov	r0, r7
1a003192:	f7ff f9b7 	bl	1a002504 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003196:	2307      	movs	r3, #7
1a003198:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00319a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00319c:	2301      	movs	r3, #1
1a00319e:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0031a0:	7930      	ldrb	r0, [r6, #4]
1a0031a2:	7973      	ldrb	r3, [r6, #5]
1a0031a4:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0031a6:	f042 0218 	orr.w	r2, r2, #24
1a0031aa:	490f      	ldr	r1, [pc, #60]	; (1a0031e8 <uartInit+0x74>)
1a0031ac:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0031b4:	79f0      	ldrb	r0, [r6, #7]
1a0031b6:	7a33      	ldrb	r3, [r6, #8]
1a0031b8:	7a72      	ldrb	r2, [r6, #9]
1a0031ba:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0031be:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a0031c6:	f1b8 0f01 	cmp.w	r8, #1
1a0031ca:	d001      	beq.n	1a0031d0 <uartInit+0x5c>
}
1a0031cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0031d0:	4a06      	ldr	r2, [pc, #24]	; (1a0031ec <uartInit+0x78>)
1a0031d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0031d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0031d8:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0031da:	221a      	movs	r2, #26
1a0031dc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0031e0:	e7f4      	b.n	1a0031cc <uartInit+0x58>
1a0031e2:	bf00      	nop
1a0031e4:	1a00497c 	.word	0x1a00497c
1a0031e8:	40086000 	.word	0x40086000
1a0031ec:	40081000 	.word	0x40081000

1a0031f0 <uartWriteByte>:
{
1a0031f0:	b538      	push	{r3, r4, r5, lr}
1a0031f2:	4604      	mov	r4, r0
1a0031f4:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a0031f6:	4620      	mov	r0, r4
1a0031f8:	f7ff ff9c 	bl	1a003134 <uartTxReady>
1a0031fc:	2800      	cmp	r0, #0
1a0031fe:	d0fa      	beq.n	1a0031f6 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003200:	4629      	mov	r1, r5
1a003202:	4620      	mov	r0, r4
1a003204:	f7ff ffac 	bl	1a003160 <uartTxWrite>
}
1a003208:	bd38      	pop	{r3, r4, r5, pc}

1a00320a <uartWriteString>:
{
1a00320a:	b538      	push	{r3, r4, r5, lr}
1a00320c:	4605      	mov	r5, r0
1a00320e:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003210:	e003      	b.n	1a00321a <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003212:	4628      	mov	r0, r5
1a003214:	f7ff ffec 	bl	1a0031f0 <uartWriteByte>
      str++;
1a003218:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a00321a:	7821      	ldrb	r1, [r4, #0]
1a00321c:	2900      	cmp	r1, #0
1a00321e:	d1f8      	bne.n	1a003212 <uartWriteString+0x8>
}
1a003220:	bd38      	pop	{r3, r4, r5, pc}

1a003222 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003222:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003224:	2003      	movs	r0, #3
1a003226:	f7ff fea5 	bl	1a002f74 <uartProcessIRQ>
}
1a00322a:	bd08      	pop	{r3, pc}

1a00322c <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a00322c:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a00322e:	2005      	movs	r0, #5
1a003230:	f7ff fea0 	bl	1a002f74 <uartProcessIRQ>
}
1a003234:	bd08      	pop	{r3, pc}
1a003236:	Address 0x000000001a003236 is out of bounds.


1a003238 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003238:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00323a:	4d0b      	ldr	r5, [pc, #44]	; (1a003268 <gpioObtainPinInit+0x30>)
1a00323c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003240:	182c      	adds	r4, r5, r0
1a003242:	5628      	ldrsb	r0, [r5, r0]
1a003244:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003246:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00324a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00324c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003250:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003252:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003256:	9b02      	ldr	r3, [sp, #8]
1a003258:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00325a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00325e:	9b03      	ldr	r3, [sp, #12]
1a003260:	701a      	strb	r2, [r3, #0]
}
1a003262:	bc30      	pop	{r4, r5}
1a003264:	4770      	bx	lr
1a003266:	bf00      	nop
1a003268:	1a0049c4 	.word	0x1a0049c4

1a00326c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00326c:	f110 0f02 	cmn.w	r0, #2
1a003270:	f000 80c7 	beq.w	1a003402 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003274:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003278:	f000 80c5 	beq.w	1a003406 <gpioInit+0x19a>
{
1a00327c:	b570      	push	{r4, r5, r6, lr}
1a00327e:	b084      	sub	sp, #16
1a003280:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003282:	2300      	movs	r3, #0
1a003284:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003288:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00328c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003290:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003294:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003298:	f10d 030b 	add.w	r3, sp, #11
1a00329c:	9301      	str	r3, [sp, #4]
1a00329e:	ab03      	add	r3, sp, #12
1a0032a0:	9300      	str	r3, [sp, #0]
1a0032a2:	f10d 030d 	add.w	r3, sp, #13
1a0032a6:	f10d 020e 	add.w	r2, sp, #14
1a0032aa:	f10d 010f 	add.w	r1, sp, #15
1a0032ae:	f7ff ffc3 	bl	1a003238 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0032b2:	2c05      	cmp	r4, #5
1a0032b4:	f200 80a9 	bhi.w	1a00340a <gpioInit+0x19e>
1a0032b8:	e8df f004 	tbb	[pc, r4]
1a0032bc:	45278109 	.word	0x45278109
1a0032c0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0032c2:	4853      	ldr	r0, [pc, #332]	; (1a003410 <gpioInit+0x1a4>)
1a0032c4:	f7ff fce8 	bl	1a002c98 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0032c8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0032ca:	b004      	add	sp, #16
1a0032cc:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0032ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0032d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0032da:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0032de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0032e2:	494c      	ldr	r1, [pc, #304]	; (1a003414 <gpioInit+0x1a8>)
1a0032e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0032e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0032ec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0032f0:	2001      	movs	r0, #1
1a0032f2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0032f6:	4c46      	ldr	r4, [pc, #280]	; (1a003410 <gpioInit+0x1a4>)
1a0032f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0032fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003300:	ea22 0201 	bic.w	r2, r2, r1
1a003304:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003308:	e7df      	b.n	1a0032ca <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00330a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00330e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003312:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003316:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00331a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00331e:	493d      	ldr	r1, [pc, #244]	; (1a003414 <gpioInit+0x1a8>)
1a003320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003324:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003328:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00332c:	2001      	movs	r0, #1
1a00332e:	fa00 f102 	lsl.w	r1, r0, r2
1a003332:	4c37      	ldr	r4, [pc, #220]	; (1a003410 <gpioInit+0x1a4>)
1a003334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003338:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00333c:	ea22 0201 	bic.w	r2, r2, r1
1a003340:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003344:	e7c1      	b.n	1a0032ca <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003346:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00334a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00334e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003352:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003356:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00335a:	492e      	ldr	r1, [pc, #184]	; (1a003414 <gpioInit+0x1a8>)
1a00335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003360:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003364:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003368:	2001      	movs	r0, #1
1a00336a:	fa00 f102 	lsl.w	r1, r0, r2
1a00336e:	4c28      	ldr	r4, [pc, #160]	; (1a003410 <gpioInit+0x1a4>)
1a003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003374:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003378:	ea22 0201 	bic.w	r2, r2, r1
1a00337c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003380:	e7a3      	b.n	1a0032ca <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003382:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003386:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00338a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00338e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003392:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003396:	491f      	ldr	r1, [pc, #124]	; (1a003414 <gpioInit+0x1a8>)
1a003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00339c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0033a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0033a4:	2001      	movs	r0, #1
1a0033a6:	fa00 f102 	lsl.w	r1, r0, r2
1a0033aa:	4c19      	ldr	r4, [pc, #100]	; (1a003410 <gpioInit+0x1a4>)
1a0033ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0033b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0033b4:	ea22 0201 	bic.w	r2, r2, r1
1a0033b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0033bc:	e785      	b.n	1a0032ca <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0033be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0033c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0033c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0033ca:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0033ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0033d2:	4910      	ldr	r1, [pc, #64]	; (1a003414 <gpioInit+0x1a8>)
1a0033d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0033d8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0033dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0033e0:	2001      	movs	r0, #1
1a0033e2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0033e6:	4b0a      	ldr	r3, [pc, #40]	; (1a003410 <gpioInit+0x1a4>)
1a0033e8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0033ec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0033f0:	4331      	orrs	r1, r6
1a0033f2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0033f6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0033f8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0033fc:	2100      	movs	r1, #0
1a0033fe:	5499      	strb	r1, [r3, r2]
1a003400:	e763      	b.n	1a0032ca <gpioInit+0x5e>
	  return FALSE;
1a003402:	2000      	movs	r0, #0
1a003404:	4770      	bx	lr
	  return FALSE;
1a003406:	2000      	movs	r0, #0
}
1a003408:	4770      	bx	lr
      ret_val = 0;
1a00340a:	2000      	movs	r0, #0
1a00340c:	e75d      	b.n	1a0032ca <gpioInit+0x5e>
1a00340e:	bf00      	nop
1a003410:	400f4000 	.word	0x400f4000
1a003414:	40086000 	.word	0x40086000

1a003418 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003418:	f110 0f02 	cmn.w	r0, #2
1a00341c:	d02d      	beq.n	1a00347a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00341e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003422:	d02c      	beq.n	1a00347e <gpioWrite+0x66>
{
1a003424:	b510      	push	{r4, lr}
1a003426:	b084      	sub	sp, #16
1a003428:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00342a:	2300      	movs	r3, #0
1a00342c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003430:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003434:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003438:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00343c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003440:	f10d 030b 	add.w	r3, sp, #11
1a003444:	9301      	str	r3, [sp, #4]
1a003446:	ab03      	add	r3, sp, #12
1a003448:	9300      	str	r3, [sp, #0]
1a00344a:	f10d 030d 	add.w	r3, sp, #13
1a00344e:	f10d 020e 	add.w	r2, sp, #14
1a003452:	f10d 010f 	add.w	r1, sp, #15
1a003456:	f7ff feef 	bl	1a003238 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00345a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00345e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003462:	1c21      	adds	r1, r4, #0
1a003464:	bf18      	it	ne
1a003466:	2101      	movne	r1, #1
1a003468:	015b      	lsls	r3, r3, #5
1a00346a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00346e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003472:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003474:	2001      	movs	r0, #1
}
1a003476:	b004      	add	sp, #16
1a003478:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00347a:	2000      	movs	r0, #0
1a00347c:	4770      	bx	lr
	  return FALSE;
1a00347e:	2000      	movs	r0, #0
}
1a003480:	4770      	bx	lr
1a003482:	Address 0x000000001a003482 is out of bounds.


1a003484 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003484:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003486:	4b04      	ldr	r3, [pc, #16]	; (1a003498 <USB0_IRQHandler+0x14>)
1a003488:	681b      	ldr	r3, [r3, #0]
1a00348a:	681b      	ldr	r3, [r3, #0]
1a00348c:	68db      	ldr	r3, [r3, #12]
1a00348e:	4a03      	ldr	r2, [pc, #12]	; (1a00349c <USB0_IRQHandler+0x18>)
1a003490:	6810      	ldr	r0, [r2, #0]
1a003492:	4798      	blx	r3
}
1a003494:	bd08      	pop	{r3, pc}
1a003496:	bf00      	nop
1a003498:	10002b60 	.word	0x10002b60
1a00349c:	10002b08 	.word	0x10002b08

1a0034a0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0034a0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0034a2:	f7ff fbef 	bl	1a002c84 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0034a6:	4b18      	ldr	r3, [pc, #96]	; (1a003508 <boardInit+0x68>)
1a0034a8:	6818      	ldr	r0, [r3, #0]
1a0034aa:	f7ff fd55 	bl	1a002f58 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0034ae:	2105      	movs	r1, #5
1a0034b0:	2000      	movs	r0, #0
1a0034b2:	f7ff fedb 	bl	1a00326c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0034b6:	2100      	movs	r1, #0
1a0034b8:	2024      	movs	r0, #36	; 0x24
1a0034ba:	f7ff fed7 	bl	1a00326c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0034be:	2100      	movs	r1, #0
1a0034c0:	2025      	movs	r0, #37	; 0x25
1a0034c2:	f7ff fed3 	bl	1a00326c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0034c6:	2100      	movs	r1, #0
1a0034c8:	2026      	movs	r0, #38	; 0x26
1a0034ca:	f7ff fecf 	bl	1a00326c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0034ce:	2100      	movs	r1, #0
1a0034d0:	2027      	movs	r0, #39	; 0x27
1a0034d2:	f7ff fecb 	bl	1a00326c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0034d6:	2101      	movs	r1, #1
1a0034d8:	2028      	movs	r0, #40	; 0x28
1a0034da:	f7ff fec7 	bl	1a00326c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0034de:	2101      	movs	r1, #1
1a0034e0:	2029      	movs	r0, #41	; 0x29
1a0034e2:	f7ff fec3 	bl	1a00326c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0034e6:	2101      	movs	r1, #1
1a0034e8:	202a      	movs	r0, #42	; 0x2a
1a0034ea:	f7ff febf 	bl	1a00326c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0034ee:	2101      	movs	r1, #1
1a0034f0:	202b      	movs	r0, #43	; 0x2b
1a0034f2:	f7ff febb 	bl	1a00326c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0034f6:	2101      	movs	r1, #1
1a0034f8:	202c      	movs	r0, #44	; 0x2c
1a0034fa:	f7ff feb7 	bl	1a00326c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0034fe:	2101      	movs	r1, #1
1a003500:	202d      	movs	r0, #45	; 0x2d
1a003502:	f7ff feb3 	bl	1a00326c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003506:	bd08      	pop	{r3, pc}
1a003508:	10002b5c 	.word	0x10002b5c

1a00350c <__aeabi_uldivmod>:
1a00350c:	b953      	cbnz	r3, 1a003524 <__aeabi_uldivmod+0x18>
1a00350e:	b94a      	cbnz	r2, 1a003524 <__aeabi_uldivmod+0x18>
1a003510:	2900      	cmp	r1, #0
1a003512:	bf08      	it	eq
1a003514:	2800      	cmpeq	r0, #0
1a003516:	bf1c      	itt	ne
1a003518:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00351c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003520:	f000 b972 	b.w	1a003808 <__aeabi_idiv0>
1a003524:	f1ad 0c08 	sub.w	ip, sp, #8
1a003528:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00352c:	f000 f806 	bl	1a00353c <__udivmoddi4>
1a003530:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003538:	b004      	add	sp, #16
1a00353a:	4770      	bx	lr

1a00353c <__udivmoddi4>:
1a00353c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003540:	9e08      	ldr	r6, [sp, #32]
1a003542:	4604      	mov	r4, r0
1a003544:	4688      	mov	r8, r1
1a003546:	2b00      	cmp	r3, #0
1a003548:	d14b      	bne.n	1a0035e2 <__udivmoddi4+0xa6>
1a00354a:	428a      	cmp	r2, r1
1a00354c:	4615      	mov	r5, r2
1a00354e:	d967      	bls.n	1a003620 <__udivmoddi4+0xe4>
1a003550:	fab2 f282 	clz	r2, r2
1a003554:	b14a      	cbz	r2, 1a00356a <__udivmoddi4+0x2e>
1a003556:	f1c2 0720 	rsb	r7, r2, #32
1a00355a:	fa01 f302 	lsl.w	r3, r1, r2
1a00355e:	fa20 f707 	lsr.w	r7, r0, r7
1a003562:	4095      	lsls	r5, r2
1a003564:	ea47 0803 	orr.w	r8, r7, r3
1a003568:	4094      	lsls	r4, r2
1a00356a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00356e:	0c23      	lsrs	r3, r4, #16
1a003570:	fbb8 f7fe 	udiv	r7, r8, lr
1a003574:	fa1f fc85 	uxth.w	ip, r5
1a003578:	fb0e 8817 	mls	r8, lr, r7, r8
1a00357c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003580:	fb07 f10c 	mul.w	r1, r7, ip
1a003584:	4299      	cmp	r1, r3
1a003586:	d909      	bls.n	1a00359c <__udivmoddi4+0x60>
1a003588:	18eb      	adds	r3, r5, r3
1a00358a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00358e:	f080 811b 	bcs.w	1a0037c8 <__udivmoddi4+0x28c>
1a003592:	4299      	cmp	r1, r3
1a003594:	f240 8118 	bls.w	1a0037c8 <__udivmoddi4+0x28c>
1a003598:	3f02      	subs	r7, #2
1a00359a:	442b      	add	r3, r5
1a00359c:	1a5b      	subs	r3, r3, r1
1a00359e:	b2a4      	uxth	r4, r4
1a0035a0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0035a4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0035a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0035ac:	fb00 fc0c 	mul.w	ip, r0, ip
1a0035b0:	45a4      	cmp	ip, r4
1a0035b2:	d909      	bls.n	1a0035c8 <__udivmoddi4+0x8c>
1a0035b4:	192c      	adds	r4, r5, r4
1a0035b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0035ba:	f080 8107 	bcs.w	1a0037cc <__udivmoddi4+0x290>
1a0035be:	45a4      	cmp	ip, r4
1a0035c0:	f240 8104 	bls.w	1a0037cc <__udivmoddi4+0x290>
1a0035c4:	3802      	subs	r0, #2
1a0035c6:	442c      	add	r4, r5
1a0035c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0035cc:	eba4 040c 	sub.w	r4, r4, ip
1a0035d0:	2700      	movs	r7, #0
1a0035d2:	b11e      	cbz	r6, 1a0035dc <__udivmoddi4+0xa0>
1a0035d4:	40d4      	lsrs	r4, r2
1a0035d6:	2300      	movs	r3, #0
1a0035d8:	e9c6 4300 	strd	r4, r3, [r6]
1a0035dc:	4639      	mov	r1, r7
1a0035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035e2:	428b      	cmp	r3, r1
1a0035e4:	d909      	bls.n	1a0035fa <__udivmoddi4+0xbe>
1a0035e6:	2e00      	cmp	r6, #0
1a0035e8:	f000 80eb 	beq.w	1a0037c2 <__udivmoddi4+0x286>
1a0035ec:	2700      	movs	r7, #0
1a0035ee:	e9c6 0100 	strd	r0, r1, [r6]
1a0035f2:	4638      	mov	r0, r7
1a0035f4:	4639      	mov	r1, r7
1a0035f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035fa:	fab3 f783 	clz	r7, r3
1a0035fe:	2f00      	cmp	r7, #0
1a003600:	d147      	bne.n	1a003692 <__udivmoddi4+0x156>
1a003602:	428b      	cmp	r3, r1
1a003604:	d302      	bcc.n	1a00360c <__udivmoddi4+0xd0>
1a003606:	4282      	cmp	r2, r0
1a003608:	f200 80fa 	bhi.w	1a003800 <__udivmoddi4+0x2c4>
1a00360c:	1a84      	subs	r4, r0, r2
1a00360e:	eb61 0303 	sbc.w	r3, r1, r3
1a003612:	2001      	movs	r0, #1
1a003614:	4698      	mov	r8, r3
1a003616:	2e00      	cmp	r6, #0
1a003618:	d0e0      	beq.n	1a0035dc <__udivmoddi4+0xa0>
1a00361a:	e9c6 4800 	strd	r4, r8, [r6]
1a00361e:	e7dd      	b.n	1a0035dc <__udivmoddi4+0xa0>
1a003620:	b902      	cbnz	r2, 1a003624 <__udivmoddi4+0xe8>
1a003622:	deff      	udf	#255	; 0xff
1a003624:	fab2 f282 	clz	r2, r2
1a003628:	2a00      	cmp	r2, #0
1a00362a:	f040 808f 	bne.w	1a00374c <__udivmoddi4+0x210>
1a00362e:	1b49      	subs	r1, r1, r5
1a003630:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003634:	fa1f f885 	uxth.w	r8, r5
1a003638:	2701      	movs	r7, #1
1a00363a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00363e:	0c23      	lsrs	r3, r4, #16
1a003640:	fb0e 111c 	mls	r1, lr, ip, r1
1a003644:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003648:	fb08 f10c 	mul.w	r1, r8, ip
1a00364c:	4299      	cmp	r1, r3
1a00364e:	d907      	bls.n	1a003660 <__udivmoddi4+0x124>
1a003650:	18eb      	adds	r3, r5, r3
1a003652:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003656:	d202      	bcs.n	1a00365e <__udivmoddi4+0x122>
1a003658:	4299      	cmp	r1, r3
1a00365a:	f200 80cd 	bhi.w	1a0037f8 <__udivmoddi4+0x2bc>
1a00365e:	4684      	mov	ip, r0
1a003660:	1a59      	subs	r1, r3, r1
1a003662:	b2a3      	uxth	r3, r4
1a003664:	fbb1 f0fe 	udiv	r0, r1, lr
1a003668:	fb0e 1410 	mls	r4, lr, r0, r1
1a00366c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003670:	fb08 f800 	mul.w	r8, r8, r0
1a003674:	45a0      	cmp	r8, r4
1a003676:	d907      	bls.n	1a003688 <__udivmoddi4+0x14c>
1a003678:	192c      	adds	r4, r5, r4
1a00367a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00367e:	d202      	bcs.n	1a003686 <__udivmoddi4+0x14a>
1a003680:	45a0      	cmp	r8, r4
1a003682:	f200 80b6 	bhi.w	1a0037f2 <__udivmoddi4+0x2b6>
1a003686:	4618      	mov	r0, r3
1a003688:	eba4 0408 	sub.w	r4, r4, r8
1a00368c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003690:	e79f      	b.n	1a0035d2 <__udivmoddi4+0x96>
1a003692:	f1c7 0c20 	rsb	ip, r7, #32
1a003696:	40bb      	lsls	r3, r7
1a003698:	fa22 fe0c 	lsr.w	lr, r2, ip
1a00369c:	ea4e 0e03 	orr.w	lr, lr, r3
1a0036a0:	fa01 f407 	lsl.w	r4, r1, r7
1a0036a4:	fa20 f50c 	lsr.w	r5, r0, ip
1a0036a8:	fa21 f30c 	lsr.w	r3, r1, ip
1a0036ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0036b0:	4325      	orrs	r5, r4
1a0036b2:	fbb3 f9f8 	udiv	r9, r3, r8
1a0036b6:	0c2c      	lsrs	r4, r5, #16
1a0036b8:	fb08 3319 	mls	r3, r8, r9, r3
1a0036bc:	fa1f fa8e 	uxth.w	sl, lr
1a0036c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0036c4:	fb09 f40a 	mul.w	r4, r9, sl
1a0036c8:	429c      	cmp	r4, r3
1a0036ca:	fa02 f207 	lsl.w	r2, r2, r7
1a0036ce:	fa00 f107 	lsl.w	r1, r0, r7
1a0036d2:	d90b      	bls.n	1a0036ec <__udivmoddi4+0x1b0>
1a0036d4:	eb1e 0303 	adds.w	r3, lr, r3
1a0036d8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0036dc:	f080 8087 	bcs.w	1a0037ee <__udivmoddi4+0x2b2>
1a0036e0:	429c      	cmp	r4, r3
1a0036e2:	f240 8084 	bls.w	1a0037ee <__udivmoddi4+0x2b2>
1a0036e6:	f1a9 0902 	sub.w	r9, r9, #2
1a0036ea:	4473      	add	r3, lr
1a0036ec:	1b1b      	subs	r3, r3, r4
1a0036ee:	b2ad      	uxth	r5, r5
1a0036f0:	fbb3 f0f8 	udiv	r0, r3, r8
1a0036f4:	fb08 3310 	mls	r3, r8, r0, r3
1a0036f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0036fc:	fb00 fa0a 	mul.w	sl, r0, sl
1a003700:	45a2      	cmp	sl, r4
1a003702:	d908      	bls.n	1a003716 <__udivmoddi4+0x1da>
1a003704:	eb1e 0404 	adds.w	r4, lr, r4
1a003708:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00370c:	d26b      	bcs.n	1a0037e6 <__udivmoddi4+0x2aa>
1a00370e:	45a2      	cmp	sl, r4
1a003710:	d969      	bls.n	1a0037e6 <__udivmoddi4+0x2aa>
1a003712:	3802      	subs	r0, #2
1a003714:	4474      	add	r4, lr
1a003716:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00371a:	fba0 8902 	umull	r8, r9, r0, r2
1a00371e:	eba4 040a 	sub.w	r4, r4, sl
1a003722:	454c      	cmp	r4, r9
1a003724:	46c2      	mov	sl, r8
1a003726:	464b      	mov	r3, r9
1a003728:	d354      	bcc.n	1a0037d4 <__udivmoddi4+0x298>
1a00372a:	d051      	beq.n	1a0037d0 <__udivmoddi4+0x294>
1a00372c:	2e00      	cmp	r6, #0
1a00372e:	d069      	beq.n	1a003804 <__udivmoddi4+0x2c8>
1a003730:	ebb1 050a 	subs.w	r5, r1, sl
1a003734:	eb64 0403 	sbc.w	r4, r4, r3
1a003738:	fa04 fc0c 	lsl.w	ip, r4, ip
1a00373c:	40fd      	lsrs	r5, r7
1a00373e:	40fc      	lsrs	r4, r7
1a003740:	ea4c 0505 	orr.w	r5, ip, r5
1a003744:	e9c6 5400 	strd	r5, r4, [r6]
1a003748:	2700      	movs	r7, #0
1a00374a:	e747      	b.n	1a0035dc <__udivmoddi4+0xa0>
1a00374c:	f1c2 0320 	rsb	r3, r2, #32
1a003750:	fa20 f703 	lsr.w	r7, r0, r3
1a003754:	4095      	lsls	r5, r2
1a003756:	fa01 f002 	lsl.w	r0, r1, r2
1a00375a:	fa21 f303 	lsr.w	r3, r1, r3
1a00375e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003762:	4338      	orrs	r0, r7
1a003764:	0c01      	lsrs	r1, r0, #16
1a003766:	fbb3 f7fe 	udiv	r7, r3, lr
1a00376a:	fa1f f885 	uxth.w	r8, r5
1a00376e:	fb0e 3317 	mls	r3, lr, r7, r3
1a003772:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003776:	fb07 f308 	mul.w	r3, r7, r8
1a00377a:	428b      	cmp	r3, r1
1a00377c:	fa04 f402 	lsl.w	r4, r4, r2
1a003780:	d907      	bls.n	1a003792 <__udivmoddi4+0x256>
1a003782:	1869      	adds	r1, r5, r1
1a003784:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003788:	d22f      	bcs.n	1a0037ea <__udivmoddi4+0x2ae>
1a00378a:	428b      	cmp	r3, r1
1a00378c:	d92d      	bls.n	1a0037ea <__udivmoddi4+0x2ae>
1a00378e:	3f02      	subs	r7, #2
1a003790:	4429      	add	r1, r5
1a003792:	1acb      	subs	r3, r1, r3
1a003794:	b281      	uxth	r1, r0
1a003796:	fbb3 f0fe 	udiv	r0, r3, lr
1a00379a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00379e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0037a2:	fb00 f308 	mul.w	r3, r0, r8
1a0037a6:	428b      	cmp	r3, r1
1a0037a8:	d907      	bls.n	1a0037ba <__udivmoddi4+0x27e>
1a0037aa:	1869      	adds	r1, r5, r1
1a0037ac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0037b0:	d217      	bcs.n	1a0037e2 <__udivmoddi4+0x2a6>
1a0037b2:	428b      	cmp	r3, r1
1a0037b4:	d915      	bls.n	1a0037e2 <__udivmoddi4+0x2a6>
1a0037b6:	3802      	subs	r0, #2
1a0037b8:	4429      	add	r1, r5
1a0037ba:	1ac9      	subs	r1, r1, r3
1a0037bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0037c0:	e73b      	b.n	1a00363a <__udivmoddi4+0xfe>
1a0037c2:	4637      	mov	r7, r6
1a0037c4:	4630      	mov	r0, r6
1a0037c6:	e709      	b.n	1a0035dc <__udivmoddi4+0xa0>
1a0037c8:	4607      	mov	r7, r0
1a0037ca:	e6e7      	b.n	1a00359c <__udivmoddi4+0x60>
1a0037cc:	4618      	mov	r0, r3
1a0037ce:	e6fb      	b.n	1a0035c8 <__udivmoddi4+0x8c>
1a0037d0:	4541      	cmp	r1, r8
1a0037d2:	d2ab      	bcs.n	1a00372c <__udivmoddi4+0x1f0>
1a0037d4:	ebb8 0a02 	subs.w	sl, r8, r2
1a0037d8:	eb69 020e 	sbc.w	r2, r9, lr
1a0037dc:	3801      	subs	r0, #1
1a0037de:	4613      	mov	r3, r2
1a0037e0:	e7a4      	b.n	1a00372c <__udivmoddi4+0x1f0>
1a0037e2:	4660      	mov	r0, ip
1a0037e4:	e7e9      	b.n	1a0037ba <__udivmoddi4+0x27e>
1a0037e6:	4618      	mov	r0, r3
1a0037e8:	e795      	b.n	1a003716 <__udivmoddi4+0x1da>
1a0037ea:	4667      	mov	r7, ip
1a0037ec:	e7d1      	b.n	1a003792 <__udivmoddi4+0x256>
1a0037ee:	4681      	mov	r9, r0
1a0037f0:	e77c      	b.n	1a0036ec <__udivmoddi4+0x1b0>
1a0037f2:	3802      	subs	r0, #2
1a0037f4:	442c      	add	r4, r5
1a0037f6:	e747      	b.n	1a003688 <__udivmoddi4+0x14c>
1a0037f8:	f1ac 0c02 	sub.w	ip, ip, #2
1a0037fc:	442b      	add	r3, r5
1a0037fe:	e72f      	b.n	1a003660 <__udivmoddi4+0x124>
1a003800:	4638      	mov	r0, r7
1a003802:	e708      	b.n	1a003616 <__udivmoddi4+0xda>
1a003804:	4637      	mov	r7, r6
1a003806:	e6e9      	b.n	1a0035dc <__udivmoddi4+0xa0>

1a003808 <__aeabi_idiv0>:
1a003808:	4770      	bx	lr
1a00380a:	bf00      	nop

1a00380c <__sflush_r>:
1a00380c:	898a      	ldrh	r2, [r1, #12]
1a00380e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003812:	4605      	mov	r5, r0
1a003814:	0710      	lsls	r0, r2, #28
1a003816:	460c      	mov	r4, r1
1a003818:	d458      	bmi.n	1a0038cc <__sflush_r+0xc0>
1a00381a:	684b      	ldr	r3, [r1, #4]
1a00381c:	2b00      	cmp	r3, #0
1a00381e:	dc05      	bgt.n	1a00382c <__sflush_r+0x20>
1a003820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003822:	2b00      	cmp	r3, #0
1a003824:	dc02      	bgt.n	1a00382c <__sflush_r+0x20>
1a003826:	2000      	movs	r0, #0
1a003828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00382c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00382e:	2e00      	cmp	r6, #0
1a003830:	d0f9      	beq.n	1a003826 <__sflush_r+0x1a>
1a003832:	2300      	movs	r3, #0
1a003834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003838:	682f      	ldr	r7, [r5, #0]
1a00383a:	6a21      	ldr	r1, [r4, #32]
1a00383c:	602b      	str	r3, [r5, #0]
1a00383e:	d032      	beq.n	1a0038a6 <__sflush_r+0x9a>
1a003840:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003842:	89a3      	ldrh	r3, [r4, #12]
1a003844:	075a      	lsls	r2, r3, #29
1a003846:	d505      	bpl.n	1a003854 <__sflush_r+0x48>
1a003848:	6863      	ldr	r3, [r4, #4]
1a00384a:	1ac0      	subs	r0, r0, r3
1a00384c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00384e:	b10b      	cbz	r3, 1a003854 <__sflush_r+0x48>
1a003850:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003852:	1ac0      	subs	r0, r0, r3
1a003854:	2300      	movs	r3, #0
1a003856:	4602      	mov	r2, r0
1a003858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00385a:	6a21      	ldr	r1, [r4, #32]
1a00385c:	4628      	mov	r0, r5
1a00385e:	47b0      	blx	r6
1a003860:	1c43      	adds	r3, r0, #1
1a003862:	89a3      	ldrh	r3, [r4, #12]
1a003864:	d106      	bne.n	1a003874 <__sflush_r+0x68>
1a003866:	6829      	ldr	r1, [r5, #0]
1a003868:	291d      	cmp	r1, #29
1a00386a:	d848      	bhi.n	1a0038fe <__sflush_r+0xf2>
1a00386c:	4a29      	ldr	r2, [pc, #164]	; (1a003914 <__sflush_r+0x108>)
1a00386e:	40ca      	lsrs	r2, r1
1a003870:	07d6      	lsls	r6, r2, #31
1a003872:	d544      	bpl.n	1a0038fe <__sflush_r+0xf2>
1a003874:	2200      	movs	r2, #0
1a003876:	6062      	str	r2, [r4, #4]
1a003878:	04d9      	lsls	r1, r3, #19
1a00387a:	6922      	ldr	r2, [r4, #16]
1a00387c:	6022      	str	r2, [r4, #0]
1a00387e:	d504      	bpl.n	1a00388a <__sflush_r+0x7e>
1a003880:	1c42      	adds	r2, r0, #1
1a003882:	d101      	bne.n	1a003888 <__sflush_r+0x7c>
1a003884:	682b      	ldr	r3, [r5, #0]
1a003886:	b903      	cbnz	r3, 1a00388a <__sflush_r+0x7e>
1a003888:	6560      	str	r0, [r4, #84]	; 0x54
1a00388a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00388c:	602f      	str	r7, [r5, #0]
1a00388e:	2900      	cmp	r1, #0
1a003890:	d0c9      	beq.n	1a003826 <__sflush_r+0x1a>
1a003892:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003896:	4299      	cmp	r1, r3
1a003898:	d002      	beq.n	1a0038a0 <__sflush_r+0x94>
1a00389a:	4628      	mov	r0, r5
1a00389c:	f000 f968 	bl	1a003b70 <_free_r>
1a0038a0:	2000      	movs	r0, #0
1a0038a2:	6360      	str	r0, [r4, #52]	; 0x34
1a0038a4:	e7c0      	b.n	1a003828 <__sflush_r+0x1c>
1a0038a6:	2301      	movs	r3, #1
1a0038a8:	4628      	mov	r0, r5
1a0038aa:	47b0      	blx	r6
1a0038ac:	1c41      	adds	r1, r0, #1
1a0038ae:	d1c8      	bne.n	1a003842 <__sflush_r+0x36>
1a0038b0:	682b      	ldr	r3, [r5, #0]
1a0038b2:	2b00      	cmp	r3, #0
1a0038b4:	d0c5      	beq.n	1a003842 <__sflush_r+0x36>
1a0038b6:	2b1d      	cmp	r3, #29
1a0038b8:	d001      	beq.n	1a0038be <__sflush_r+0xb2>
1a0038ba:	2b16      	cmp	r3, #22
1a0038bc:	d101      	bne.n	1a0038c2 <__sflush_r+0xb6>
1a0038be:	602f      	str	r7, [r5, #0]
1a0038c0:	e7b1      	b.n	1a003826 <__sflush_r+0x1a>
1a0038c2:	89a3      	ldrh	r3, [r4, #12]
1a0038c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0038c8:	81a3      	strh	r3, [r4, #12]
1a0038ca:	e7ad      	b.n	1a003828 <__sflush_r+0x1c>
1a0038cc:	690f      	ldr	r7, [r1, #16]
1a0038ce:	2f00      	cmp	r7, #0
1a0038d0:	d0a9      	beq.n	1a003826 <__sflush_r+0x1a>
1a0038d2:	0793      	lsls	r3, r2, #30
1a0038d4:	680e      	ldr	r6, [r1, #0]
1a0038d6:	bf08      	it	eq
1a0038d8:	694b      	ldreq	r3, [r1, #20]
1a0038da:	600f      	str	r7, [r1, #0]
1a0038dc:	bf18      	it	ne
1a0038de:	2300      	movne	r3, #0
1a0038e0:	eba6 0807 	sub.w	r8, r6, r7
1a0038e4:	608b      	str	r3, [r1, #8]
1a0038e6:	f1b8 0f00 	cmp.w	r8, #0
1a0038ea:	dd9c      	ble.n	1a003826 <__sflush_r+0x1a>
1a0038ec:	4643      	mov	r3, r8
1a0038ee:	463a      	mov	r2, r7
1a0038f0:	6a21      	ldr	r1, [r4, #32]
1a0038f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0038f4:	4628      	mov	r0, r5
1a0038f6:	47b0      	blx	r6
1a0038f8:	2800      	cmp	r0, #0
1a0038fa:	dc06      	bgt.n	1a00390a <__sflush_r+0xfe>
1a0038fc:	89a3      	ldrh	r3, [r4, #12]
1a0038fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003902:	81a3      	strh	r3, [r4, #12]
1a003904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003908:	e78e      	b.n	1a003828 <__sflush_r+0x1c>
1a00390a:	4407      	add	r7, r0
1a00390c:	eba8 0800 	sub.w	r8, r8, r0
1a003910:	e7e9      	b.n	1a0038e6 <__sflush_r+0xda>
1a003912:	bf00      	nop
1a003914:	20400001 	.word	0x20400001

1a003918 <_fflush_r>:
1a003918:	b538      	push	{r3, r4, r5, lr}
1a00391a:	690b      	ldr	r3, [r1, #16]
1a00391c:	4605      	mov	r5, r0
1a00391e:	460c      	mov	r4, r1
1a003920:	b1db      	cbz	r3, 1a00395a <_fflush_r+0x42>
1a003922:	b118      	cbz	r0, 1a00392c <_fflush_r+0x14>
1a003924:	6983      	ldr	r3, [r0, #24]
1a003926:	b90b      	cbnz	r3, 1a00392c <_fflush_r+0x14>
1a003928:	f000 f860 	bl	1a0039ec <__sinit>
1a00392c:	4b0c      	ldr	r3, [pc, #48]	; (1a003960 <_fflush_r+0x48>)
1a00392e:	429c      	cmp	r4, r3
1a003930:	d109      	bne.n	1a003946 <_fflush_r+0x2e>
1a003932:	686c      	ldr	r4, [r5, #4]
1a003934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003938:	b17b      	cbz	r3, 1a00395a <_fflush_r+0x42>
1a00393a:	4621      	mov	r1, r4
1a00393c:	4628      	mov	r0, r5
1a00393e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003942:	f7ff bf63 	b.w	1a00380c <__sflush_r>
1a003946:	4b07      	ldr	r3, [pc, #28]	; (1a003964 <_fflush_r+0x4c>)
1a003948:	429c      	cmp	r4, r3
1a00394a:	d101      	bne.n	1a003950 <_fflush_r+0x38>
1a00394c:	68ac      	ldr	r4, [r5, #8]
1a00394e:	e7f1      	b.n	1a003934 <_fflush_r+0x1c>
1a003950:	4b05      	ldr	r3, [pc, #20]	; (1a003968 <_fflush_r+0x50>)
1a003952:	429c      	cmp	r4, r3
1a003954:	bf08      	it	eq
1a003956:	68ec      	ldreq	r4, [r5, #12]
1a003958:	e7ec      	b.n	1a003934 <_fflush_r+0x1c>
1a00395a:	2000      	movs	r0, #0
1a00395c:	bd38      	pop	{r3, r4, r5, pc}
1a00395e:	bf00      	nop
1a003960:	1a004acc 	.word	0x1a004acc
1a003964:	1a004aec 	.word	0x1a004aec
1a003968:	1a004aac 	.word	0x1a004aac

1a00396c <std>:
1a00396c:	2300      	movs	r3, #0
1a00396e:	b510      	push	{r4, lr}
1a003970:	4604      	mov	r4, r0
1a003972:	e9c0 3300 	strd	r3, r3, [r0]
1a003976:	6083      	str	r3, [r0, #8]
1a003978:	8181      	strh	r1, [r0, #12]
1a00397a:	6643      	str	r3, [r0, #100]	; 0x64
1a00397c:	81c2      	strh	r2, [r0, #14]
1a00397e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003982:	6183      	str	r3, [r0, #24]
1a003984:	4619      	mov	r1, r3
1a003986:	2208      	movs	r2, #8
1a003988:	305c      	adds	r0, #92	; 0x5c
1a00398a:	f000 f8e8 	bl	1a003b5e <memset>
1a00398e:	4b05      	ldr	r3, [pc, #20]	; (1a0039a4 <std+0x38>)
1a003990:	6263      	str	r3, [r4, #36]	; 0x24
1a003992:	4b05      	ldr	r3, [pc, #20]	; (1a0039a8 <std+0x3c>)
1a003994:	62a3      	str	r3, [r4, #40]	; 0x28
1a003996:	4b05      	ldr	r3, [pc, #20]	; (1a0039ac <std+0x40>)
1a003998:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00399a:	4b05      	ldr	r3, [pc, #20]	; (1a0039b0 <std+0x44>)
1a00399c:	6224      	str	r4, [r4, #32]
1a00399e:	6323      	str	r3, [r4, #48]	; 0x30
1a0039a0:	bd10      	pop	{r4, pc}
1a0039a2:	bf00      	nop
1a0039a4:	1a003db9 	.word	0x1a003db9
1a0039a8:	1a003ddb 	.word	0x1a003ddb
1a0039ac:	1a003e13 	.word	0x1a003e13
1a0039b0:	1a003e37 	.word	0x1a003e37

1a0039b4 <_cleanup_r>:
1a0039b4:	4901      	ldr	r1, [pc, #4]	; (1a0039bc <_cleanup_r+0x8>)
1a0039b6:	f000 b885 	b.w	1a003ac4 <_fwalk_reent>
1a0039ba:	bf00      	nop
1a0039bc:	1a003919 	.word	0x1a003919

1a0039c0 <__sfmoreglue>:
1a0039c0:	b570      	push	{r4, r5, r6, lr}
1a0039c2:	1e4a      	subs	r2, r1, #1
1a0039c4:	2568      	movs	r5, #104	; 0x68
1a0039c6:	4355      	muls	r5, r2
1a0039c8:	460e      	mov	r6, r1
1a0039ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0039ce:	f000 f91d 	bl	1a003c0c <_malloc_r>
1a0039d2:	4604      	mov	r4, r0
1a0039d4:	b140      	cbz	r0, 1a0039e8 <__sfmoreglue+0x28>
1a0039d6:	2100      	movs	r1, #0
1a0039d8:	e9c0 1600 	strd	r1, r6, [r0]
1a0039dc:	300c      	adds	r0, #12
1a0039de:	60a0      	str	r0, [r4, #8]
1a0039e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0039e4:	f000 f8bb 	bl	1a003b5e <memset>
1a0039e8:	4620      	mov	r0, r4
1a0039ea:	bd70      	pop	{r4, r5, r6, pc}

1a0039ec <__sinit>:
1a0039ec:	6983      	ldr	r3, [r0, #24]
1a0039ee:	b510      	push	{r4, lr}
1a0039f0:	4604      	mov	r4, r0
1a0039f2:	bb33      	cbnz	r3, 1a003a42 <__sinit+0x56>
1a0039f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a0039f8:	6503      	str	r3, [r0, #80]	; 0x50
1a0039fa:	4b12      	ldr	r3, [pc, #72]	; (1a003a44 <__sinit+0x58>)
1a0039fc:	4a12      	ldr	r2, [pc, #72]	; (1a003a48 <__sinit+0x5c>)
1a0039fe:	681b      	ldr	r3, [r3, #0]
1a003a00:	6282      	str	r2, [r0, #40]	; 0x28
1a003a02:	4298      	cmp	r0, r3
1a003a04:	bf04      	itt	eq
1a003a06:	2301      	moveq	r3, #1
1a003a08:	6183      	streq	r3, [r0, #24]
1a003a0a:	f000 f81f 	bl	1a003a4c <__sfp>
1a003a0e:	6060      	str	r0, [r4, #4]
1a003a10:	4620      	mov	r0, r4
1a003a12:	f000 f81b 	bl	1a003a4c <__sfp>
1a003a16:	60a0      	str	r0, [r4, #8]
1a003a18:	4620      	mov	r0, r4
1a003a1a:	f000 f817 	bl	1a003a4c <__sfp>
1a003a1e:	2200      	movs	r2, #0
1a003a20:	60e0      	str	r0, [r4, #12]
1a003a22:	2104      	movs	r1, #4
1a003a24:	6860      	ldr	r0, [r4, #4]
1a003a26:	f7ff ffa1 	bl	1a00396c <std>
1a003a2a:	2201      	movs	r2, #1
1a003a2c:	2109      	movs	r1, #9
1a003a2e:	68a0      	ldr	r0, [r4, #8]
1a003a30:	f7ff ff9c 	bl	1a00396c <std>
1a003a34:	2202      	movs	r2, #2
1a003a36:	2112      	movs	r1, #18
1a003a38:	68e0      	ldr	r0, [r4, #12]
1a003a3a:	f7ff ff97 	bl	1a00396c <std>
1a003a3e:	2301      	movs	r3, #1
1a003a40:	61a3      	str	r3, [r4, #24]
1a003a42:	bd10      	pop	{r4, pc}
1a003a44:	1a004b0c 	.word	0x1a004b0c
1a003a48:	1a0039b5 	.word	0x1a0039b5

1a003a4c <__sfp>:
1a003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003a4e:	4b1b      	ldr	r3, [pc, #108]	; (1a003abc <__sfp+0x70>)
1a003a50:	681e      	ldr	r6, [r3, #0]
1a003a52:	69b3      	ldr	r3, [r6, #24]
1a003a54:	4607      	mov	r7, r0
1a003a56:	b913      	cbnz	r3, 1a003a5e <__sfp+0x12>
1a003a58:	4630      	mov	r0, r6
1a003a5a:	f7ff ffc7 	bl	1a0039ec <__sinit>
1a003a5e:	3648      	adds	r6, #72	; 0x48
1a003a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003a64:	3b01      	subs	r3, #1
1a003a66:	d503      	bpl.n	1a003a70 <__sfp+0x24>
1a003a68:	6833      	ldr	r3, [r6, #0]
1a003a6a:	b133      	cbz	r3, 1a003a7a <__sfp+0x2e>
1a003a6c:	6836      	ldr	r6, [r6, #0]
1a003a6e:	e7f7      	b.n	1a003a60 <__sfp+0x14>
1a003a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003a74:	b16d      	cbz	r5, 1a003a92 <__sfp+0x46>
1a003a76:	3468      	adds	r4, #104	; 0x68
1a003a78:	e7f4      	b.n	1a003a64 <__sfp+0x18>
1a003a7a:	2104      	movs	r1, #4
1a003a7c:	4638      	mov	r0, r7
1a003a7e:	f7ff ff9f 	bl	1a0039c0 <__sfmoreglue>
1a003a82:	6030      	str	r0, [r6, #0]
1a003a84:	2800      	cmp	r0, #0
1a003a86:	d1f1      	bne.n	1a003a6c <__sfp+0x20>
1a003a88:	230c      	movs	r3, #12
1a003a8a:	603b      	str	r3, [r7, #0]
1a003a8c:	4604      	mov	r4, r0
1a003a8e:	4620      	mov	r0, r4
1a003a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003a92:	4b0b      	ldr	r3, [pc, #44]	; (1a003ac0 <__sfp+0x74>)
1a003a94:	6665      	str	r5, [r4, #100]	; 0x64
1a003a96:	e9c4 5500 	strd	r5, r5, [r4]
1a003a9a:	60a5      	str	r5, [r4, #8]
1a003a9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a003aa0:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a003aa4:	2208      	movs	r2, #8
1a003aa6:	4629      	mov	r1, r5
1a003aa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003aac:	f000 f857 	bl	1a003b5e <memset>
1a003ab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003ab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003ab8:	e7e9      	b.n	1a003a8e <__sfp+0x42>
1a003aba:	bf00      	nop
1a003abc:	1a004b0c 	.word	0x1a004b0c
1a003ac0:	ffff0001 	.word	0xffff0001

1a003ac4 <_fwalk_reent>:
1a003ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ac8:	4680      	mov	r8, r0
1a003aca:	4689      	mov	r9, r1
1a003acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003ad0:	2600      	movs	r6, #0
1a003ad2:	b914      	cbnz	r4, 1a003ada <_fwalk_reent+0x16>
1a003ad4:	4630      	mov	r0, r6
1a003ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003ada:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003ade:	3f01      	subs	r7, #1
1a003ae0:	d501      	bpl.n	1a003ae6 <_fwalk_reent+0x22>
1a003ae2:	6824      	ldr	r4, [r4, #0]
1a003ae4:	e7f5      	b.n	1a003ad2 <_fwalk_reent+0xe>
1a003ae6:	89ab      	ldrh	r3, [r5, #12]
1a003ae8:	2b01      	cmp	r3, #1
1a003aea:	d907      	bls.n	1a003afc <_fwalk_reent+0x38>
1a003aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003af0:	3301      	adds	r3, #1
1a003af2:	d003      	beq.n	1a003afc <_fwalk_reent+0x38>
1a003af4:	4629      	mov	r1, r5
1a003af6:	4640      	mov	r0, r8
1a003af8:	47c8      	blx	r9
1a003afa:	4306      	orrs	r6, r0
1a003afc:	3568      	adds	r5, #104	; 0x68
1a003afe:	e7ee      	b.n	1a003ade <_fwalk_reent+0x1a>

1a003b00 <__libc_init_array>:
1a003b00:	b570      	push	{r4, r5, r6, lr}
1a003b02:	4e0d      	ldr	r6, [pc, #52]	; (1a003b38 <__libc_init_array+0x38>)
1a003b04:	4c0d      	ldr	r4, [pc, #52]	; (1a003b3c <__libc_init_array+0x3c>)
1a003b06:	1ba4      	subs	r4, r4, r6
1a003b08:	10a4      	asrs	r4, r4, #2
1a003b0a:	2500      	movs	r5, #0
1a003b0c:	42a5      	cmp	r5, r4
1a003b0e:	d109      	bne.n	1a003b24 <__libc_init_array+0x24>
1a003b10:	4e0b      	ldr	r6, [pc, #44]	; (1a003b40 <__libc_init_array+0x40>)
1a003b12:	4c0c      	ldr	r4, [pc, #48]	; (1a003b44 <__libc_init_array+0x44>)
1a003b14:	f7fc fcdb 	bl	1a0004ce <_init>
1a003b18:	1ba4      	subs	r4, r4, r6
1a003b1a:	10a4      	asrs	r4, r4, #2
1a003b1c:	2500      	movs	r5, #0
1a003b1e:	42a5      	cmp	r5, r4
1a003b20:	d105      	bne.n	1a003b2e <__libc_init_array+0x2e>
1a003b22:	bd70      	pop	{r4, r5, r6, pc}
1a003b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003b28:	4798      	blx	r3
1a003b2a:	3501      	adds	r5, #1
1a003b2c:	e7ee      	b.n	1a003b0c <__libc_init_array+0xc>
1a003b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003b32:	4798      	blx	r3
1a003b34:	3501      	adds	r5, #1
1a003b36:	e7f2      	b.n	1a003b1e <__libc_init_array+0x1e>
1a003b38:	1a004b44 	.word	0x1a004b44
1a003b3c:	1a004b44 	.word	0x1a004b44
1a003b40:	1a004b44 	.word	0x1a004b44
1a003b44:	1a004b48 	.word	0x1a004b48

1a003b48 <memcpy>:
1a003b48:	b510      	push	{r4, lr}
1a003b4a:	1e43      	subs	r3, r0, #1
1a003b4c:	440a      	add	r2, r1
1a003b4e:	4291      	cmp	r1, r2
1a003b50:	d100      	bne.n	1a003b54 <memcpy+0xc>
1a003b52:	bd10      	pop	{r4, pc}
1a003b54:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003b58:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003b5c:	e7f7      	b.n	1a003b4e <memcpy+0x6>

1a003b5e <memset>:
1a003b5e:	4402      	add	r2, r0
1a003b60:	4603      	mov	r3, r0
1a003b62:	4293      	cmp	r3, r2
1a003b64:	d100      	bne.n	1a003b68 <memset+0xa>
1a003b66:	4770      	bx	lr
1a003b68:	f803 1b01 	strb.w	r1, [r3], #1
1a003b6c:	e7f9      	b.n	1a003b62 <memset+0x4>
1a003b6e:	Address 0x000000001a003b6e is out of bounds.


1a003b70 <_free_r>:
1a003b70:	b538      	push	{r3, r4, r5, lr}
1a003b72:	4605      	mov	r5, r0
1a003b74:	2900      	cmp	r1, #0
1a003b76:	d045      	beq.n	1a003c04 <_free_r+0x94>
1a003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003b7c:	1f0c      	subs	r4, r1, #4
1a003b7e:	2b00      	cmp	r3, #0
1a003b80:	bfb8      	it	lt
1a003b82:	18e4      	addlt	r4, r4, r3
1a003b84:	f000 fa80 	bl	1a004088 <__malloc_lock>
1a003b88:	4a1f      	ldr	r2, [pc, #124]	; (1a003c08 <_free_r+0x98>)
1a003b8a:	6813      	ldr	r3, [r2, #0]
1a003b8c:	4610      	mov	r0, r2
1a003b8e:	b933      	cbnz	r3, 1a003b9e <_free_r+0x2e>
1a003b90:	6063      	str	r3, [r4, #4]
1a003b92:	6014      	str	r4, [r2, #0]
1a003b94:	4628      	mov	r0, r5
1a003b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003b9a:	f000 ba76 	b.w	1a00408a <__malloc_unlock>
1a003b9e:	42a3      	cmp	r3, r4
1a003ba0:	d90c      	bls.n	1a003bbc <_free_r+0x4c>
1a003ba2:	6821      	ldr	r1, [r4, #0]
1a003ba4:	1862      	adds	r2, r4, r1
1a003ba6:	4293      	cmp	r3, r2
1a003ba8:	bf04      	itt	eq
1a003baa:	681a      	ldreq	r2, [r3, #0]
1a003bac:	685b      	ldreq	r3, [r3, #4]
1a003bae:	6063      	str	r3, [r4, #4]
1a003bb0:	bf04      	itt	eq
1a003bb2:	1852      	addeq	r2, r2, r1
1a003bb4:	6022      	streq	r2, [r4, #0]
1a003bb6:	6004      	str	r4, [r0, #0]
1a003bb8:	e7ec      	b.n	1a003b94 <_free_r+0x24>
1a003bba:	4613      	mov	r3, r2
1a003bbc:	685a      	ldr	r2, [r3, #4]
1a003bbe:	b10a      	cbz	r2, 1a003bc4 <_free_r+0x54>
1a003bc0:	42a2      	cmp	r2, r4
1a003bc2:	d9fa      	bls.n	1a003bba <_free_r+0x4a>
1a003bc4:	6819      	ldr	r1, [r3, #0]
1a003bc6:	1858      	adds	r0, r3, r1
1a003bc8:	42a0      	cmp	r0, r4
1a003bca:	d10b      	bne.n	1a003be4 <_free_r+0x74>
1a003bcc:	6820      	ldr	r0, [r4, #0]
1a003bce:	4401      	add	r1, r0
1a003bd0:	1858      	adds	r0, r3, r1
1a003bd2:	4282      	cmp	r2, r0
1a003bd4:	6019      	str	r1, [r3, #0]
1a003bd6:	d1dd      	bne.n	1a003b94 <_free_r+0x24>
1a003bd8:	6810      	ldr	r0, [r2, #0]
1a003bda:	6852      	ldr	r2, [r2, #4]
1a003bdc:	605a      	str	r2, [r3, #4]
1a003bde:	4401      	add	r1, r0
1a003be0:	6019      	str	r1, [r3, #0]
1a003be2:	e7d7      	b.n	1a003b94 <_free_r+0x24>
1a003be4:	d902      	bls.n	1a003bec <_free_r+0x7c>
1a003be6:	230c      	movs	r3, #12
1a003be8:	602b      	str	r3, [r5, #0]
1a003bea:	e7d3      	b.n	1a003b94 <_free_r+0x24>
1a003bec:	6820      	ldr	r0, [r4, #0]
1a003bee:	1821      	adds	r1, r4, r0
1a003bf0:	428a      	cmp	r2, r1
1a003bf2:	bf04      	itt	eq
1a003bf4:	6811      	ldreq	r1, [r2, #0]
1a003bf6:	6852      	ldreq	r2, [r2, #4]
1a003bf8:	6062      	str	r2, [r4, #4]
1a003bfa:	bf04      	itt	eq
1a003bfc:	1809      	addeq	r1, r1, r0
1a003bfe:	6021      	streq	r1, [r4, #0]
1a003c00:	605c      	str	r4, [r3, #4]
1a003c02:	e7c7      	b.n	1a003b94 <_free_r+0x24>
1a003c04:	bd38      	pop	{r3, r4, r5, pc}
1a003c06:	bf00      	nop
1a003c08:	10002b0c 	.word	0x10002b0c

1a003c0c <_malloc_r>:
1a003c0c:	b570      	push	{r4, r5, r6, lr}
1a003c0e:	1ccd      	adds	r5, r1, #3
1a003c10:	f025 0503 	bic.w	r5, r5, #3
1a003c14:	3508      	adds	r5, #8
1a003c16:	2d0c      	cmp	r5, #12
1a003c18:	bf38      	it	cc
1a003c1a:	250c      	movcc	r5, #12
1a003c1c:	2d00      	cmp	r5, #0
1a003c1e:	4606      	mov	r6, r0
1a003c20:	db01      	blt.n	1a003c26 <_malloc_r+0x1a>
1a003c22:	42a9      	cmp	r1, r5
1a003c24:	d903      	bls.n	1a003c2e <_malloc_r+0x22>
1a003c26:	230c      	movs	r3, #12
1a003c28:	6033      	str	r3, [r6, #0]
1a003c2a:	2000      	movs	r0, #0
1a003c2c:	bd70      	pop	{r4, r5, r6, pc}
1a003c2e:	f000 fa2b 	bl	1a004088 <__malloc_lock>
1a003c32:	4a21      	ldr	r2, [pc, #132]	; (1a003cb8 <_malloc_r+0xac>)
1a003c34:	6814      	ldr	r4, [r2, #0]
1a003c36:	4621      	mov	r1, r4
1a003c38:	b991      	cbnz	r1, 1a003c60 <_malloc_r+0x54>
1a003c3a:	4c20      	ldr	r4, [pc, #128]	; (1a003cbc <_malloc_r+0xb0>)
1a003c3c:	6823      	ldr	r3, [r4, #0]
1a003c3e:	b91b      	cbnz	r3, 1a003c48 <_malloc_r+0x3c>
1a003c40:	4630      	mov	r0, r6
1a003c42:	f7fc fc99 	bl	1a000578 <_sbrk_r>
1a003c46:	6020      	str	r0, [r4, #0]
1a003c48:	4629      	mov	r1, r5
1a003c4a:	4630      	mov	r0, r6
1a003c4c:	f7fc fc94 	bl	1a000578 <_sbrk_r>
1a003c50:	1c43      	adds	r3, r0, #1
1a003c52:	d124      	bne.n	1a003c9e <_malloc_r+0x92>
1a003c54:	230c      	movs	r3, #12
1a003c56:	6033      	str	r3, [r6, #0]
1a003c58:	4630      	mov	r0, r6
1a003c5a:	f000 fa16 	bl	1a00408a <__malloc_unlock>
1a003c5e:	e7e4      	b.n	1a003c2a <_malloc_r+0x1e>
1a003c60:	680b      	ldr	r3, [r1, #0]
1a003c62:	1b5b      	subs	r3, r3, r5
1a003c64:	d418      	bmi.n	1a003c98 <_malloc_r+0x8c>
1a003c66:	2b0b      	cmp	r3, #11
1a003c68:	d90f      	bls.n	1a003c8a <_malloc_r+0x7e>
1a003c6a:	600b      	str	r3, [r1, #0]
1a003c6c:	50cd      	str	r5, [r1, r3]
1a003c6e:	18cc      	adds	r4, r1, r3
1a003c70:	4630      	mov	r0, r6
1a003c72:	f000 fa0a 	bl	1a00408a <__malloc_unlock>
1a003c76:	f104 000b 	add.w	r0, r4, #11
1a003c7a:	1d23      	adds	r3, r4, #4
1a003c7c:	f020 0007 	bic.w	r0, r0, #7
1a003c80:	1ac3      	subs	r3, r0, r3
1a003c82:	d0d3      	beq.n	1a003c2c <_malloc_r+0x20>
1a003c84:	425a      	negs	r2, r3
1a003c86:	50e2      	str	r2, [r4, r3]
1a003c88:	e7d0      	b.n	1a003c2c <_malloc_r+0x20>
1a003c8a:	428c      	cmp	r4, r1
1a003c8c:	684b      	ldr	r3, [r1, #4]
1a003c8e:	bf16      	itet	ne
1a003c90:	6063      	strne	r3, [r4, #4]
1a003c92:	6013      	streq	r3, [r2, #0]
1a003c94:	460c      	movne	r4, r1
1a003c96:	e7eb      	b.n	1a003c70 <_malloc_r+0x64>
1a003c98:	460c      	mov	r4, r1
1a003c9a:	6849      	ldr	r1, [r1, #4]
1a003c9c:	e7cc      	b.n	1a003c38 <_malloc_r+0x2c>
1a003c9e:	1cc4      	adds	r4, r0, #3
1a003ca0:	f024 0403 	bic.w	r4, r4, #3
1a003ca4:	42a0      	cmp	r0, r4
1a003ca6:	d005      	beq.n	1a003cb4 <_malloc_r+0xa8>
1a003ca8:	1a21      	subs	r1, r4, r0
1a003caa:	4630      	mov	r0, r6
1a003cac:	f7fc fc64 	bl	1a000578 <_sbrk_r>
1a003cb0:	3001      	adds	r0, #1
1a003cb2:	d0cf      	beq.n	1a003c54 <_malloc_r+0x48>
1a003cb4:	6025      	str	r5, [r4, #0]
1a003cb6:	e7db      	b.n	1a003c70 <_malloc_r+0x64>
1a003cb8:	10002b0c 	.word	0x10002b0c
1a003cbc:	10002b10 	.word	0x10002b10

1a003cc0 <iprintf>:
1a003cc0:	b40f      	push	{r0, r1, r2, r3}
1a003cc2:	4b0a      	ldr	r3, [pc, #40]	; (1a003cec <iprintf+0x2c>)
1a003cc4:	b513      	push	{r0, r1, r4, lr}
1a003cc6:	681c      	ldr	r4, [r3, #0]
1a003cc8:	b124      	cbz	r4, 1a003cd4 <iprintf+0x14>
1a003cca:	69a3      	ldr	r3, [r4, #24]
1a003ccc:	b913      	cbnz	r3, 1a003cd4 <iprintf+0x14>
1a003cce:	4620      	mov	r0, r4
1a003cd0:	f7ff fe8c 	bl	1a0039ec <__sinit>
1a003cd4:	ab05      	add	r3, sp, #20
1a003cd6:	9a04      	ldr	r2, [sp, #16]
1a003cd8:	68a1      	ldr	r1, [r4, #8]
1a003cda:	9301      	str	r3, [sp, #4]
1a003cdc:	4620      	mov	r0, r4
1a003cde:	f000 f9ff 	bl	1a0040e0 <_vfiprintf_r>
1a003ce2:	b002      	add	sp, #8
1a003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003ce8:	b004      	add	sp, #16
1a003cea:	4770      	bx	lr
1a003cec:	10000040 	.word	0x10000040

1a003cf0 <_puts_r>:
1a003cf0:	b570      	push	{r4, r5, r6, lr}
1a003cf2:	460e      	mov	r6, r1
1a003cf4:	4605      	mov	r5, r0
1a003cf6:	b118      	cbz	r0, 1a003d00 <_puts_r+0x10>
1a003cf8:	6983      	ldr	r3, [r0, #24]
1a003cfa:	b90b      	cbnz	r3, 1a003d00 <_puts_r+0x10>
1a003cfc:	f7ff fe76 	bl	1a0039ec <__sinit>
1a003d00:	69ab      	ldr	r3, [r5, #24]
1a003d02:	68ac      	ldr	r4, [r5, #8]
1a003d04:	b913      	cbnz	r3, 1a003d0c <_puts_r+0x1c>
1a003d06:	4628      	mov	r0, r5
1a003d08:	f7ff fe70 	bl	1a0039ec <__sinit>
1a003d0c:	4b23      	ldr	r3, [pc, #140]	; (1a003d9c <_puts_r+0xac>)
1a003d0e:	429c      	cmp	r4, r3
1a003d10:	d117      	bne.n	1a003d42 <_puts_r+0x52>
1a003d12:	686c      	ldr	r4, [r5, #4]
1a003d14:	89a3      	ldrh	r3, [r4, #12]
1a003d16:	071b      	lsls	r3, r3, #28
1a003d18:	d51d      	bpl.n	1a003d56 <_puts_r+0x66>
1a003d1a:	6923      	ldr	r3, [r4, #16]
1a003d1c:	b1db      	cbz	r3, 1a003d56 <_puts_r+0x66>
1a003d1e:	3e01      	subs	r6, #1
1a003d20:	68a3      	ldr	r3, [r4, #8]
1a003d22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a003d26:	3b01      	subs	r3, #1
1a003d28:	60a3      	str	r3, [r4, #8]
1a003d2a:	b9e9      	cbnz	r1, 1a003d68 <_puts_r+0x78>
1a003d2c:	2b00      	cmp	r3, #0
1a003d2e:	da2e      	bge.n	1a003d8e <_puts_r+0x9e>
1a003d30:	4622      	mov	r2, r4
1a003d32:	210a      	movs	r1, #10
1a003d34:	4628      	mov	r0, r5
1a003d36:	f000 f883 	bl	1a003e40 <__swbuf_r>
1a003d3a:	3001      	adds	r0, #1
1a003d3c:	d011      	beq.n	1a003d62 <_puts_r+0x72>
1a003d3e:	200a      	movs	r0, #10
1a003d40:	e011      	b.n	1a003d66 <_puts_r+0x76>
1a003d42:	4b17      	ldr	r3, [pc, #92]	; (1a003da0 <_puts_r+0xb0>)
1a003d44:	429c      	cmp	r4, r3
1a003d46:	d101      	bne.n	1a003d4c <_puts_r+0x5c>
1a003d48:	68ac      	ldr	r4, [r5, #8]
1a003d4a:	e7e3      	b.n	1a003d14 <_puts_r+0x24>
1a003d4c:	4b15      	ldr	r3, [pc, #84]	; (1a003da4 <_puts_r+0xb4>)
1a003d4e:	429c      	cmp	r4, r3
1a003d50:	bf08      	it	eq
1a003d52:	68ec      	ldreq	r4, [r5, #12]
1a003d54:	e7de      	b.n	1a003d14 <_puts_r+0x24>
1a003d56:	4621      	mov	r1, r4
1a003d58:	4628      	mov	r0, r5
1a003d5a:	f000 f8c3 	bl	1a003ee4 <__swsetup_r>
1a003d5e:	2800      	cmp	r0, #0
1a003d60:	d0dd      	beq.n	1a003d1e <_puts_r+0x2e>
1a003d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003d66:	bd70      	pop	{r4, r5, r6, pc}
1a003d68:	2b00      	cmp	r3, #0
1a003d6a:	da04      	bge.n	1a003d76 <_puts_r+0x86>
1a003d6c:	69a2      	ldr	r2, [r4, #24]
1a003d6e:	429a      	cmp	r2, r3
1a003d70:	dc06      	bgt.n	1a003d80 <_puts_r+0x90>
1a003d72:	290a      	cmp	r1, #10
1a003d74:	d004      	beq.n	1a003d80 <_puts_r+0x90>
1a003d76:	6823      	ldr	r3, [r4, #0]
1a003d78:	1c5a      	adds	r2, r3, #1
1a003d7a:	6022      	str	r2, [r4, #0]
1a003d7c:	7019      	strb	r1, [r3, #0]
1a003d7e:	e7cf      	b.n	1a003d20 <_puts_r+0x30>
1a003d80:	4622      	mov	r2, r4
1a003d82:	4628      	mov	r0, r5
1a003d84:	f000 f85c 	bl	1a003e40 <__swbuf_r>
1a003d88:	3001      	adds	r0, #1
1a003d8a:	d1c9      	bne.n	1a003d20 <_puts_r+0x30>
1a003d8c:	e7e9      	b.n	1a003d62 <_puts_r+0x72>
1a003d8e:	6823      	ldr	r3, [r4, #0]
1a003d90:	200a      	movs	r0, #10
1a003d92:	1c5a      	adds	r2, r3, #1
1a003d94:	6022      	str	r2, [r4, #0]
1a003d96:	7018      	strb	r0, [r3, #0]
1a003d98:	e7e5      	b.n	1a003d66 <_puts_r+0x76>
1a003d9a:	bf00      	nop
1a003d9c:	1a004acc 	.word	0x1a004acc
1a003da0:	1a004aec 	.word	0x1a004aec
1a003da4:	1a004aac 	.word	0x1a004aac

1a003da8 <puts>:
1a003da8:	4b02      	ldr	r3, [pc, #8]	; (1a003db4 <puts+0xc>)
1a003daa:	4601      	mov	r1, r0
1a003dac:	6818      	ldr	r0, [r3, #0]
1a003dae:	f7ff bf9f 	b.w	1a003cf0 <_puts_r>
1a003db2:	bf00      	nop
1a003db4:	10000040 	.word	0x10000040

1a003db8 <__sread>:
1a003db8:	b510      	push	{r4, lr}
1a003dba:	460c      	mov	r4, r1
1a003dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003dc0:	f7fc fb9e 	bl	1a000500 <_read_r>
1a003dc4:	2800      	cmp	r0, #0
1a003dc6:	bfab      	itete	ge
1a003dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a003dca:	89a3      	ldrhlt	r3, [r4, #12]
1a003dcc:	181b      	addge	r3, r3, r0
1a003dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a003dd2:	bfac      	ite	ge
1a003dd4:	6563      	strge	r3, [r4, #84]	; 0x54
1a003dd6:	81a3      	strhlt	r3, [r4, #12]
1a003dd8:	bd10      	pop	{r4, pc}

1a003dda <__swrite>:
1a003dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003dde:	461f      	mov	r7, r3
1a003de0:	898b      	ldrh	r3, [r1, #12]
1a003de2:	05db      	lsls	r3, r3, #23
1a003de4:	4605      	mov	r5, r0
1a003de6:	460c      	mov	r4, r1
1a003de8:	4616      	mov	r6, r2
1a003dea:	d505      	bpl.n	1a003df8 <__swrite+0x1e>
1a003dec:	2302      	movs	r3, #2
1a003dee:	2200      	movs	r2, #0
1a003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003df4:	f7fc fb7f 	bl	1a0004f6 <_lseek_r>
1a003df8:	89a3      	ldrh	r3, [r4, #12]
1a003dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003e02:	81a3      	strh	r3, [r4, #12]
1a003e04:	4632      	mov	r2, r6
1a003e06:	463b      	mov	r3, r7
1a003e08:	4628      	mov	r0, r5
1a003e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003e0e:	f7fc bb9e 	b.w	1a00054e <_write_r>

1a003e12 <__sseek>:
1a003e12:	b510      	push	{r4, lr}
1a003e14:	460c      	mov	r4, r1
1a003e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003e1a:	f7fc fb6c 	bl	1a0004f6 <_lseek_r>
1a003e1e:	1c43      	adds	r3, r0, #1
1a003e20:	89a3      	ldrh	r3, [r4, #12]
1a003e22:	bf15      	itete	ne
1a003e24:	6560      	strne	r0, [r4, #84]	; 0x54
1a003e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003e2e:	81a3      	strheq	r3, [r4, #12]
1a003e30:	bf18      	it	ne
1a003e32:	81a3      	strhne	r3, [r4, #12]
1a003e34:	bd10      	pop	{r4, pc}

1a003e36 <__sclose>:
1a003e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003e3a:	f7fc bb49 	b.w	1a0004d0 <_close_r>
1a003e3e:	Address 0x000000001a003e3e is out of bounds.


1a003e40 <__swbuf_r>:
1a003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003e42:	460e      	mov	r6, r1
1a003e44:	4614      	mov	r4, r2
1a003e46:	4605      	mov	r5, r0
1a003e48:	b118      	cbz	r0, 1a003e52 <__swbuf_r+0x12>
1a003e4a:	6983      	ldr	r3, [r0, #24]
1a003e4c:	b90b      	cbnz	r3, 1a003e52 <__swbuf_r+0x12>
1a003e4e:	f7ff fdcd 	bl	1a0039ec <__sinit>
1a003e52:	4b21      	ldr	r3, [pc, #132]	; (1a003ed8 <__swbuf_r+0x98>)
1a003e54:	429c      	cmp	r4, r3
1a003e56:	d12a      	bne.n	1a003eae <__swbuf_r+0x6e>
1a003e58:	686c      	ldr	r4, [r5, #4]
1a003e5a:	69a3      	ldr	r3, [r4, #24]
1a003e5c:	60a3      	str	r3, [r4, #8]
1a003e5e:	89a3      	ldrh	r3, [r4, #12]
1a003e60:	071a      	lsls	r2, r3, #28
1a003e62:	d52e      	bpl.n	1a003ec2 <__swbuf_r+0x82>
1a003e64:	6923      	ldr	r3, [r4, #16]
1a003e66:	b363      	cbz	r3, 1a003ec2 <__swbuf_r+0x82>
1a003e68:	6923      	ldr	r3, [r4, #16]
1a003e6a:	6820      	ldr	r0, [r4, #0]
1a003e6c:	1ac0      	subs	r0, r0, r3
1a003e6e:	6963      	ldr	r3, [r4, #20]
1a003e70:	b2f6      	uxtb	r6, r6
1a003e72:	4283      	cmp	r3, r0
1a003e74:	4637      	mov	r7, r6
1a003e76:	dc04      	bgt.n	1a003e82 <__swbuf_r+0x42>
1a003e78:	4621      	mov	r1, r4
1a003e7a:	4628      	mov	r0, r5
1a003e7c:	f7ff fd4c 	bl	1a003918 <_fflush_r>
1a003e80:	bb28      	cbnz	r0, 1a003ece <__swbuf_r+0x8e>
1a003e82:	68a3      	ldr	r3, [r4, #8]
1a003e84:	3b01      	subs	r3, #1
1a003e86:	60a3      	str	r3, [r4, #8]
1a003e88:	6823      	ldr	r3, [r4, #0]
1a003e8a:	1c5a      	adds	r2, r3, #1
1a003e8c:	6022      	str	r2, [r4, #0]
1a003e8e:	701e      	strb	r6, [r3, #0]
1a003e90:	6963      	ldr	r3, [r4, #20]
1a003e92:	3001      	adds	r0, #1
1a003e94:	4283      	cmp	r3, r0
1a003e96:	d004      	beq.n	1a003ea2 <__swbuf_r+0x62>
1a003e98:	89a3      	ldrh	r3, [r4, #12]
1a003e9a:	07db      	lsls	r3, r3, #31
1a003e9c:	d519      	bpl.n	1a003ed2 <__swbuf_r+0x92>
1a003e9e:	2e0a      	cmp	r6, #10
1a003ea0:	d117      	bne.n	1a003ed2 <__swbuf_r+0x92>
1a003ea2:	4621      	mov	r1, r4
1a003ea4:	4628      	mov	r0, r5
1a003ea6:	f7ff fd37 	bl	1a003918 <_fflush_r>
1a003eaa:	b190      	cbz	r0, 1a003ed2 <__swbuf_r+0x92>
1a003eac:	e00f      	b.n	1a003ece <__swbuf_r+0x8e>
1a003eae:	4b0b      	ldr	r3, [pc, #44]	; (1a003edc <__swbuf_r+0x9c>)
1a003eb0:	429c      	cmp	r4, r3
1a003eb2:	d101      	bne.n	1a003eb8 <__swbuf_r+0x78>
1a003eb4:	68ac      	ldr	r4, [r5, #8]
1a003eb6:	e7d0      	b.n	1a003e5a <__swbuf_r+0x1a>
1a003eb8:	4b09      	ldr	r3, [pc, #36]	; (1a003ee0 <__swbuf_r+0xa0>)
1a003eba:	429c      	cmp	r4, r3
1a003ebc:	bf08      	it	eq
1a003ebe:	68ec      	ldreq	r4, [r5, #12]
1a003ec0:	e7cb      	b.n	1a003e5a <__swbuf_r+0x1a>
1a003ec2:	4621      	mov	r1, r4
1a003ec4:	4628      	mov	r0, r5
1a003ec6:	f000 f80d 	bl	1a003ee4 <__swsetup_r>
1a003eca:	2800      	cmp	r0, #0
1a003ecc:	d0cc      	beq.n	1a003e68 <__swbuf_r+0x28>
1a003ece:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003ed2:	4638      	mov	r0, r7
1a003ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003ed6:	bf00      	nop
1a003ed8:	1a004acc 	.word	0x1a004acc
1a003edc:	1a004aec 	.word	0x1a004aec
1a003ee0:	1a004aac 	.word	0x1a004aac

1a003ee4 <__swsetup_r>:
1a003ee4:	4b32      	ldr	r3, [pc, #200]	; (1a003fb0 <__swsetup_r+0xcc>)
1a003ee6:	b570      	push	{r4, r5, r6, lr}
1a003ee8:	681d      	ldr	r5, [r3, #0]
1a003eea:	4606      	mov	r6, r0
1a003eec:	460c      	mov	r4, r1
1a003eee:	b125      	cbz	r5, 1a003efa <__swsetup_r+0x16>
1a003ef0:	69ab      	ldr	r3, [r5, #24]
1a003ef2:	b913      	cbnz	r3, 1a003efa <__swsetup_r+0x16>
1a003ef4:	4628      	mov	r0, r5
1a003ef6:	f7ff fd79 	bl	1a0039ec <__sinit>
1a003efa:	4b2e      	ldr	r3, [pc, #184]	; (1a003fb4 <__swsetup_r+0xd0>)
1a003efc:	429c      	cmp	r4, r3
1a003efe:	d10f      	bne.n	1a003f20 <__swsetup_r+0x3c>
1a003f00:	686c      	ldr	r4, [r5, #4]
1a003f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003f06:	b29a      	uxth	r2, r3
1a003f08:	0715      	lsls	r5, r2, #28
1a003f0a:	d42c      	bmi.n	1a003f66 <__swsetup_r+0x82>
1a003f0c:	06d0      	lsls	r0, r2, #27
1a003f0e:	d411      	bmi.n	1a003f34 <__swsetup_r+0x50>
1a003f10:	2209      	movs	r2, #9
1a003f12:	6032      	str	r2, [r6, #0]
1a003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003f18:	81a3      	strh	r3, [r4, #12]
1a003f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003f1e:	e03e      	b.n	1a003f9e <__swsetup_r+0xba>
1a003f20:	4b25      	ldr	r3, [pc, #148]	; (1a003fb8 <__swsetup_r+0xd4>)
1a003f22:	429c      	cmp	r4, r3
1a003f24:	d101      	bne.n	1a003f2a <__swsetup_r+0x46>
1a003f26:	68ac      	ldr	r4, [r5, #8]
1a003f28:	e7eb      	b.n	1a003f02 <__swsetup_r+0x1e>
1a003f2a:	4b24      	ldr	r3, [pc, #144]	; (1a003fbc <__swsetup_r+0xd8>)
1a003f2c:	429c      	cmp	r4, r3
1a003f2e:	bf08      	it	eq
1a003f30:	68ec      	ldreq	r4, [r5, #12]
1a003f32:	e7e6      	b.n	1a003f02 <__swsetup_r+0x1e>
1a003f34:	0751      	lsls	r1, r2, #29
1a003f36:	d512      	bpl.n	1a003f5e <__swsetup_r+0x7a>
1a003f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003f3a:	b141      	cbz	r1, 1a003f4e <__swsetup_r+0x6a>
1a003f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003f40:	4299      	cmp	r1, r3
1a003f42:	d002      	beq.n	1a003f4a <__swsetup_r+0x66>
1a003f44:	4630      	mov	r0, r6
1a003f46:	f7ff fe13 	bl	1a003b70 <_free_r>
1a003f4a:	2300      	movs	r3, #0
1a003f4c:	6363      	str	r3, [r4, #52]	; 0x34
1a003f4e:	89a3      	ldrh	r3, [r4, #12]
1a003f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003f54:	81a3      	strh	r3, [r4, #12]
1a003f56:	2300      	movs	r3, #0
1a003f58:	6063      	str	r3, [r4, #4]
1a003f5a:	6923      	ldr	r3, [r4, #16]
1a003f5c:	6023      	str	r3, [r4, #0]
1a003f5e:	89a3      	ldrh	r3, [r4, #12]
1a003f60:	f043 0308 	orr.w	r3, r3, #8
1a003f64:	81a3      	strh	r3, [r4, #12]
1a003f66:	6923      	ldr	r3, [r4, #16]
1a003f68:	b94b      	cbnz	r3, 1a003f7e <__swsetup_r+0x9a>
1a003f6a:	89a3      	ldrh	r3, [r4, #12]
1a003f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003f74:	d003      	beq.n	1a003f7e <__swsetup_r+0x9a>
1a003f76:	4621      	mov	r1, r4
1a003f78:	4630      	mov	r0, r6
1a003f7a:	f000 f845 	bl	1a004008 <__smakebuf_r>
1a003f7e:	89a2      	ldrh	r2, [r4, #12]
1a003f80:	f012 0301 	ands.w	r3, r2, #1
1a003f84:	d00c      	beq.n	1a003fa0 <__swsetup_r+0xbc>
1a003f86:	2300      	movs	r3, #0
1a003f88:	60a3      	str	r3, [r4, #8]
1a003f8a:	6963      	ldr	r3, [r4, #20]
1a003f8c:	425b      	negs	r3, r3
1a003f8e:	61a3      	str	r3, [r4, #24]
1a003f90:	6923      	ldr	r3, [r4, #16]
1a003f92:	b953      	cbnz	r3, 1a003faa <__swsetup_r+0xc6>
1a003f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003f98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a003f9c:	d1ba      	bne.n	1a003f14 <__swsetup_r+0x30>
1a003f9e:	bd70      	pop	{r4, r5, r6, pc}
1a003fa0:	0792      	lsls	r2, r2, #30
1a003fa2:	bf58      	it	pl
1a003fa4:	6963      	ldrpl	r3, [r4, #20]
1a003fa6:	60a3      	str	r3, [r4, #8]
1a003fa8:	e7f2      	b.n	1a003f90 <__swsetup_r+0xac>
1a003faa:	2000      	movs	r0, #0
1a003fac:	e7f7      	b.n	1a003f9e <__swsetup_r+0xba>
1a003fae:	bf00      	nop
1a003fb0:	10000040 	.word	0x10000040
1a003fb4:	1a004acc 	.word	0x1a004acc
1a003fb8:	1a004aec 	.word	0x1a004aec
1a003fbc:	1a004aac 	.word	0x1a004aac

1a003fc0 <__swhatbuf_r>:
1a003fc0:	b570      	push	{r4, r5, r6, lr}
1a003fc2:	460e      	mov	r6, r1
1a003fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003fc8:	2900      	cmp	r1, #0
1a003fca:	b096      	sub	sp, #88	; 0x58
1a003fcc:	4614      	mov	r4, r2
1a003fce:	461d      	mov	r5, r3
1a003fd0:	da07      	bge.n	1a003fe2 <__swhatbuf_r+0x22>
1a003fd2:	2300      	movs	r3, #0
1a003fd4:	602b      	str	r3, [r5, #0]
1a003fd6:	89b3      	ldrh	r3, [r6, #12]
1a003fd8:	061a      	lsls	r2, r3, #24
1a003fda:	d410      	bmi.n	1a003ffe <__swhatbuf_r+0x3e>
1a003fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003fe0:	e00e      	b.n	1a004000 <__swhatbuf_r+0x40>
1a003fe2:	466a      	mov	r2, sp
1a003fe4:	f7fc fa79 	bl	1a0004da <_fstat_r>
1a003fe8:	2800      	cmp	r0, #0
1a003fea:	dbf2      	blt.n	1a003fd2 <__swhatbuf_r+0x12>
1a003fec:	9a01      	ldr	r2, [sp, #4]
1a003fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a003ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a003ff6:	425a      	negs	r2, r3
1a003ff8:	415a      	adcs	r2, r3
1a003ffa:	602a      	str	r2, [r5, #0]
1a003ffc:	e7ee      	b.n	1a003fdc <__swhatbuf_r+0x1c>
1a003ffe:	2340      	movs	r3, #64	; 0x40
1a004000:	2000      	movs	r0, #0
1a004002:	6023      	str	r3, [r4, #0]
1a004004:	b016      	add	sp, #88	; 0x58
1a004006:	bd70      	pop	{r4, r5, r6, pc}

1a004008 <__smakebuf_r>:
1a004008:	898b      	ldrh	r3, [r1, #12]
1a00400a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a00400c:	079d      	lsls	r5, r3, #30
1a00400e:	4606      	mov	r6, r0
1a004010:	460c      	mov	r4, r1
1a004012:	d507      	bpl.n	1a004024 <__smakebuf_r+0x1c>
1a004014:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004018:	6023      	str	r3, [r4, #0]
1a00401a:	6123      	str	r3, [r4, #16]
1a00401c:	2301      	movs	r3, #1
1a00401e:	6163      	str	r3, [r4, #20]
1a004020:	b002      	add	sp, #8
1a004022:	bd70      	pop	{r4, r5, r6, pc}
1a004024:	ab01      	add	r3, sp, #4
1a004026:	466a      	mov	r2, sp
1a004028:	f7ff ffca 	bl	1a003fc0 <__swhatbuf_r>
1a00402c:	9900      	ldr	r1, [sp, #0]
1a00402e:	4605      	mov	r5, r0
1a004030:	4630      	mov	r0, r6
1a004032:	f7ff fdeb 	bl	1a003c0c <_malloc_r>
1a004036:	b948      	cbnz	r0, 1a00404c <__smakebuf_r+0x44>
1a004038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00403c:	059a      	lsls	r2, r3, #22
1a00403e:	d4ef      	bmi.n	1a004020 <__smakebuf_r+0x18>
1a004040:	f023 0303 	bic.w	r3, r3, #3
1a004044:	f043 0302 	orr.w	r3, r3, #2
1a004048:	81a3      	strh	r3, [r4, #12]
1a00404a:	e7e3      	b.n	1a004014 <__smakebuf_r+0xc>
1a00404c:	4b0d      	ldr	r3, [pc, #52]	; (1a004084 <__smakebuf_r+0x7c>)
1a00404e:	62b3      	str	r3, [r6, #40]	; 0x28
1a004050:	89a3      	ldrh	r3, [r4, #12]
1a004052:	6020      	str	r0, [r4, #0]
1a004054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004058:	81a3      	strh	r3, [r4, #12]
1a00405a:	9b00      	ldr	r3, [sp, #0]
1a00405c:	6163      	str	r3, [r4, #20]
1a00405e:	9b01      	ldr	r3, [sp, #4]
1a004060:	6120      	str	r0, [r4, #16]
1a004062:	b15b      	cbz	r3, 1a00407c <__smakebuf_r+0x74>
1a004064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004068:	4630      	mov	r0, r6
1a00406a:	f7fc fa3b 	bl	1a0004e4 <_isatty_r>
1a00406e:	b128      	cbz	r0, 1a00407c <__smakebuf_r+0x74>
1a004070:	89a3      	ldrh	r3, [r4, #12]
1a004072:	f023 0303 	bic.w	r3, r3, #3
1a004076:	f043 0301 	orr.w	r3, r3, #1
1a00407a:	81a3      	strh	r3, [r4, #12]
1a00407c:	89a3      	ldrh	r3, [r4, #12]
1a00407e:	431d      	orrs	r5, r3
1a004080:	81a5      	strh	r5, [r4, #12]
1a004082:	e7cd      	b.n	1a004020 <__smakebuf_r+0x18>
1a004084:	1a0039b5 	.word	0x1a0039b5

1a004088 <__malloc_lock>:
1a004088:	4770      	bx	lr

1a00408a <__malloc_unlock>:
1a00408a:	4770      	bx	lr

1a00408c <__sfputc_r>:
1a00408c:	6893      	ldr	r3, [r2, #8]
1a00408e:	3b01      	subs	r3, #1
1a004090:	2b00      	cmp	r3, #0
1a004092:	b410      	push	{r4}
1a004094:	6093      	str	r3, [r2, #8]
1a004096:	da08      	bge.n	1a0040aa <__sfputc_r+0x1e>
1a004098:	6994      	ldr	r4, [r2, #24]
1a00409a:	42a3      	cmp	r3, r4
1a00409c:	db01      	blt.n	1a0040a2 <__sfputc_r+0x16>
1a00409e:	290a      	cmp	r1, #10
1a0040a0:	d103      	bne.n	1a0040aa <__sfputc_r+0x1e>
1a0040a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0040a6:	f7ff becb 	b.w	1a003e40 <__swbuf_r>
1a0040aa:	6813      	ldr	r3, [r2, #0]
1a0040ac:	1c58      	adds	r0, r3, #1
1a0040ae:	6010      	str	r0, [r2, #0]
1a0040b0:	7019      	strb	r1, [r3, #0]
1a0040b2:	4608      	mov	r0, r1
1a0040b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0040b8:	4770      	bx	lr

1a0040ba <__sfputs_r>:
1a0040ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0040bc:	4606      	mov	r6, r0
1a0040be:	460f      	mov	r7, r1
1a0040c0:	4614      	mov	r4, r2
1a0040c2:	18d5      	adds	r5, r2, r3
1a0040c4:	42ac      	cmp	r4, r5
1a0040c6:	d101      	bne.n	1a0040cc <__sfputs_r+0x12>
1a0040c8:	2000      	movs	r0, #0
1a0040ca:	e007      	b.n	1a0040dc <__sfputs_r+0x22>
1a0040cc:	463a      	mov	r2, r7
1a0040ce:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0040d2:	4630      	mov	r0, r6
1a0040d4:	f7ff ffda 	bl	1a00408c <__sfputc_r>
1a0040d8:	1c43      	adds	r3, r0, #1
1a0040da:	d1f3      	bne.n	1a0040c4 <__sfputs_r+0xa>
1a0040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0040de:	Address 0x000000001a0040de is out of bounds.


1a0040e0 <_vfiprintf_r>:
1a0040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0040e4:	460c      	mov	r4, r1
1a0040e6:	b09d      	sub	sp, #116	; 0x74
1a0040e8:	4617      	mov	r7, r2
1a0040ea:	461d      	mov	r5, r3
1a0040ec:	4606      	mov	r6, r0
1a0040ee:	b118      	cbz	r0, 1a0040f8 <_vfiprintf_r+0x18>
1a0040f0:	6983      	ldr	r3, [r0, #24]
1a0040f2:	b90b      	cbnz	r3, 1a0040f8 <_vfiprintf_r+0x18>
1a0040f4:	f7ff fc7a 	bl	1a0039ec <__sinit>
1a0040f8:	4b7c      	ldr	r3, [pc, #496]	; (1a0042ec <_vfiprintf_r+0x20c>)
1a0040fa:	429c      	cmp	r4, r3
1a0040fc:	d158      	bne.n	1a0041b0 <_vfiprintf_r+0xd0>
1a0040fe:	6874      	ldr	r4, [r6, #4]
1a004100:	89a3      	ldrh	r3, [r4, #12]
1a004102:	0718      	lsls	r0, r3, #28
1a004104:	d55e      	bpl.n	1a0041c4 <_vfiprintf_r+0xe4>
1a004106:	6923      	ldr	r3, [r4, #16]
1a004108:	2b00      	cmp	r3, #0
1a00410a:	d05b      	beq.n	1a0041c4 <_vfiprintf_r+0xe4>
1a00410c:	2300      	movs	r3, #0
1a00410e:	9309      	str	r3, [sp, #36]	; 0x24
1a004110:	2320      	movs	r3, #32
1a004112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004116:	2330      	movs	r3, #48	; 0x30
1a004118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00411c:	9503      	str	r5, [sp, #12]
1a00411e:	f04f 0b01 	mov.w	fp, #1
1a004122:	46b8      	mov	r8, r7
1a004124:	4645      	mov	r5, r8
1a004126:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00412a:	b10b      	cbz	r3, 1a004130 <_vfiprintf_r+0x50>
1a00412c:	2b25      	cmp	r3, #37	; 0x25
1a00412e:	d154      	bne.n	1a0041da <_vfiprintf_r+0xfa>
1a004130:	ebb8 0a07 	subs.w	sl, r8, r7
1a004134:	d00b      	beq.n	1a00414e <_vfiprintf_r+0x6e>
1a004136:	4653      	mov	r3, sl
1a004138:	463a      	mov	r2, r7
1a00413a:	4621      	mov	r1, r4
1a00413c:	4630      	mov	r0, r6
1a00413e:	f7ff ffbc 	bl	1a0040ba <__sfputs_r>
1a004142:	3001      	adds	r0, #1
1a004144:	f000 80c2 	beq.w	1a0042cc <_vfiprintf_r+0x1ec>
1a004148:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00414a:	4453      	add	r3, sl
1a00414c:	9309      	str	r3, [sp, #36]	; 0x24
1a00414e:	f898 3000 	ldrb.w	r3, [r8]
1a004152:	2b00      	cmp	r3, #0
1a004154:	f000 80ba 	beq.w	1a0042cc <_vfiprintf_r+0x1ec>
1a004158:	2300      	movs	r3, #0
1a00415a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00415e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004162:	9304      	str	r3, [sp, #16]
1a004164:	9307      	str	r3, [sp, #28]
1a004166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00416a:	931a      	str	r3, [sp, #104]	; 0x68
1a00416c:	46a8      	mov	r8, r5
1a00416e:	2205      	movs	r2, #5
1a004170:	f818 1b01 	ldrb.w	r1, [r8], #1
1a004174:	485e      	ldr	r0, [pc, #376]	; (1a0042f0 <_vfiprintf_r+0x210>)
1a004176:	f000 fa53 	bl	1a004620 <memchr>
1a00417a:	9b04      	ldr	r3, [sp, #16]
1a00417c:	bb78      	cbnz	r0, 1a0041de <_vfiprintf_r+0xfe>
1a00417e:	06d9      	lsls	r1, r3, #27
1a004180:	bf44      	itt	mi
1a004182:	2220      	movmi	r2, #32
1a004184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004188:	071a      	lsls	r2, r3, #28
1a00418a:	bf44      	itt	mi
1a00418c:	222b      	movmi	r2, #43	; 0x2b
1a00418e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004192:	782a      	ldrb	r2, [r5, #0]
1a004194:	2a2a      	cmp	r2, #42	; 0x2a
1a004196:	d02a      	beq.n	1a0041ee <_vfiprintf_r+0x10e>
1a004198:	9a07      	ldr	r2, [sp, #28]
1a00419a:	46a8      	mov	r8, r5
1a00419c:	2000      	movs	r0, #0
1a00419e:	250a      	movs	r5, #10
1a0041a0:	4641      	mov	r1, r8
1a0041a2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0041a6:	3b30      	subs	r3, #48	; 0x30
1a0041a8:	2b09      	cmp	r3, #9
1a0041aa:	d969      	bls.n	1a004280 <_vfiprintf_r+0x1a0>
1a0041ac:	b360      	cbz	r0, 1a004208 <_vfiprintf_r+0x128>
1a0041ae:	e024      	b.n	1a0041fa <_vfiprintf_r+0x11a>
1a0041b0:	4b50      	ldr	r3, [pc, #320]	; (1a0042f4 <_vfiprintf_r+0x214>)
1a0041b2:	429c      	cmp	r4, r3
1a0041b4:	d101      	bne.n	1a0041ba <_vfiprintf_r+0xda>
1a0041b6:	68b4      	ldr	r4, [r6, #8]
1a0041b8:	e7a2      	b.n	1a004100 <_vfiprintf_r+0x20>
1a0041ba:	4b4f      	ldr	r3, [pc, #316]	; (1a0042f8 <_vfiprintf_r+0x218>)
1a0041bc:	429c      	cmp	r4, r3
1a0041be:	bf08      	it	eq
1a0041c0:	68f4      	ldreq	r4, [r6, #12]
1a0041c2:	e79d      	b.n	1a004100 <_vfiprintf_r+0x20>
1a0041c4:	4621      	mov	r1, r4
1a0041c6:	4630      	mov	r0, r6
1a0041c8:	f7ff fe8c 	bl	1a003ee4 <__swsetup_r>
1a0041cc:	2800      	cmp	r0, #0
1a0041ce:	d09d      	beq.n	1a00410c <_vfiprintf_r+0x2c>
1a0041d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0041d4:	b01d      	add	sp, #116	; 0x74
1a0041d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0041da:	46a8      	mov	r8, r5
1a0041dc:	e7a2      	b.n	1a004124 <_vfiprintf_r+0x44>
1a0041de:	4a44      	ldr	r2, [pc, #272]	; (1a0042f0 <_vfiprintf_r+0x210>)
1a0041e0:	1a80      	subs	r0, r0, r2
1a0041e2:	fa0b f000 	lsl.w	r0, fp, r0
1a0041e6:	4318      	orrs	r0, r3
1a0041e8:	9004      	str	r0, [sp, #16]
1a0041ea:	4645      	mov	r5, r8
1a0041ec:	e7be      	b.n	1a00416c <_vfiprintf_r+0x8c>
1a0041ee:	9a03      	ldr	r2, [sp, #12]
1a0041f0:	1d11      	adds	r1, r2, #4
1a0041f2:	6812      	ldr	r2, [r2, #0]
1a0041f4:	9103      	str	r1, [sp, #12]
1a0041f6:	2a00      	cmp	r2, #0
1a0041f8:	db01      	blt.n	1a0041fe <_vfiprintf_r+0x11e>
1a0041fa:	9207      	str	r2, [sp, #28]
1a0041fc:	e004      	b.n	1a004208 <_vfiprintf_r+0x128>
1a0041fe:	4252      	negs	r2, r2
1a004200:	f043 0302 	orr.w	r3, r3, #2
1a004204:	9207      	str	r2, [sp, #28]
1a004206:	9304      	str	r3, [sp, #16]
1a004208:	f898 3000 	ldrb.w	r3, [r8]
1a00420c:	2b2e      	cmp	r3, #46	; 0x2e
1a00420e:	d10e      	bne.n	1a00422e <_vfiprintf_r+0x14e>
1a004210:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004214:	2b2a      	cmp	r3, #42	; 0x2a
1a004216:	d138      	bne.n	1a00428a <_vfiprintf_r+0x1aa>
1a004218:	9b03      	ldr	r3, [sp, #12]
1a00421a:	1d1a      	adds	r2, r3, #4
1a00421c:	681b      	ldr	r3, [r3, #0]
1a00421e:	9203      	str	r2, [sp, #12]
1a004220:	2b00      	cmp	r3, #0
1a004222:	bfb8      	it	lt
1a004224:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004228:	f108 0802 	add.w	r8, r8, #2
1a00422c:	9305      	str	r3, [sp, #20]
1a00422e:	4d33      	ldr	r5, [pc, #204]	; (1a0042fc <_vfiprintf_r+0x21c>)
1a004230:	f898 1000 	ldrb.w	r1, [r8]
1a004234:	2203      	movs	r2, #3
1a004236:	4628      	mov	r0, r5
1a004238:	f000 f9f2 	bl	1a004620 <memchr>
1a00423c:	b140      	cbz	r0, 1a004250 <_vfiprintf_r+0x170>
1a00423e:	2340      	movs	r3, #64	; 0x40
1a004240:	1b40      	subs	r0, r0, r5
1a004242:	fa03 f000 	lsl.w	r0, r3, r0
1a004246:	9b04      	ldr	r3, [sp, #16]
1a004248:	4303      	orrs	r3, r0
1a00424a:	f108 0801 	add.w	r8, r8, #1
1a00424e:	9304      	str	r3, [sp, #16]
1a004250:	f898 1000 	ldrb.w	r1, [r8]
1a004254:	482a      	ldr	r0, [pc, #168]	; (1a004300 <_vfiprintf_r+0x220>)
1a004256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00425a:	2206      	movs	r2, #6
1a00425c:	f108 0701 	add.w	r7, r8, #1
1a004260:	f000 f9de 	bl	1a004620 <memchr>
1a004264:	2800      	cmp	r0, #0
1a004266:	d037      	beq.n	1a0042d8 <_vfiprintf_r+0x1f8>
1a004268:	4b26      	ldr	r3, [pc, #152]	; (1a004304 <_vfiprintf_r+0x224>)
1a00426a:	bb1b      	cbnz	r3, 1a0042b4 <_vfiprintf_r+0x1d4>
1a00426c:	9b03      	ldr	r3, [sp, #12]
1a00426e:	3307      	adds	r3, #7
1a004270:	f023 0307 	bic.w	r3, r3, #7
1a004274:	3308      	adds	r3, #8
1a004276:	9303      	str	r3, [sp, #12]
1a004278:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00427a:	444b      	add	r3, r9
1a00427c:	9309      	str	r3, [sp, #36]	; 0x24
1a00427e:	e750      	b.n	1a004122 <_vfiprintf_r+0x42>
1a004280:	fb05 3202 	mla	r2, r5, r2, r3
1a004284:	2001      	movs	r0, #1
1a004286:	4688      	mov	r8, r1
1a004288:	e78a      	b.n	1a0041a0 <_vfiprintf_r+0xc0>
1a00428a:	2300      	movs	r3, #0
1a00428c:	f108 0801 	add.w	r8, r8, #1
1a004290:	9305      	str	r3, [sp, #20]
1a004292:	4619      	mov	r1, r3
1a004294:	250a      	movs	r5, #10
1a004296:	4640      	mov	r0, r8
1a004298:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00429c:	3a30      	subs	r2, #48	; 0x30
1a00429e:	2a09      	cmp	r2, #9
1a0042a0:	d903      	bls.n	1a0042aa <_vfiprintf_r+0x1ca>
1a0042a2:	2b00      	cmp	r3, #0
1a0042a4:	d0c3      	beq.n	1a00422e <_vfiprintf_r+0x14e>
1a0042a6:	9105      	str	r1, [sp, #20]
1a0042a8:	e7c1      	b.n	1a00422e <_vfiprintf_r+0x14e>
1a0042aa:	fb05 2101 	mla	r1, r5, r1, r2
1a0042ae:	2301      	movs	r3, #1
1a0042b0:	4680      	mov	r8, r0
1a0042b2:	e7f0      	b.n	1a004296 <_vfiprintf_r+0x1b6>
1a0042b4:	ab03      	add	r3, sp, #12
1a0042b6:	9300      	str	r3, [sp, #0]
1a0042b8:	4622      	mov	r2, r4
1a0042ba:	4b13      	ldr	r3, [pc, #76]	; (1a004308 <_vfiprintf_r+0x228>)
1a0042bc:	a904      	add	r1, sp, #16
1a0042be:	4630      	mov	r0, r6
1a0042c0:	f3af 8000 	nop.w
1a0042c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0042c8:	4681      	mov	r9, r0
1a0042ca:	d1d5      	bne.n	1a004278 <_vfiprintf_r+0x198>
1a0042cc:	89a3      	ldrh	r3, [r4, #12]
1a0042ce:	065b      	lsls	r3, r3, #25
1a0042d0:	f53f af7e 	bmi.w	1a0041d0 <_vfiprintf_r+0xf0>
1a0042d4:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0042d6:	e77d      	b.n	1a0041d4 <_vfiprintf_r+0xf4>
1a0042d8:	ab03      	add	r3, sp, #12
1a0042da:	9300      	str	r3, [sp, #0]
1a0042dc:	4622      	mov	r2, r4
1a0042de:	4b0a      	ldr	r3, [pc, #40]	; (1a004308 <_vfiprintf_r+0x228>)
1a0042e0:	a904      	add	r1, sp, #16
1a0042e2:	4630      	mov	r0, r6
1a0042e4:	f000 f888 	bl	1a0043f8 <_printf_i>
1a0042e8:	e7ec      	b.n	1a0042c4 <_vfiprintf_r+0x1e4>
1a0042ea:	bf00      	nop
1a0042ec:	1a004acc 	.word	0x1a004acc
1a0042f0:	1a004b10 	.word	0x1a004b10
1a0042f4:	1a004aec 	.word	0x1a004aec
1a0042f8:	1a004aac 	.word	0x1a004aac
1a0042fc:	1a004b16 	.word	0x1a004b16
1a004300:	1a004b1a 	.word	0x1a004b1a
1a004304:	00000000 	.word	0x00000000
1a004308:	1a0040bb 	.word	0x1a0040bb

1a00430c <_printf_common>:
1a00430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004310:	4691      	mov	r9, r2
1a004312:	461f      	mov	r7, r3
1a004314:	688a      	ldr	r2, [r1, #8]
1a004316:	690b      	ldr	r3, [r1, #16]
1a004318:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00431c:	4293      	cmp	r3, r2
1a00431e:	bfb8      	it	lt
1a004320:	4613      	movlt	r3, r2
1a004322:	f8c9 3000 	str.w	r3, [r9]
1a004326:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00432a:	4606      	mov	r6, r0
1a00432c:	460c      	mov	r4, r1
1a00432e:	b112      	cbz	r2, 1a004336 <_printf_common+0x2a>
1a004330:	3301      	adds	r3, #1
1a004332:	f8c9 3000 	str.w	r3, [r9]
1a004336:	6823      	ldr	r3, [r4, #0]
1a004338:	0699      	lsls	r1, r3, #26
1a00433a:	bf42      	ittt	mi
1a00433c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004340:	3302      	addmi	r3, #2
1a004342:	f8c9 3000 	strmi.w	r3, [r9]
1a004346:	6825      	ldr	r5, [r4, #0]
1a004348:	f015 0506 	ands.w	r5, r5, #6
1a00434c:	d107      	bne.n	1a00435e <_printf_common+0x52>
1a00434e:	f104 0a19 	add.w	sl, r4, #25
1a004352:	68e3      	ldr	r3, [r4, #12]
1a004354:	f8d9 2000 	ldr.w	r2, [r9]
1a004358:	1a9b      	subs	r3, r3, r2
1a00435a:	42ab      	cmp	r3, r5
1a00435c:	dc28      	bgt.n	1a0043b0 <_printf_common+0xa4>
1a00435e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004362:	6822      	ldr	r2, [r4, #0]
1a004364:	3300      	adds	r3, #0
1a004366:	bf18      	it	ne
1a004368:	2301      	movne	r3, #1
1a00436a:	0692      	lsls	r2, r2, #26
1a00436c:	d42d      	bmi.n	1a0043ca <_printf_common+0xbe>
1a00436e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004372:	4639      	mov	r1, r7
1a004374:	4630      	mov	r0, r6
1a004376:	47c0      	blx	r8
1a004378:	3001      	adds	r0, #1
1a00437a:	d020      	beq.n	1a0043be <_printf_common+0xb2>
1a00437c:	6823      	ldr	r3, [r4, #0]
1a00437e:	68e5      	ldr	r5, [r4, #12]
1a004380:	f8d9 2000 	ldr.w	r2, [r9]
1a004384:	f003 0306 	and.w	r3, r3, #6
1a004388:	2b04      	cmp	r3, #4
1a00438a:	bf08      	it	eq
1a00438c:	1aad      	subeq	r5, r5, r2
1a00438e:	68a3      	ldr	r3, [r4, #8]
1a004390:	6922      	ldr	r2, [r4, #16]
1a004392:	bf0c      	ite	eq
1a004394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004398:	2500      	movne	r5, #0
1a00439a:	4293      	cmp	r3, r2
1a00439c:	bfc4      	itt	gt
1a00439e:	1a9b      	subgt	r3, r3, r2
1a0043a0:	18ed      	addgt	r5, r5, r3
1a0043a2:	f04f 0900 	mov.w	r9, #0
1a0043a6:	341a      	adds	r4, #26
1a0043a8:	454d      	cmp	r5, r9
1a0043aa:	d11a      	bne.n	1a0043e2 <_printf_common+0xd6>
1a0043ac:	2000      	movs	r0, #0
1a0043ae:	e008      	b.n	1a0043c2 <_printf_common+0xb6>
1a0043b0:	2301      	movs	r3, #1
1a0043b2:	4652      	mov	r2, sl
1a0043b4:	4639      	mov	r1, r7
1a0043b6:	4630      	mov	r0, r6
1a0043b8:	47c0      	blx	r8
1a0043ba:	3001      	adds	r0, #1
1a0043bc:	d103      	bne.n	1a0043c6 <_printf_common+0xba>
1a0043be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0043c6:	3501      	adds	r5, #1
1a0043c8:	e7c3      	b.n	1a004352 <_printf_common+0x46>
1a0043ca:	18e1      	adds	r1, r4, r3
1a0043cc:	1c5a      	adds	r2, r3, #1
1a0043ce:	2030      	movs	r0, #48	; 0x30
1a0043d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0043d4:	4422      	add	r2, r4
1a0043d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0043da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0043de:	3302      	adds	r3, #2
1a0043e0:	e7c5      	b.n	1a00436e <_printf_common+0x62>
1a0043e2:	2301      	movs	r3, #1
1a0043e4:	4622      	mov	r2, r4
1a0043e6:	4639      	mov	r1, r7
1a0043e8:	4630      	mov	r0, r6
1a0043ea:	47c0      	blx	r8
1a0043ec:	3001      	adds	r0, #1
1a0043ee:	d0e6      	beq.n	1a0043be <_printf_common+0xb2>
1a0043f0:	f109 0901 	add.w	r9, r9, #1
1a0043f4:	e7d8      	b.n	1a0043a8 <_printf_common+0x9c>
1a0043f6:	Address 0x000000001a0043f6 is out of bounds.


1a0043f8 <_printf_i>:
1a0043f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0043fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a004400:	460c      	mov	r4, r1
1a004402:	7e09      	ldrb	r1, [r1, #24]
1a004404:	b085      	sub	sp, #20
1a004406:	296e      	cmp	r1, #110	; 0x6e
1a004408:	4617      	mov	r7, r2
1a00440a:	4606      	mov	r6, r0
1a00440c:	4698      	mov	r8, r3
1a00440e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004410:	f000 80b3 	beq.w	1a00457a <_printf_i+0x182>
1a004414:	d822      	bhi.n	1a00445c <_printf_i+0x64>
1a004416:	2963      	cmp	r1, #99	; 0x63
1a004418:	d036      	beq.n	1a004488 <_printf_i+0x90>
1a00441a:	d80a      	bhi.n	1a004432 <_printf_i+0x3a>
1a00441c:	2900      	cmp	r1, #0
1a00441e:	f000 80b9 	beq.w	1a004594 <_printf_i+0x19c>
1a004422:	2958      	cmp	r1, #88	; 0x58
1a004424:	f000 8083 	beq.w	1a00452e <_printf_i+0x136>
1a004428:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00442c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004430:	e032      	b.n	1a004498 <_printf_i+0xa0>
1a004432:	2964      	cmp	r1, #100	; 0x64
1a004434:	d001      	beq.n	1a00443a <_printf_i+0x42>
1a004436:	2969      	cmp	r1, #105	; 0x69
1a004438:	d1f6      	bne.n	1a004428 <_printf_i+0x30>
1a00443a:	6820      	ldr	r0, [r4, #0]
1a00443c:	6813      	ldr	r3, [r2, #0]
1a00443e:	0605      	lsls	r5, r0, #24
1a004440:	f103 0104 	add.w	r1, r3, #4
1a004444:	d52a      	bpl.n	1a00449c <_printf_i+0xa4>
1a004446:	681b      	ldr	r3, [r3, #0]
1a004448:	6011      	str	r1, [r2, #0]
1a00444a:	2b00      	cmp	r3, #0
1a00444c:	da03      	bge.n	1a004456 <_printf_i+0x5e>
1a00444e:	222d      	movs	r2, #45	; 0x2d
1a004450:	425b      	negs	r3, r3
1a004452:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004456:	486f      	ldr	r0, [pc, #444]	; (1a004614 <_printf_i+0x21c>)
1a004458:	220a      	movs	r2, #10
1a00445a:	e039      	b.n	1a0044d0 <_printf_i+0xd8>
1a00445c:	2973      	cmp	r1, #115	; 0x73
1a00445e:	f000 809d 	beq.w	1a00459c <_printf_i+0x1a4>
1a004462:	d808      	bhi.n	1a004476 <_printf_i+0x7e>
1a004464:	296f      	cmp	r1, #111	; 0x6f
1a004466:	d020      	beq.n	1a0044aa <_printf_i+0xb2>
1a004468:	2970      	cmp	r1, #112	; 0x70
1a00446a:	d1dd      	bne.n	1a004428 <_printf_i+0x30>
1a00446c:	6823      	ldr	r3, [r4, #0]
1a00446e:	f043 0320 	orr.w	r3, r3, #32
1a004472:	6023      	str	r3, [r4, #0]
1a004474:	e003      	b.n	1a00447e <_printf_i+0x86>
1a004476:	2975      	cmp	r1, #117	; 0x75
1a004478:	d017      	beq.n	1a0044aa <_printf_i+0xb2>
1a00447a:	2978      	cmp	r1, #120	; 0x78
1a00447c:	d1d4      	bne.n	1a004428 <_printf_i+0x30>
1a00447e:	2378      	movs	r3, #120	; 0x78
1a004480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004484:	4864      	ldr	r0, [pc, #400]	; (1a004618 <_printf_i+0x220>)
1a004486:	e055      	b.n	1a004534 <_printf_i+0x13c>
1a004488:	6813      	ldr	r3, [r2, #0]
1a00448a:	1d19      	adds	r1, r3, #4
1a00448c:	681b      	ldr	r3, [r3, #0]
1a00448e:	6011      	str	r1, [r2, #0]
1a004490:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004498:	2301      	movs	r3, #1
1a00449a:	e08c      	b.n	1a0045b6 <_printf_i+0x1be>
1a00449c:	681b      	ldr	r3, [r3, #0]
1a00449e:	6011      	str	r1, [r2, #0]
1a0044a0:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0044a4:	bf18      	it	ne
1a0044a6:	b21b      	sxthne	r3, r3
1a0044a8:	e7cf      	b.n	1a00444a <_printf_i+0x52>
1a0044aa:	6813      	ldr	r3, [r2, #0]
1a0044ac:	6825      	ldr	r5, [r4, #0]
1a0044ae:	1d18      	adds	r0, r3, #4
1a0044b0:	6010      	str	r0, [r2, #0]
1a0044b2:	0628      	lsls	r0, r5, #24
1a0044b4:	d501      	bpl.n	1a0044ba <_printf_i+0xc2>
1a0044b6:	681b      	ldr	r3, [r3, #0]
1a0044b8:	e002      	b.n	1a0044c0 <_printf_i+0xc8>
1a0044ba:	0668      	lsls	r0, r5, #25
1a0044bc:	d5fb      	bpl.n	1a0044b6 <_printf_i+0xbe>
1a0044be:	881b      	ldrh	r3, [r3, #0]
1a0044c0:	4854      	ldr	r0, [pc, #336]	; (1a004614 <_printf_i+0x21c>)
1a0044c2:	296f      	cmp	r1, #111	; 0x6f
1a0044c4:	bf14      	ite	ne
1a0044c6:	220a      	movne	r2, #10
1a0044c8:	2208      	moveq	r2, #8
1a0044ca:	2100      	movs	r1, #0
1a0044cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0044d0:	6865      	ldr	r5, [r4, #4]
1a0044d2:	60a5      	str	r5, [r4, #8]
1a0044d4:	2d00      	cmp	r5, #0
1a0044d6:	f2c0 8095 	blt.w	1a004604 <_printf_i+0x20c>
1a0044da:	6821      	ldr	r1, [r4, #0]
1a0044dc:	f021 0104 	bic.w	r1, r1, #4
1a0044e0:	6021      	str	r1, [r4, #0]
1a0044e2:	2b00      	cmp	r3, #0
1a0044e4:	d13d      	bne.n	1a004562 <_printf_i+0x16a>
1a0044e6:	2d00      	cmp	r5, #0
1a0044e8:	f040 808e 	bne.w	1a004608 <_printf_i+0x210>
1a0044ec:	4665      	mov	r5, ip
1a0044ee:	2a08      	cmp	r2, #8
1a0044f0:	d10b      	bne.n	1a00450a <_printf_i+0x112>
1a0044f2:	6823      	ldr	r3, [r4, #0]
1a0044f4:	07db      	lsls	r3, r3, #31
1a0044f6:	d508      	bpl.n	1a00450a <_printf_i+0x112>
1a0044f8:	6923      	ldr	r3, [r4, #16]
1a0044fa:	6862      	ldr	r2, [r4, #4]
1a0044fc:	429a      	cmp	r2, r3
1a0044fe:	bfde      	ittt	le
1a004500:	2330      	movle	r3, #48	; 0x30
1a004502:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004506:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00450a:	ebac 0305 	sub.w	r3, ip, r5
1a00450e:	6123      	str	r3, [r4, #16]
1a004510:	f8cd 8000 	str.w	r8, [sp]
1a004514:	463b      	mov	r3, r7
1a004516:	aa03      	add	r2, sp, #12
1a004518:	4621      	mov	r1, r4
1a00451a:	4630      	mov	r0, r6
1a00451c:	f7ff fef6 	bl	1a00430c <_printf_common>
1a004520:	3001      	adds	r0, #1
1a004522:	d14d      	bne.n	1a0045c0 <_printf_i+0x1c8>
1a004524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004528:	b005      	add	sp, #20
1a00452a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00452e:	4839      	ldr	r0, [pc, #228]	; (1a004614 <_printf_i+0x21c>)
1a004530:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004534:	6813      	ldr	r3, [r2, #0]
1a004536:	6821      	ldr	r1, [r4, #0]
1a004538:	1d1d      	adds	r5, r3, #4
1a00453a:	681b      	ldr	r3, [r3, #0]
1a00453c:	6015      	str	r5, [r2, #0]
1a00453e:	060a      	lsls	r2, r1, #24
1a004540:	d50b      	bpl.n	1a00455a <_printf_i+0x162>
1a004542:	07ca      	lsls	r2, r1, #31
1a004544:	bf44      	itt	mi
1a004546:	f041 0120 	orrmi.w	r1, r1, #32
1a00454a:	6021      	strmi	r1, [r4, #0]
1a00454c:	b91b      	cbnz	r3, 1a004556 <_printf_i+0x15e>
1a00454e:	6822      	ldr	r2, [r4, #0]
1a004550:	f022 0220 	bic.w	r2, r2, #32
1a004554:	6022      	str	r2, [r4, #0]
1a004556:	2210      	movs	r2, #16
1a004558:	e7b7      	b.n	1a0044ca <_printf_i+0xd2>
1a00455a:	064d      	lsls	r5, r1, #25
1a00455c:	bf48      	it	mi
1a00455e:	b29b      	uxthmi	r3, r3
1a004560:	e7ef      	b.n	1a004542 <_printf_i+0x14a>
1a004562:	4665      	mov	r5, ip
1a004564:	fbb3 f1f2 	udiv	r1, r3, r2
1a004568:	fb02 3311 	mls	r3, r2, r1, r3
1a00456c:	5cc3      	ldrb	r3, [r0, r3]
1a00456e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004572:	460b      	mov	r3, r1
1a004574:	2900      	cmp	r1, #0
1a004576:	d1f5      	bne.n	1a004564 <_printf_i+0x16c>
1a004578:	e7b9      	b.n	1a0044ee <_printf_i+0xf6>
1a00457a:	6813      	ldr	r3, [r2, #0]
1a00457c:	6825      	ldr	r5, [r4, #0]
1a00457e:	6961      	ldr	r1, [r4, #20]
1a004580:	1d18      	adds	r0, r3, #4
1a004582:	6010      	str	r0, [r2, #0]
1a004584:	0628      	lsls	r0, r5, #24
1a004586:	681b      	ldr	r3, [r3, #0]
1a004588:	d501      	bpl.n	1a00458e <_printf_i+0x196>
1a00458a:	6019      	str	r1, [r3, #0]
1a00458c:	e002      	b.n	1a004594 <_printf_i+0x19c>
1a00458e:	066a      	lsls	r2, r5, #25
1a004590:	d5fb      	bpl.n	1a00458a <_printf_i+0x192>
1a004592:	8019      	strh	r1, [r3, #0]
1a004594:	2300      	movs	r3, #0
1a004596:	6123      	str	r3, [r4, #16]
1a004598:	4665      	mov	r5, ip
1a00459a:	e7b9      	b.n	1a004510 <_printf_i+0x118>
1a00459c:	6813      	ldr	r3, [r2, #0]
1a00459e:	1d19      	adds	r1, r3, #4
1a0045a0:	6011      	str	r1, [r2, #0]
1a0045a2:	681d      	ldr	r5, [r3, #0]
1a0045a4:	6862      	ldr	r2, [r4, #4]
1a0045a6:	2100      	movs	r1, #0
1a0045a8:	4628      	mov	r0, r5
1a0045aa:	f000 f839 	bl	1a004620 <memchr>
1a0045ae:	b108      	cbz	r0, 1a0045b4 <_printf_i+0x1bc>
1a0045b0:	1b40      	subs	r0, r0, r5
1a0045b2:	6060      	str	r0, [r4, #4]
1a0045b4:	6863      	ldr	r3, [r4, #4]
1a0045b6:	6123      	str	r3, [r4, #16]
1a0045b8:	2300      	movs	r3, #0
1a0045ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0045be:	e7a7      	b.n	1a004510 <_printf_i+0x118>
1a0045c0:	6923      	ldr	r3, [r4, #16]
1a0045c2:	462a      	mov	r2, r5
1a0045c4:	4639      	mov	r1, r7
1a0045c6:	4630      	mov	r0, r6
1a0045c8:	47c0      	blx	r8
1a0045ca:	3001      	adds	r0, #1
1a0045cc:	d0aa      	beq.n	1a004524 <_printf_i+0x12c>
1a0045ce:	6823      	ldr	r3, [r4, #0]
1a0045d0:	079b      	lsls	r3, r3, #30
1a0045d2:	d413      	bmi.n	1a0045fc <_printf_i+0x204>
1a0045d4:	68e0      	ldr	r0, [r4, #12]
1a0045d6:	9b03      	ldr	r3, [sp, #12]
1a0045d8:	4298      	cmp	r0, r3
1a0045da:	bfb8      	it	lt
1a0045dc:	4618      	movlt	r0, r3
1a0045de:	e7a3      	b.n	1a004528 <_printf_i+0x130>
1a0045e0:	2301      	movs	r3, #1
1a0045e2:	464a      	mov	r2, r9
1a0045e4:	4639      	mov	r1, r7
1a0045e6:	4630      	mov	r0, r6
1a0045e8:	47c0      	blx	r8
1a0045ea:	3001      	adds	r0, #1
1a0045ec:	d09a      	beq.n	1a004524 <_printf_i+0x12c>
1a0045ee:	3501      	adds	r5, #1
1a0045f0:	68e3      	ldr	r3, [r4, #12]
1a0045f2:	9a03      	ldr	r2, [sp, #12]
1a0045f4:	1a9b      	subs	r3, r3, r2
1a0045f6:	42ab      	cmp	r3, r5
1a0045f8:	dcf2      	bgt.n	1a0045e0 <_printf_i+0x1e8>
1a0045fa:	e7eb      	b.n	1a0045d4 <_printf_i+0x1dc>
1a0045fc:	2500      	movs	r5, #0
1a0045fe:	f104 0919 	add.w	r9, r4, #25
1a004602:	e7f5      	b.n	1a0045f0 <_printf_i+0x1f8>
1a004604:	2b00      	cmp	r3, #0
1a004606:	d1ac      	bne.n	1a004562 <_printf_i+0x16a>
1a004608:	7803      	ldrb	r3, [r0, #0]
1a00460a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00460e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004612:	e76c      	b.n	1a0044ee <_printf_i+0xf6>
1a004614:	1a004b21 	.word	0x1a004b21
1a004618:	1a004b32 	.word	0x1a004b32
1a00461c:	ffffffff 	.word	0xffffffff

1a004620 <memchr>:
1a004620:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004624:	2a10      	cmp	r2, #16
1a004626:	db2b      	blt.n	1a004680 <memchr+0x60>
1a004628:	f010 0f07 	tst.w	r0, #7
1a00462c:	d008      	beq.n	1a004640 <memchr+0x20>
1a00462e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004632:	3a01      	subs	r2, #1
1a004634:	428b      	cmp	r3, r1
1a004636:	d02d      	beq.n	1a004694 <memchr+0x74>
1a004638:	f010 0f07 	tst.w	r0, #7
1a00463c:	b342      	cbz	r2, 1a004690 <memchr+0x70>
1a00463e:	d1f6      	bne.n	1a00462e <memchr+0xe>
1a004640:	b4f0      	push	{r4, r5, r6, r7}
1a004642:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004646:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00464a:	f022 0407 	bic.w	r4, r2, #7
1a00464e:	f07f 0700 	mvns.w	r7, #0
1a004652:	2300      	movs	r3, #0
1a004654:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004658:	3c08      	subs	r4, #8
1a00465a:	ea85 0501 	eor.w	r5, r5, r1
1a00465e:	ea86 0601 	eor.w	r6, r6, r1
1a004662:	fa85 f547 	uadd8	r5, r5, r7
1a004666:	faa3 f587 	sel	r5, r3, r7
1a00466a:	fa86 f647 	uadd8	r6, r6, r7
1a00466e:	faa5 f687 	sel	r6, r5, r7
1a004672:	b98e      	cbnz	r6, 1a004698 <memchr+0x78>
1a004674:	d1ee      	bne.n	1a004654 <memchr+0x34>
1a004676:	bcf0      	pop	{r4, r5, r6, r7}
1a004678:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00467c:	f002 0207 	and.w	r2, r2, #7
1a004680:	b132      	cbz	r2, 1a004690 <memchr+0x70>
1a004682:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004686:	3a01      	subs	r2, #1
1a004688:	ea83 0301 	eor.w	r3, r3, r1
1a00468c:	b113      	cbz	r3, 1a004694 <memchr+0x74>
1a00468e:	d1f8      	bne.n	1a004682 <memchr+0x62>
1a004690:	2000      	movs	r0, #0
1a004692:	4770      	bx	lr
1a004694:	3801      	subs	r0, #1
1a004696:	4770      	bx	lr
1a004698:	2d00      	cmp	r5, #0
1a00469a:	bf06      	itte	eq
1a00469c:	4635      	moveq	r5, r6
1a00469e:	3803      	subeq	r0, #3
1a0046a0:	3807      	subne	r0, #7
1a0046a2:	f015 0f01 	tst.w	r5, #1
1a0046a6:	d107      	bne.n	1a0046b8 <memchr+0x98>
1a0046a8:	3001      	adds	r0, #1
1a0046aa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0046ae:	bf02      	ittt	eq
1a0046b0:	3001      	addeq	r0, #1
1a0046b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0046b6:	3001      	addeq	r0, #1
1a0046b8:	bcf0      	pop	{r4, r5, r6, r7}
1a0046ba:	3801      	subs	r0, #1
1a0046bc:	4770      	bx	lr
1a0046be:	bf00      	nop
1a0046c0:	20656854 	.word	0x20656854
1a0046c4:	756c6176 	.word	0x756c6176
1a0046c8:	003a2065 	.word	0x003a2065
1a0046cc:	73617720 	.word	0x73617720
1a0046d0:	69727020 	.word	0x69727020
1a0046d4:	6465746e 	.word	0x6465746e
1a0046d8:	6e696220 	.word	0x6e696220
1a0046dc:	20797261 	.word	0x20797261
1a0046e0:	74206e69 	.word	0x74206e69
1a0046e4:	4c206568 	.word	0x4c206568
1a0046e8:	20534445 	.word	0x20534445
1a0046ec:	4c203328 	.word	0x4c203328
1a0046f0:	0a294253 	.word	0x0a294253
1a0046f4:	ffffff00 	.word	0xffffff00
1a0046f8:	73206f4e 	.word	0x73206f4e
1a0046fc:	75702065 	.word	0x75702065
1a004700:	63206f64 	.word	0x63206f64
1a004704:	72616572 	.word	0x72616572
1a004708:	20616c20 	.word	0x20616c20
1a00470c:	414c4f43 	.word	0x414c4f43
1a004710:	00000000 	.word	0x00000000
1a004714:	61746164 	.word	0x61746164
1a004718:	6365725f 	.word	0x6365725f
1a00471c:	65766965 	.word	0x65766965
1a004720:	00000072 	.word	0x00000072
1a004724:	72676e49 	.word	0x72676e49
1a004728:	72617365 	.word	0x72617365
1a00472c:	74616420 	.word	0x74616420
1a004730:	0d31206f 	.word	0x0d31206f
1a004734:	ff00200a 	.word	0xff00200a
1a004738:	6c707041 	.word	0x6c707041
1a00473c:	74616369 	.word	0x74616369
1a004740:	206e6f69 	.word	0x206e6f69
1a004744:	6c6c614d 	.word	0x6c6c614d
1a004748:	4620636f 	.word	0x4620636f
1a00474c:	656c6961 	.word	0x656c6961
1a004750:	6f482064 	.word	0x6f482064
1a004754:	0d216b6f 	.word	0x0d216b6f
1a004758:	00000000 	.word	0x00000000
1a00475c:	7362696c 	.word	0x7362696c
1a004760:	6572662f 	.word	0x6572662f
1a004764:	6f747265 	.word	0x6f747265
1a004768:	6f732f73 	.word	0x6f732f73
1a00476c:	65637275 	.word	0x65637275
1a004770:	6f6f682f 	.word	0x6f6f682f
1a004774:	632e736b 	.word	0x632e736b
1a004778:	ffffff00 	.word	0xffffff00
1a00477c:	70410a0d 	.word	0x70410a0d
1a004780:	63696c70 	.word	0x63696c70
1a004784:	6f697461 	.word	0x6f697461
1a004788:	7453206e 	.word	0x7453206e
1a00478c:	206b6361 	.word	0x206b6361
1a004790:	7265764f 	.word	0x7265764f
1a004794:	776f6c66 	.word	0x776f6c66
1a004798:	6f202121 	.word	0x6f202121
1a00479c:	6154206e 	.word	0x6154206e
1a0047a0:	203a6b73 	.word	0x203a6b73
1a0047a4:	0a0d7325 	.word	0x0a0d7325
1a0047a8:	ffffff00 	.word	0xffffff00
1a0047ac:	41760a0d 	.word	0x41760a0d
1a0047b0:	72657373 	.word	0x72657373
1a0047b4:	6c614374 	.word	0x6c614374
1a0047b8:	2864656c 	.word	0x2864656c
1a0047bc:	200a0d29 	.word	0x200a0d29
1a0047c0:	4c4c2020 	.word	0x4c4c2020
1a0047c4:	20656e69 	.word	0x20656e69
1a0047c8:	626d754e 	.word	0x626d754e
1a0047cc:	3d207265 	.word	0x3d207265
1a0047d0:	0d642520 	.word	0x0d642520
1a0047d4:	2020200a 	.word	0x2020200a
1a0047d8:	656c6946 	.word	0x656c6946
1a0047dc:	6d614e20 	.word	0x6d614e20
1a0047e0:	203d2065 	.word	0x203d2065
1a0047e4:	0a0d7325 	.word	0x0a0d7325
1a0047e8:	ff000a0d 	.word	0xff000a0d
1a0047ec:	454c4449 	.word	0x454c4449
1a0047f0:	ffffff00 	.word	0xffffff00
1a0047f4:	51726d54 	.word	0x51726d54
1a0047f8:	ffffff00 	.word	0xffffff00
1a0047fc:	20726d54 	.word	0x20726d54
1a004800:	00637653 	.word	0x00637653

1a004804 <ExtRateIn>:
1a004804:	00000000                                ....

1a004808 <GpioButtons>:
1a004808:	08000400 09010900                       ........

1a004810 <GpioLeds>:
1a004810:	01050005 0e000205 0c010b01              ............

1a00481c <GpioPorts>:
1a00481c:	03030003 0f050403 05031005 07030603     ................
1a00482c:	ffff0802                                ....

1a004830 <OscRateIn>:
1a004830:	00b71b00                                ....

1a004834 <InitClkStates>:
1a004834:	01010f01                                ....

1a004838 <pinmuxing>:
1a004838:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004848:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004858:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004868:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004878:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004888:	00d50301 00d50401 00160107 00560207     ..............V.
1a004898:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0048a8:	00570206                                ..W.

1a0048ac <UART_BClock>:
1a0048ac:	01a201c2 01620182                       ......b.

1a0048b4 <UART_PClock>:
1a0048b4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0048c4:	000000ff                                ....

1a0048c8 <periph_to_base>:
1a0048c8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0048d8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0048e8:	000100e0 01000100 01200003 00060120     .......... . ...
1a0048f8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004908:	01820013 00120182 01a201a2 01c20011     ................
1a004918:	001001c2 01e201e2 0202000f 000e0202     ................
1a004928:	02220222 0223000d 001c0223              "."...#.#...

1a004934 <InitClkStates>:
1a004934:	00010100 00010909 0001090a 01010701     ................
1a004944:	00010902 00010906 0101090c 0001090d     ................
1a004954:	0001090e 0001090f 00010910 00010911     ................
1a004964:	00010912 00010913 00011114 00011119     ................
1a004974:	0001111a 0001111b                       ........

1a00497c <lpcUarts>:
1a00497c:	40081000 06020406 00180205 40081000     ...@...........@
1a00498c:	09070509 00180706 40082000 00000000     ......... .@....
1a00499c:	00190000 400c1000 07060107 001a0602     .......@........
1a0049ac:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0049bc:	02020302 001b0204                       ........

1a0049c4 <gpioPinsInit>:
1a0049c4:	02000104 00050701 05010d03 04080100     ................
1a0049d4:	02020002 02000304 00000403 04070002     ................
1a0049e4:	030c0300 09050402 05040103 04030208     ................
1a0049f4:	04020305 06040504 0802000c 03000b06     ................
1a004a04:	00090607 07060503 060f0504 03030004     ................
1a004a14:	02000404 00050404 06040502 04060200     ................
1a004a24:	0c050408 05040a04 0003010e 14010a00     ................
1a004a34:	010f0000 0d000012 00001101 0010010c     ................
1a004a44:	07070300 000f0300 01000001 00000000     ................
1a004a54:	000a0600 08060603 06100504 04030005     ................
1a004a64:	03000106 04090400 04010d05 010b0000     ................
1a004a74:	0200000f 00000001 00010104 02010800     ................
1a004a84:	01090000 09010006 05040002 04010200     ................
1a004a94:	02020105 02020504 0e00000a 01000b02     ................
1a004aa4:	000c020b ffff0c01                       ........

1a004aac <__sf_fake_stderr>:
	...

1a004acc <__sf_fake_stdin>:
	...

1a004aec <__sf_fake_stdout>:
	...

1a004b0c <_global_impure_ptr>:
1a004b0c:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a004b1c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004b2c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004b3c:	64636261 ff006665                       abcdef..
