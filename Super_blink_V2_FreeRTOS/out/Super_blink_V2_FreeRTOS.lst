
mis_programas/Super_blink_V2_FreeRTOS/out/Super_blink_V2_FreeRTOS.elf:     file format elf32-littlearm
mis_programas/Super_blink_V2_FreeRTOS/out/Super_blink_V2_FreeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000591

Program Header:
0x70000001 off    0x00014cd0 vaddr 0x1a004cd0 paddr 0x1a004cd0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002ab8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004cd8 memsz 0x00004cd8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004cd8 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ccc  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002ab8  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004ccc  1a004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004cd0  1a004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002b5c  10002b5c  000200a4  2**2
                  CONTENTS
 19 .debug_info   00023355  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000049aa  00000000  00000000  000433f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009e7a  00000000  00000000  00047da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000e20  00000000  00000000  00051c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000f60  00000000  00000000  00052a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000e5e2  00000000  00000000  0005399d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001050d  00000000  00000000  00061f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f9de  00000000  00000000  0007248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000a1e6a  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a1ee9  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002a24  00000000  00000000  000a1f20  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004ccc l    d  .init_array	00000000 .init_array
1a004cd0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b5c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 super_blink_V2_freeRTOS.c
00000000 l    df *ABS*	00000000 system.c
100000a4 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a0006e4 l     F .text	00000064 prvHeapInit
100000ac l     O .bss	00002000 ucHeap
1a000748 l     F .text	00000058 prvInsertBlockIntoFreeList
100000a8 l     O .bss	00000004 pxEnd
100020ac l     O .bss	00000004 xBlockAllocatedBit
100020b0 l     O .bss	00000004 xFreeBytesRemaining
100020b4 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020b8 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a00092c l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a00093e l     F .text	0000001e prvIsQueueFull
1a00095c l     F .text	0000001a prvIsQueueEmpty
1a000976 l     F .text	00000076 prvCopyDataToQueue
1a0009ec l     F .text	00000024 prvCopyDataFromQueue
1a000a10 l     F .text	0000006e prvUnlockQueue
1a000b04 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c0 l     O .bss	00000168 uxIdleTaskStack.10728
10002228 l     O .bss	000005a0 uxTimerTaskStack.10735
100027c8 l     O .bss	00000060 xIdleTaskTCB.10727
10002828 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0012e0 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00130c l     F .text	00000092 prvInitialiseNewTask
1a0013a0 l     F .text	00000068 prvInitialiseTaskLists
1a001408 l     F .text	000000ac prvAddNewTaskToReadyList
1a0014b4 l     F .text	00000038 prvDeleteTCB
1a0014ec l     F .text	0000004c prvCheckTasksWaitingTermination
1a001538 l     F .text	00000028 prvIdleTask
1a001560 l     F .text	00000098 prvAddCurrentTaskToDelayedList
1000288c l     O .bss	00000004 pxDelayedTaskList
10002890 l     O .bss	00000004 pxOverflowDelayedTaskList
10002894 l     O .bss	0000008c pxReadyTasksLists
10002920 l     O .bss	00000004 uxCurrentNumberOfTasks
10002924 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002928 l     O .bss	00000004 uxPendedTicks
1000292c l     O .bss	00000004 uxSchedulerSuspended
10002930 l     O .bss	00000004 uxTaskNumber
10002934 l     O .bss	00000004 uxTopReadyPriority
10002938 l     O .bss	00000014 xDelayedTaskList1
1000294c l     O .bss	00000014 xDelayedTaskList2
10002960 l     O .bss	00000004 xNextTaskUnblockTime
10002964 l     O .bss	00000004 xNumOfOverflows
10002968 l     O .bss	00000014 xPendingReadyList
1000297c l     O .bss	00000004 xSchedulerRunning
10002980 l     O .bss	00000014 xSuspendedTaskList
10002994 l     O .bss	00000014 xTasksWaitingTermination
100029a8 l     O .bss	00000004 xTickCount
100029ac l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001e9c l     F .text	00000020 prvGetNextExpireTime
1a001ebc l     F .text	00000048 prvInsertTimerInActiveList
1a001f04 l     F .text	00000070 prvCheckForValidListAndQueue
1a0022b8 l     F .text	00000016 prvTimerTask
1a002044 l     F .text	00000078 prvSwitchTimerLists
1a0020bc l     F .text	0000002c prvSampleTimeNow
1a0020e8 l     F .text	00000060 prvProcessExpiredTimer
1a002148 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0021bc l     F .text	000000fc prvProcessReceivedCommands
100029b0 l     O .bss	00000004 pxCurrentTimerList
100029b4 l     O .bss	00000004 pxOverflowTimerList
100029b8 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a58 l     O .bss	00000014 xActiveTimerList1
10002a6c l     O .bss	00000014 xActiveTimerList2
10002a80 l     O .bss	00000004 xLastTime.11777
10002a84 l     O .bss	00000050 xStaticTimerQueue.11827
10002ad4 l     O .bss	00000004 xTimerQueue
10002ad8 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0022d0 l     F .text	00000040 prvTaskExitError
1a002310 l     F .text	00000022 prvPortStartFirstTask
1a002338 l     F .text	0000000e vPortEnableVFP
1a0023a0 l       .text	00000000 pxCurrentTCBConst2
1a002480 l       .text	00000000 pxCurrentTCBConst
10002adc l     O .bss	00000001 ucMaxSysCallPriority
10002ae0 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002674 l     F .text	00000044 Board_LED_Init
1a0026b8 l     F .text	00000040 Board_TEC_Init
1a0026f8 l     F .text	00000040 Board_GPIO_Init
1a002738 l     F .text	00000030 Board_ADC_Init
1a002768 l     F .text	00000038 Board_SPI_Init
1a0027a0 l     F .text	00000024 Board_I2C_Init
1a0049d8 l     O .text	00000008 GpioButtons
1a0049e0 l     O .text	0000000c GpioLeds
1a0049ec l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004a04 l     O .text	00000004 InitClkStates
1a004a08 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002914 l     F .text	0000002c Chip_UART_GetIndex
1a004a7c l     O .text	00000008 UART_BClock
1a004a84 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002a7c l     F .text	00000014 Chip_ADC_GetClockIndex
1a002a90 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002b44 l     F .text	000000a4 pll_calc_divs
1a002be8 l     F .text	0000010c pll_get_frac
1a002cf4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002f68 l     F .text	00000022 Chip_Clock_GetDivRate
10002ae8 l     O .bss	00000008 audio_usb_pll_freq
1a004a98 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004b04 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0032bc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0032d0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0033c4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002af0 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003b60 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004280 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004cd0 l       .init_array	00000000 __init_array_end
1a004ccc l       .bss_RAM5	00000000 __preinit_array_end
1a004ccc l       .init_array	00000000 __init_array_start
1a004ccc l       .bss_RAM5	00000000 __preinit_array_start
1a002d8c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000630 g     F .text	00000012 _isatty_r
1a003ee4 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000642 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0023e8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003eb4 g     F .text	00000030 printf
1a00285a g     F .text	00000008 __stdio_init
1a004006 g     F .text	00000024 __sseek
1a003be0 g     F .text	00000060 __sinit
1a004034 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001168 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003bb4 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002b36 g     F .text	0000000c Chip_ADC_SetResolution
1a00427e g     F .text	00000002 __malloc_unlock
1a002484 g     F .text	0000002c SysTick_Handler
1a00058c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0027fc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002420 g     F .text	00000064 PendSV_Handler
1a000d80 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004cd8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002888 g     O .bss	00000004 pxCurrentTCB
1a000626 g     F .text	0000000a _fstat_r
53ff72fe g       *ABS*	00000000 __valid_user_code_checksum
1a004cd8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001b94 g     F .text	00000018 vTaskInternalSetTimeOutState
10002afc g     O .bss	00000004 sem_emg
1a000350 g     F .text	00000038 Tarea_sincronismo_blink
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00300a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0024e8 g     F .text	00000110 xPortStartScheduler
1a003d3c g     F .text	00000016 memcpy
1a001aa0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003ba8 g     F .text	0000000c _cleanup_r
1a0024b0  w    F .text	00000038 vPortSetupTimerInterrupt
1a003700 g     F .text	00000000 .hidden __aeabi_uldivmod
10002b5c g       .noinit	00000000 _noinit
1a003f9c g     F .text	00000010 puts
1a0008bc g     F .text	00000070 vPortFree
10002b54 g     O .bss	00000004 SystemCoreClock
1a002940 g     F .text	00000054 Chip_UART_Init
1a000fa4 g     F .text	0000019c xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0025f8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003088 g     F .text	0000004c Chip_Clock_GetRate
1a0011d6 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00289c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003730 g     F .text	000002cc .hidden __udivmoddi4
1a0006c4 g     F .text	00000020 _sbrk_r
1a0049d4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00064c g     F .text	0000004e _read_r
1a0011d0 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000e4c g     F .text	00000158 xQueueReceive
10002b14 g     O .bss	00000040 xQueueRegistry
1a001264 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0003d0 g     F .text	00000054 Tarea_blink_rojo
1a004cd0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004c94 g     O .text	00000004 _global_impure_ptr
1a003cf4 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0007a0 g     F .text	0000011c pvPortMalloc
1a002818 g     F .text	00000030 Board_Init
1a00061a  w    F .text	00000002 _init
1a0011ba g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001774 g     F .text	0000000c xTaskGetTickCount
1a000c04 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1a000388 g     F .text	00000048 Tarea_blink_amarillo
10002b5c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000590 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003284 g     F .text	00000038 Chip_I2C_SetClockRate
1a001d10 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002d40 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001b08 g     F .text	0000008c xTaskRemoveFromEventList
1a0012a8  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004c34 g     O .text	00000020 __sf_fake_stderr
10002b00 g     O .bss	00000004 sem_stop_verde
1a003260 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002efc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004b4c g     O .text	000000e6 gpioPinsInit
1a00127c  w    F .text	0000002c vAssertCalled
1a001e80 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a0032e8 g     F .text	00000012 Chip_SSP_SetClockRate
1a0042ae g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a004810 g     F .text	00000000 memchr
1a001bac g     F .text	00000080 xTaskCheckForTimeOut
1a003d64 g     F .text	0000009c _free_r
1a002fe4 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001c58 g     F .text	000000b8 xTaskPriorityInherit
100000a4 g       .bss	00000000 _bss
1a000300 g     F .text	00000050 Tarea_pulsador
1a002b04 g     F .text	00000032 Chip_ADC_SetSampleRate
10002ae4 g     O .bss	00000004 freeRtosInterruptCallback
1a001764 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0032fa g     F .text	0000003e Chip_SSP_SetBitRate
1a001222 g     F .text	00000028 uxListRemove
1a000424 g     F .text	0000006c Tarea_blink_verde
1a0030e8 g     F .text	00000002 Chip_GPIO_Init
1a004a00 g     O .text	00000004 OscRateIn
10002b04 g     O .bss	00000004 sem_blink_on
1a0015f8 g     F .text	00000072 xTaskCreateStatic
10002b5c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0019d8 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000b26 g     F .text	00000090 xQueueGenericCreateStatic
1a001ad0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00061c g     F .text	0000000a _close_r
1a0033f8 g     F .text	000001ac gpioInit
1a00124c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001fd8 g     F .text	0000006c xTimerGenericCommand
1a0040d8 g     F .text	000000dc __swsetup_r
1a0012c4  w    F .text	0000001c vApplicationStackOverflowHook
1a0039fc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003c40 g     F .text	00000078 __sfp
1a003fac g     F .text	00000022 __sread
1a003678 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00427c g     F .text	00000002 __malloc_lock
1a0027e8 g     F .text	00000014 Board_UARTPutChar
10002b08 g     O .bss	00000004 sem_act
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003b0c g     F .text	00000054 _fflush_r
1a004c54 g     O .text	00000020 __sf_fake_stdin
1a002da8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003d52 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000490 g     F .text	000000fc main
10002b0c g     O .bss	00000004 sem_blink_off
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0011ee g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002380 g     F .text	00000024 SVC_Handler
1a00402a g     F .text	00000008 __sclose
1a001f74 g     F .text	00000064 xTimerCreateTimerTask
1a003e00 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003018 g     F .text	0000003c Chip_Clock_EnableOpts
1a002852 g     F .text	00000008 __stdio_getchar
1a000bb6 g     F .text	0000004e xQueueGenericCreate
1a002dc4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002e7c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
10002b10 g     O .bss	00000004 sem_stop_amarillo
1a003370 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0035a4 g     F .text	0000006a gpioWrite
1a000618  w    F .text	00000002 _fini
1a003eb4 g     F .text	00000030 iprintf
1a001898 g     F .text	000000f4 xTaskResumeAll
1a0016d0 g     F .text	00000094 vTaskStartScheduler
1a002ac4 g     F .text	00000040 Chip_ADC_Init
10002b58 g     O .bss	00000004 g_pUsbApi
1a002864 g     F .text	00000038 Board_SetupMuxing
1a002994 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00069a g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004500 g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a003a00 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001c2c g     F .text	0000000c vTaskMissedYield
10002b5c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003338 g     F .text	00000038 Chip_SSP_Init
1a001140 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001780 g     F .text	00000118 xTaskIncrementTick
1a0041b4 g     F .text	00000048 __swhatbuf_r
1a002654 g     F .text	00000020 DAC_IRQHandler
1a0027c4 g     F .text	00000024 Board_Debug_Init
1a002848 g     F .text	0000000a __stdio_putchar
1a000a80 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a003240 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00166a g     F .text	00000066 xTaskCreate
1a0030ec g     F .text	00000154 Chip_SetupCoreClock
1a003fce g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a0042d4 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003cb8 g     F .text	0000003c _fwalk_reent
1a0030d4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a00198c g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004c74 g     O .text	00000020 __sf_fake_stdout
1a001c38 g     F .text	00000020 xTaskGetSchedulerState
1a001dc0 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0039fc  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0041fc g     F .text	00000080 __smakebuf_r
1a00234c g     F .text	0000002c pxPortInitialiseStack
1a0045ec g     F .text	00000224 _printf_i
1a003054 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002af8 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00360e g     F .text	00000068 gpioRead
1a003694 g     F .text	0000006c boardInit
1a0023a4 g     F .text	00000044 vPortEnterCritical
10002af4 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0042d4 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002f8c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0033a8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002908 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 91 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fe 72 ff 53     }............r.S
	...
1a00002c:	81 23 00 1a 85 01 00 1a 00 00 00 00 21 24 00 1a     .#..........!$..
1a00003c:	85 24 00 1a                                         .$..

1a000040 <g_pfnVendorVectors>:
1a000040:	55 26 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     U&..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	79 36 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     y6..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004cd8 	.word	0x1a004cd8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a004cd8 	.word	0x1a004cd8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004cd8 	.word	0x1a004cd8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004cd8 	.word	0x1a004cd8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004cd8 	.word	0x1a004cd8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002ab8 	.word	0x00002ab8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Tarea_pulsador>:
}


/*==================[definiciones de funciones/tareas]=====================*/

void Tarea_pulsador( void* taskParmPtr ){ // Tareas de procesamiento continuo --> tiene prioridad baja y simpre que se pueda va a estar corriendose									//ej: Sensor, muestrear un buffer, esperar datos bluetooth para procesar.
1a000300:	b508      	push	{r3, lr}
1a000302:	e003      	b.n	1a00030c <Tarea_pulsador+0xc>
   while(TRUE) {
	    if(gpioRead(PULSADOR_ACT)== FALSE){
			  xSemaphoreGive(sem_act);
			  vTaskDelay( 1000/ portTICK_RATE_MS );
		  }
	    if(gpioRead(PULSADOR_EMG)== FALSE){
1a000304:	2027      	movs	r0, #39	; 0x27
1a000306:	f003 f982 	bl	1a00360e <gpioRead>
1a00030a:	b180      	cbz	r0, 1a00032e <Tarea_pulsador+0x2e>
	    if(gpioRead(PULSADOR_ACT)== FALSE){
1a00030c:	2024      	movs	r0, #36	; 0x24
1a00030e:	f003 f97e 	bl	1a00360e <gpioRead>
1a000312:	2800      	cmp	r0, #0
1a000314:	d1f6      	bne.n	1a000304 <Tarea_pulsador+0x4>
			  xSemaphoreGive(sem_act);
1a000316:	2300      	movs	r3, #0
1a000318:	461a      	mov	r2, r3
1a00031a:	4619      	mov	r1, r3
1a00031c:	480a      	ldr	r0, [pc, #40]	; (1a000348 <Tarea_pulsador+0x48>)
1a00031e:	6800      	ldr	r0, [r0, #0]
1a000320:	f000 fc70 	bl	1a000c04 <xQueueGenericSend>
			  vTaskDelay( 1000/ portTICK_RATE_MS );
1a000324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000328:	f001 fb30 	bl	1a00198c <vTaskDelay>
1a00032c:	e7ea      	b.n	1a000304 <Tarea_pulsador+0x4>
			  xSemaphoreGive(sem_emg);
1a00032e:	2300      	movs	r3, #0
1a000330:	461a      	mov	r2, r3
1a000332:	4619      	mov	r1, r3
1a000334:	4805      	ldr	r0, [pc, #20]	; (1a00034c <Tarea_pulsador+0x4c>)
1a000336:	6800      	ldr	r0, [r0, #0]
1a000338:	f000 fc64 	bl	1a000c04 <xQueueGenericSend>
			  vTaskDelay( TIEMPO_P/ portTICK_RATE_MS );
1a00033c:	f241 3088 	movw	r0, #5000	; 0x1388
1a000340:	f001 fb24 	bl	1a00198c <vTaskDelay>
1a000344:	e7e2      	b.n	1a00030c <Tarea_pulsador+0xc>
1a000346:	bf00      	nop
1a000348:	10002b08 	.word	0x10002b08
1a00034c:	10002afc 	.word	0x10002afc

1a000350 <Tarea_sincronismo_blink>:
			   vTaskDelay( (TIEMPO_R)/ portTICK_RATE_MS);
		   }
	   }
}

void Tarea_sincronismo_blink( void* taskParmPtr ){
1a000350:	b508      	push	{r3, lr}
   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
	   	  xSemaphoreGive(sem_blink_on);
1a000352:	2300      	movs	r3, #0
1a000354:	461a      	mov	r2, r3
1a000356:	4619      	mov	r1, r3
1a000358:	4809      	ldr	r0, [pc, #36]	; (1a000380 <Tarea_sincronismo_blink+0x30>)
1a00035a:	6800      	ldr	r0, [r0, #0]
1a00035c:	f000 fc52 	bl	1a000c04 <xQueueGenericSend>
		  vTaskDelay( TIEMPO_V/ portTICK_RATE_MS );
1a000360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000364:	f001 fb12 	bl	1a00198c <vTaskDelay>
		  xSemaphoreGive(sem_blink_off);
1a000368:	2300      	movs	r3, #0
1a00036a:	461a      	mov	r2, r3
1a00036c:	4619      	mov	r1, r3
1a00036e:	4805      	ldr	r0, [pc, #20]	; (1a000384 <Tarea_sincronismo_blink+0x34>)
1a000370:	6800      	ldr	r0, [r0, #0]
1a000372:	f000 fc47 	bl	1a000c04 <xQueueGenericSend>
		  vTaskDelay( TIEMPO_V/ portTICK_RATE_MS );
1a000376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00037a:	f001 fb07 	bl	1a00198c <vTaskDelay>
1a00037e:	e7e8      	b.n	1a000352 <Tarea_sincronismo_blink+0x2>
1a000380:	10002b04 	.word	0x10002b04
1a000384:	10002b0c 	.word	0x10002b0c

1a000388 <Tarea_blink_amarillo>:
	   }
}
void Tarea_blink_amarillo( void* taskParmPtr ){
1a000388:	b508      	push	{r3, lr}
1a00038a:	e006      	b.n	1a00039a <Tarea_blink_amarillo+0x12>

   while(TRUE) {
	   if(xSemaphoreTake (sem_act, 20/ portTICK_RATE_MS) == pdTRUE ){   /* Si se tiene el semáforo : se activa el led amarillo*/ //
		   gpioWrite( LED_AMARILLO, !gpioRead(LED_AMARILLO));
	   }
	 if(xSemaphoreTake (sem_stop_amarillo, 20/ portTICK_RATE_MS) == pdTRUE ){   /* Si se tiene el semáforo : se activa el led amarillo*/
1a00038c:	2114      	movs	r1, #20
1a00038e:	4b0e      	ldr	r3, [pc, #56]	; (1a0003c8 <Tarea_blink_amarillo+0x40>)
1a000390:	6818      	ldr	r0, [r3, #0]
1a000392:	f000 fe07 	bl	1a000fa4 <xQueueSemaphoreTake>
1a000396:	2801      	cmp	r0, #1
1a000398:	d010      	beq.n	1a0003bc <Tarea_blink_amarillo+0x34>
	   if(xSemaphoreTake (sem_act, 20/ portTICK_RATE_MS) == pdTRUE ){   /* Si se tiene el semáforo : se activa el led amarillo*/ //
1a00039a:	2114      	movs	r1, #20
1a00039c:	4b0b      	ldr	r3, [pc, #44]	; (1a0003cc <Tarea_blink_amarillo+0x44>)
1a00039e:	6818      	ldr	r0, [r3, #0]
1a0003a0:	f000 fe00 	bl	1a000fa4 <xQueueSemaphoreTake>
1a0003a4:	2801      	cmp	r0, #1
1a0003a6:	d1f1      	bne.n	1a00038c <Tarea_blink_amarillo+0x4>
		   gpioWrite( LED_AMARILLO, !gpioRead(LED_AMARILLO));
1a0003a8:	202c      	movs	r0, #44	; 0x2c
1a0003aa:	f003 f930 	bl	1a00360e <gpioRead>
1a0003ae:	fab0 f180 	clz	r1, r0
1a0003b2:	0949      	lsrs	r1, r1, #5
1a0003b4:	202c      	movs	r0, #44	; 0x2c
1a0003b6:	f003 f8f5 	bl	1a0035a4 <gpioWrite>
1a0003ba:	e7e7      	b.n	1a00038c <Tarea_blink_amarillo+0x4>
		gpioWrite( LED_AMARILLO, OFF);
1a0003bc:	2100      	movs	r1, #0
1a0003be:	202c      	movs	r0, #44	; 0x2c
1a0003c0:	f003 f8f0 	bl	1a0035a4 <gpioWrite>
1a0003c4:	e7e9      	b.n	1a00039a <Tarea_blink_amarillo+0x12>
1a0003c6:	bf00      	nop
1a0003c8:	10002b10 	.word	0x10002b10
1a0003cc:	10002b08 	.word	0x10002b08

1a0003d0 <Tarea_blink_rojo>:
	   }
   }
}

void Tarea_blink_rojo( void* taskParmPtr ){
1a0003d0:	b508      	push	{r3, lr}

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
	   if(xSemaphoreTake (sem_emg,portMAX_DELAY) == pdTRUE ){   /* Si se tiene el semáforo del pulsador : se activa el led rojo*/
1a0003d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003d6:	4b10      	ldr	r3, [pc, #64]	; (1a000418 <Tarea_blink_rojo+0x48>)
1a0003d8:	6818      	ldr	r0, [r3, #0]
1a0003da:	f000 fde3 	bl	1a000fa4 <xQueueSemaphoreTake>
1a0003de:	2801      	cmp	r0, #1
1a0003e0:	d1f7      	bne.n	1a0003d2 <Tarea_blink_rojo+0x2>
		gpioWrite( LED_ROJO, ON);
1a0003e2:	2101      	movs	r1, #1
1a0003e4:	202b      	movs	r0, #43	; 0x2b
1a0003e6:	f003 f8dd 	bl	1a0035a4 <gpioWrite>
		xSemaphoreGive(sem_stop_amarillo); //activo el semaforo que hara que el led se apague por un tiempo
1a0003ea:	2300      	movs	r3, #0
1a0003ec:	461a      	mov	r2, r3
1a0003ee:	4619      	mov	r1, r3
1a0003f0:	480a      	ldr	r0, [pc, #40]	; (1a00041c <Tarea_blink_rojo+0x4c>)
1a0003f2:	6800      	ldr	r0, [r0, #0]
1a0003f4:	f000 fc06 	bl	1a000c04 <xQueueGenericSend>
		xSemaphoreGive(sem_stop_verde); //activo el semaforo que hara que el led se apague por un tiempo
1a0003f8:	2300      	movs	r3, #0
1a0003fa:	461a      	mov	r2, r3
1a0003fc:	4619      	mov	r1, r3
1a0003fe:	4808      	ldr	r0, [pc, #32]	; (1a000420 <Tarea_blink_rojo+0x50>)
1a000400:	6800      	ldr	r0, [r0, #0]
1a000402:	f000 fbff 	bl	1a000c04 <xQueueGenericSend>
		vTaskDelay( TIEMPO_R/ portTICK_RATE_MS );
1a000406:	f640 10c4 	movw	r0, #2500	; 0x9c4
1a00040a:	f001 fabf 	bl	1a00198c <vTaskDelay>
		gpioWrite( LED_ROJO, OFF);
1a00040e:	2100      	movs	r1, #0
1a000410:	202b      	movs	r0, #43	; 0x2b
1a000412:	f003 f8c7 	bl	1a0035a4 <gpioWrite>
1a000416:	e7dc      	b.n	1a0003d2 <Tarea_blink_rojo+0x2>
1a000418:	10002afc 	.word	0x10002afc
1a00041c:	10002b10 	.word	0x10002b10
1a000420:	10002b00 	.word	0x10002b00

1a000424 <Tarea_blink_verde>:
void Tarea_blink_verde( void* taskParmPtr ){
1a000424:	b508      	push	{r3, lr}
1a000426:	e00e      	b.n	1a000446 <Tarea_blink_verde+0x22>
			   gpioWrite( LED_VERDE, ON);
1a000428:	2101      	movs	r1, #1
1a00042a:	202d      	movs	r0, #45	; 0x2d
1a00042c:	f003 f8ba 	bl	1a0035a4 <gpioWrite>
			   printf("hola\r\n");
1a000430:	4813      	ldr	r0, [pc, #76]	; (1a000480 <Tarea_blink_verde+0x5c>)
1a000432:	f003 fdb3 	bl	1a003f9c <puts>
1a000436:	e00d      	b.n	1a000454 <Tarea_blink_verde+0x30>
		   if(xSemaphoreTake(sem_stop_verde , 20/ portTICK_RATE_MS) == pdTRUE ){   /* Si se tiene el semáforo : se activa el led amarillo*/
1a000438:	2114      	movs	r1, #20
1a00043a:	4b12      	ldr	r3, [pc, #72]	; (1a000484 <Tarea_blink_verde+0x60>)
1a00043c:	6818      	ldr	r0, [r3, #0]
1a00043e:	f000 fdb1 	bl	1a000fa4 <xQueueSemaphoreTake>
1a000442:	2801      	cmp	r0, #1
1a000444:	d012      	beq.n	1a00046c <Tarea_blink_verde+0x48>
	       if(xSemaphoreTake(sem_blink_on , 20/ portTICK_RATE_MS) == pdTRUE ){   /* Si se tiene el semáforo : se activa el led amarillo*/
1a000446:	2114      	movs	r1, #20
1a000448:	4b0f      	ldr	r3, [pc, #60]	; (1a000488 <Tarea_blink_verde+0x64>)
1a00044a:	6818      	ldr	r0, [r3, #0]
1a00044c:	f000 fdaa 	bl	1a000fa4 <xQueueSemaphoreTake>
1a000450:	2801      	cmp	r0, #1
1a000452:	d0e9      	beq.n	1a000428 <Tarea_blink_verde+0x4>
		   if(xSemaphoreTake(sem_blink_off , 20/ portTICK_RATE_MS) == pdTRUE ){   /* Si se tiene el semáforo : se activa el led amarillo*/
1a000454:	2114      	movs	r1, #20
1a000456:	4b0d      	ldr	r3, [pc, #52]	; (1a00048c <Tarea_blink_verde+0x68>)
1a000458:	6818      	ldr	r0, [r3, #0]
1a00045a:	f000 fda3 	bl	1a000fa4 <xQueueSemaphoreTake>
1a00045e:	2801      	cmp	r0, #1
1a000460:	d1ea      	bne.n	1a000438 <Tarea_blink_verde+0x14>
			   gpioWrite( LED_VERDE, OFF);
1a000462:	2100      	movs	r1, #0
1a000464:	202d      	movs	r0, #45	; 0x2d
1a000466:	f003 f89d 	bl	1a0035a4 <gpioWrite>
1a00046a:	e7e5      	b.n	1a000438 <Tarea_blink_verde+0x14>
			   gpioWrite( LED_VERDE, OFF);
1a00046c:	2100      	movs	r1, #0
1a00046e:	202d      	movs	r0, #45	; 0x2d
1a000470:	f003 f898 	bl	1a0035a4 <gpioWrite>
			   vTaskDelay( (TIEMPO_R)/ portTICK_RATE_MS);
1a000474:	f640 10c4 	movw	r0, #2500	; 0x9c4
1a000478:	f001 fa88 	bl	1a00198c <vTaskDelay>
1a00047c:	e7e3      	b.n	1a000446 <Tarea_blink_verde+0x22>
1a00047e:	bf00      	nop
1a000480:	1a0048b0 	.word	0x1a0048b0
1a000484:	10002b00 	.word	0x10002b00
1a000488:	10002b04 	.word	0x10002b04
1a00048c:	10002b0c 	.word	0x10002b0c

1a000490 <main>:
{
1a000490:	b500      	push	{lr}
1a000492:	b083      	sub	sp, #12
   boardConfig();
1a000494:	f003 f8fe 	bl	1a003694 <boardInit>
   sem_act= xSemaphoreCreateBinary(); //xSemaphoreCreateCounting(3, 0); //creo semaforo contador para poder registrar la cantidad de eventos que ocurren y que la tarea que lleva a cabo la accion no se pierda nada
1a000498:	2203      	movs	r2, #3
1a00049a:	2100      	movs	r1, #0
1a00049c:	2001      	movs	r0, #1
1a00049e:	f000 fb8a 	bl	1a000bb6 <xQueueGenericCreate>
1a0004a2:	4b2b      	ldr	r3, [pc, #172]	; (1a000550 <main+0xc0>)
1a0004a4:	6018      	str	r0, [r3, #0]
   sem_emg=xSemaphoreCreateBinary(); //creo el semaforo
1a0004a6:	2203      	movs	r2, #3
1a0004a8:	2100      	movs	r1, #0
1a0004aa:	2001      	movs	r0, #1
1a0004ac:	f000 fb83 	bl	1a000bb6 <xQueueGenericCreate>
1a0004b0:	4b28      	ldr	r3, [pc, #160]	; (1a000554 <main+0xc4>)
1a0004b2:	6018      	str	r0, [r3, #0]
   sem_stop_verde=xSemaphoreCreateBinary();
1a0004b4:	2203      	movs	r2, #3
1a0004b6:	2100      	movs	r1, #0
1a0004b8:	2001      	movs	r0, #1
1a0004ba:	f000 fb7c 	bl	1a000bb6 <xQueueGenericCreate>
1a0004be:	4b26      	ldr	r3, [pc, #152]	; (1a000558 <main+0xc8>)
1a0004c0:	6018      	str	r0, [r3, #0]
   sem_stop_amarillo=xSemaphoreCreateBinary();
1a0004c2:	2203      	movs	r2, #3
1a0004c4:	2100      	movs	r1, #0
1a0004c6:	2001      	movs	r0, #1
1a0004c8:	f000 fb75 	bl	1a000bb6 <xQueueGenericCreate>
1a0004cc:	4b23      	ldr	r3, [pc, #140]	; (1a00055c <main+0xcc>)
1a0004ce:	6018      	str	r0, [r3, #0]
   sem_blink_on=xSemaphoreCreateBinary();
1a0004d0:	2203      	movs	r2, #3
1a0004d2:	2100      	movs	r1, #0
1a0004d4:	2001      	movs	r0, #1
1a0004d6:	f000 fb6e 	bl	1a000bb6 <xQueueGenericCreate>
1a0004da:	4b21      	ldr	r3, [pc, #132]	; (1a000560 <main+0xd0>)
1a0004dc:	6018      	str	r0, [r3, #0]
   sem_blink_off=xSemaphoreCreateBinary();
1a0004de:	2203      	movs	r2, #3
1a0004e0:	2100      	movs	r1, #0
1a0004e2:	2001      	movs	r0, #1
1a0004e4:	f000 fb67 	bl	1a000bb6 <xQueueGenericCreate>
1a0004e8:	4b1e      	ldr	r3, [pc, #120]	; (1a000564 <main+0xd4>)
1a0004ea:	6018      	str	r0, [r3, #0]
   xTaskCreate(
1a0004ec:	2400      	movs	r4, #0
1a0004ee:	9401      	str	r4, [sp, #4]
1a0004f0:	2301      	movs	r3, #1
1a0004f2:	9300      	str	r3, [sp, #0]
1a0004f4:	4623      	mov	r3, r4
1a0004f6:	22b4      	movs	r2, #180	; 0xb4
1a0004f8:	491b      	ldr	r1, [pc, #108]	; (1a000568 <main+0xd8>)
1a0004fa:	481c      	ldr	r0, [pc, #112]	; (1a00056c <main+0xdc>)
1a0004fc:	f001 f8b5 	bl	1a00166a <xTaskCreate>
   xTaskCreate(
1a000500:	4d1b      	ldr	r5, [pc, #108]	; (1a000570 <main+0xe0>)
1a000502:	9401      	str	r4, [sp, #4]
1a000504:	2602      	movs	r6, #2
1a000506:	9600      	str	r6, [sp, #0]
1a000508:	4623      	mov	r3, r4
1a00050a:	22b4      	movs	r2, #180	; 0xb4
1a00050c:	4629      	mov	r1, r5
1a00050e:	4819      	ldr	r0, [pc, #100]	; (1a000574 <main+0xe4>)
1a000510:	f001 f8ab 	bl	1a00166a <xTaskCreate>
   xTaskCreate(
1a000514:	9401      	str	r4, [sp, #4]
1a000516:	9600      	str	r6, [sp, #0]
1a000518:	4623      	mov	r3, r4
1a00051a:	22b4      	movs	r2, #180	; 0xb4
1a00051c:	4629      	mov	r1, r5
1a00051e:	4816      	ldr	r0, [pc, #88]	; (1a000578 <main+0xe8>)
1a000520:	f001 f8a3 	bl	1a00166a <xTaskCreate>
   xTaskCreate(
1a000524:	9401      	str	r4, [sp, #4]
1a000526:	2303      	movs	r3, #3
1a000528:	9300      	str	r3, [sp, #0]
1a00052a:	4623      	mov	r3, r4
1a00052c:	22b4      	movs	r2, #180	; 0xb4
1a00052e:	4913      	ldr	r1, [pc, #76]	; (1a00057c <main+0xec>)
1a000530:	4813      	ldr	r0, [pc, #76]	; (1a000580 <main+0xf0>)
1a000532:	f001 f89a 	bl	1a00166a <xTaskCreate>
  xTaskCreate(
1a000536:	9401      	str	r4, [sp, #4]
1a000538:	2304      	movs	r3, #4
1a00053a:	9300      	str	r3, [sp, #0]
1a00053c:	4623      	mov	r3, r4
1a00053e:	22b4      	movs	r2, #180	; 0xb4
1a000540:	4910      	ldr	r1, [pc, #64]	; (1a000584 <main+0xf4>)
1a000542:	4811      	ldr	r0, [pc, #68]	; (1a000588 <main+0xf8>)
1a000544:	f001 f891 	bl	1a00166a <xTaskCreate>
   vTaskStartScheduler();
1a000548:	f001 f8c2 	bl	1a0016d0 <vTaskStartScheduler>
1a00054c:	e7fe      	b.n	1a00054c <main+0xbc>
1a00054e:	bf00      	nop
1a000550:	10002b08 	.word	0x10002b08
1a000554:	10002afc 	.word	0x10002afc
1a000558:	10002b00 	.word	0x10002b00
1a00055c:	10002b10 	.word	0x10002b10
1a000560:	10002b04 	.word	0x10002b04
1a000564:	10002b0c 	.word	0x10002b0c
1a000568:	1a0048b8 	.word	0x1a0048b8
1a00056c:	1a000301 	.word	0x1a000301
1a000570:	1a0048c8 	.word	0x1a0048c8
1a000574:	1a000425 	.word	0x1a000425
1a000578:	1a000351 	.word	0x1a000351
1a00057c:	1a0048dc 	.word	0x1a0048dc
1a000580:	1a000389 	.word	0x1a000389
1a000584:	1a0048f4 	.word	0x1a0048f4
1a000588:	1a0003d1 	.word	0x1a0003d1

1a00058c <initialise_monitor_handles>:
}
1a00058c:	4770      	bx	lr
1a00058e:	Address 0x000000001a00058e is out of bounds.


1a000590 <Reset_Handler>:
void Reset_Handler(void) {
1a000590:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000592:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000594:	4b19      	ldr	r3, [pc, #100]	; (1a0005fc <Reset_Handler+0x6c>)
1a000596:	4a1a      	ldr	r2, [pc, #104]	; (1a000600 <Reset_Handler+0x70>)
1a000598:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00059a:	3304      	adds	r3, #4
1a00059c:	4a19      	ldr	r2, [pc, #100]	; (1a000604 <Reset_Handler+0x74>)
1a00059e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005a0:	2300      	movs	r3, #0
1a0005a2:	e005      	b.n	1a0005b0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0005a4:	4a18      	ldr	r2, [pc, #96]	; (1a000608 <Reset_Handler+0x78>)
1a0005a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0005aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005ae:	3301      	adds	r3, #1
1a0005b0:	2b07      	cmp	r3, #7
1a0005b2:	d9f7      	bls.n	1a0005a4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0005b4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0005b6:	4b15      	ldr	r3, [pc, #84]	; (1a00060c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0005b8:	e007      	b.n	1a0005ca <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0005ba:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0005be:	689a      	ldr	r2, [r3, #8]
1a0005c0:	6859      	ldr	r1, [r3, #4]
1a0005c2:	6818      	ldr	r0, [r3, #0]
1a0005c4:	f7ff fde1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005c8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005ca:	4a11      	ldr	r2, [pc, #68]	; (1a000610 <Reset_Handler+0x80>)
1a0005cc:	4293      	cmp	r3, r2
1a0005ce:	d3f4      	bcc.n	1a0005ba <Reset_Handler+0x2a>
1a0005d0:	e006      	b.n	1a0005e0 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0005d2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005d4:	6859      	ldr	r1, [r3, #4]
1a0005d6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005da:	f7ff fde5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005de:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005e0:	4a0c      	ldr	r2, [pc, #48]	; (1a000614 <Reset_Handler+0x84>)
1a0005e2:	4293      	cmp	r3, r2
1a0005e4:	d3f5      	bcc.n	1a0005d2 <Reset_Handler+0x42>
    SystemInit();
1a0005e6:	f002 fec3 	bl	1a003370 <SystemInit>
    __libc_init_array();
1a0005ea:	f003 fb83 	bl	1a003cf4 <__libc_init_array>
    initialise_monitor_handles();
1a0005ee:	f7ff ffcd 	bl	1a00058c <initialise_monitor_handles>
    main();
1a0005f2:	f7ff ff4d 	bl	1a000490 <main>
        __asm__ volatile("wfi");
1a0005f6:	bf30      	wfi
1a0005f8:	e7fd      	b.n	1a0005f6 <Reset_Handler+0x66>
1a0005fa:	bf00      	nop
1a0005fc:	40053100 	.word	0x40053100
1a000600:	10df1000 	.word	0x10df1000
1a000604:	01dff7ff 	.word	0x01dff7ff
1a000608:	e000e280 	.word	0xe000e280
1a00060c:	1a000114 	.word	0x1a000114
1a000610:	1a000150 	.word	0x1a000150
1a000614:	1a000178 	.word	0x1a000178

1a000618 <_fini>:
void _fini(void) {}
1a000618:	4770      	bx	lr

1a00061a <_init>:
void _init(void) {}
1a00061a:	4770      	bx	lr

1a00061c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00061c:	2309      	movs	r3, #9
1a00061e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000624:	4770      	bx	lr

1a000626 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000626:	2358      	movs	r3, #88	; 0x58
1a000628:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00062a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00062e:	4770      	bx	lr

1a000630 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000630:	2902      	cmp	r1, #2
1a000632:	d801      	bhi.n	1a000638 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000634:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000636:	4770      	bx	lr
       SET_ERR(EBADF);
1a000638:	2309      	movs	r3, #9
1a00063a:	6003      	str	r3, [r0, #0]
       return -1;
1a00063c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000640:	4770      	bx	lr

1a000642 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000642:	2358      	movs	r3, #88	; 0x58
1a000644:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00064a:	4770      	bx	lr

1a00064c <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00064c:	2902      	cmp	r1, #2
1a00064e:	d81f      	bhi.n	1a000690 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000654:	461d      	mov	r5, r3
1a000656:	4617      	mov	r7, r2
1a000658:	4606      	mov	r6, r0
  size_t i = 0;
1a00065a:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00065c:	42ac      	cmp	r4, r5
1a00065e:	d211      	bcs.n	1a000684 <_read_r+0x38>
         int c = __stdio_getchar();
1a000660:	f002 f8f7 	bl	1a002852 <__stdio_getchar>
         if( c != -1 ){
1a000664:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000668:	d0f8      	beq.n	1a00065c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00066a:	f104 0801 	add.w	r8, r4, #1
1a00066e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000670:	280d      	cmp	r0, #13
1a000672:	d003      	beq.n	1a00067c <_read_r+0x30>
1a000674:	280a      	cmp	r0, #10
1a000676:	d001      	beq.n	1a00067c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000678:	4644      	mov	r4, r8
1a00067a:	e7ef      	b.n	1a00065c <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00067c:	f002 f8e9 	bl	1a002852 <__stdio_getchar>
               return i;
1a000680:	4640      	mov	r0, r8
1a000682:	e003      	b.n	1a00068c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000684:	2313      	movs	r3, #19
1a000686:	6033      	str	r3, [r6, #0]
      return -1;
1a000688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00068c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000690:	2313      	movs	r3, #19
1a000692:	6003      	str	r3, [r0, #0]
      return -1;
1a000694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000698:	4770      	bx	lr

1a00069a <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00069a:	2902      	cmp	r1, #2
1a00069c:	d80c      	bhi.n	1a0006b8 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00069e:	b570      	push	{r4, r5, r6, lr}
1a0006a0:	461d      	mov	r5, r3
1a0006a2:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0006a4:	2400      	movs	r4, #0
1a0006a6:	e003      	b.n	1a0006b0 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0006a8:	5d30      	ldrb	r0, [r6, r4]
1a0006aa:	f002 f8cd 	bl	1a002848 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0006ae:	3401      	adds	r4, #1
1a0006b0:	42ac      	cmp	r4, r5
1a0006b2:	d3f9      	bcc.n	1a0006a8 <_write_r+0xe>
       return n;
1a0006b4:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006b6:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006b8:	2313      	movs	r3, #19
1a0006ba:	6003      	str	r3, [r0, #0]
       return -1;
1a0006bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006c0:	4770      	bx	lr
1a0006c2:	Address 0x000000001a0006c2 is out of bounds.


1a0006c4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006c4:	4b05      	ldr	r3, [pc, #20]	; (1a0006dc <_sbrk_r+0x18>)
1a0006c6:	681b      	ldr	r3, [r3, #0]
1a0006c8:	b123      	cbz	r3, 1a0006d4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006ca:	4b04      	ldr	r3, [pc, #16]	; (1a0006dc <_sbrk_r+0x18>)
1a0006cc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006ce:	4401      	add	r1, r0
1a0006d0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006d2:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006d4:	4b01      	ldr	r3, [pc, #4]	; (1a0006dc <_sbrk_r+0x18>)
1a0006d6:	4a02      	ldr	r2, [pc, #8]	; (1a0006e0 <_sbrk_r+0x1c>)
1a0006d8:	601a      	str	r2, [r3, #0]
1a0006da:	e7f6      	b.n	1a0006ca <_sbrk_r+0x6>
1a0006dc:	100000a4 	.word	0x100000a4
1a0006e0:	10002b5c 	.word	0x10002b5c

1a0006e4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a0006e4:	4a12      	ldr	r2, [pc, #72]	; (1a000730 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0006e6:	f012 0f07 	tst.w	r2, #7
1a0006ea:	d01e      	beq.n	1a00072a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0006ec:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0006ee:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0006f2:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0006f6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0006f8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0006fa:	480e      	ldr	r0, [pc, #56]	; (1a000734 <prvHeapInit+0x50>)
1a0006fc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a0006fe:	2100      	movs	r1, #0
1a000700:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000702:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000704:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000706:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00070a:	480b      	ldr	r0, [pc, #44]	; (1a000738 <prvHeapInit+0x54>)
1a00070c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00070e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000710:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000712:	1a99      	subs	r1, r3, r2
1a000714:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000716:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000718:	4b08      	ldr	r3, [pc, #32]	; (1a00073c <prvHeapInit+0x58>)
1a00071a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00071c:	4b08      	ldr	r3, [pc, #32]	; (1a000740 <prvHeapInit+0x5c>)
1a00071e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000720:	4b08      	ldr	r3, [pc, #32]	; (1a000744 <prvHeapInit+0x60>)
1a000722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000726:	601a      	str	r2, [r3, #0]
}
1a000728:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a00072e:	e7e4      	b.n	1a0006fa <prvHeapInit+0x16>
1a000730:	100000ac 	.word	0x100000ac
1a000734:	100020b8 	.word	0x100020b8
1a000738:	100000a8 	.word	0x100000a8
1a00073c:	100020b4 	.word	0x100020b4
1a000740:	100020b0 	.word	0x100020b0
1a000744:	100020ac 	.word	0x100020ac

1a000748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000748:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00074a:	4b13      	ldr	r3, [pc, #76]	; (1a000798 <prvInsertBlockIntoFreeList+0x50>)
1a00074c:	681a      	ldr	r2, [r3, #0]
1a00074e:	4282      	cmp	r2, r0
1a000750:	d31b      	bcc.n	1a00078a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000752:	6859      	ldr	r1, [r3, #4]
1a000754:	185c      	adds	r4, r3, r1
1a000756:	4284      	cmp	r4, r0
1a000758:	d103      	bne.n	1a000762 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00075a:	6840      	ldr	r0, [r0, #4]
1a00075c:	4401      	add	r1, r0
1a00075e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000760:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000762:	6841      	ldr	r1, [r0, #4]
1a000764:	1844      	adds	r4, r0, r1
1a000766:	42a2      	cmp	r2, r4
1a000768:	d113      	bne.n	1a000792 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00076a:	4c0c      	ldr	r4, [pc, #48]	; (1a00079c <prvInsertBlockIntoFreeList+0x54>)
1a00076c:	6824      	ldr	r4, [r4, #0]
1a00076e:	42a2      	cmp	r2, r4
1a000770:	d00d      	beq.n	1a00078e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000772:	6852      	ldr	r2, [r2, #4]
1a000774:	4411      	add	r1, r2
1a000776:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000778:	681a      	ldr	r2, [r3, #0]
1a00077a:	6812      	ldr	r2, [r2, #0]
1a00077c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00077e:	4298      	cmp	r0, r3
1a000780:	d000      	beq.n	1a000784 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000782:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000784:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000788:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00078a:	4613      	mov	r3, r2
1a00078c:	e7de      	b.n	1a00074c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a00078e:	6004      	str	r4, [r0, #0]
1a000790:	e7f5      	b.n	1a00077e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000792:	6002      	str	r2, [r0, #0]
1a000794:	e7f3      	b.n	1a00077e <prvInsertBlockIntoFreeList+0x36>
1a000796:	bf00      	nop
1a000798:	100020b8 	.word	0x100020b8
1a00079c:	100000a8 	.word	0x100000a8

1a0007a0 <pvPortMalloc>:
{
1a0007a0:	b570      	push	{r4, r5, r6, lr}
1a0007a2:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0007a4:	f000 ffde 	bl	1a001764 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0007a8:	4b3f      	ldr	r3, [pc, #252]	; (1a0008a8 <pvPortMalloc+0x108>)
1a0007aa:	681b      	ldr	r3, [r3, #0]
1a0007ac:	b1a3      	cbz	r3, 1a0007d8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0007ae:	4b3f      	ldr	r3, [pc, #252]	; (1a0008ac <pvPortMalloc+0x10c>)
1a0007b0:	681b      	ldr	r3, [r3, #0]
1a0007b2:	421c      	tst	r4, r3
1a0007b4:	d013      	beq.n	1a0007de <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0007b6:	f001 f86f 	bl	1a001898 <xTaskResumeAll>
void *pvReturn = NULL;
1a0007ba:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0007bc:	f000 fd74 	bl	1a0012a8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0007c0:	f016 0f07 	tst.w	r6, #7
1a0007c4:	d06e      	beq.n	1a0008a4 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0007c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007ca:	f383 8811 	msr	BASEPRI, r3
1a0007ce:	f3bf 8f6f 	isb	sy
1a0007d2:	f3bf 8f4f 	dsb	sy
1a0007d6:	e7fe      	b.n	1a0007d6 <pvPortMalloc+0x36>
			prvHeapInit();
1a0007d8:	f7ff ff84 	bl	1a0006e4 <prvHeapInit>
1a0007dc:	e7e7      	b.n	1a0007ae <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a0007de:	b194      	cbz	r4, 1a000806 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a0007e0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0007e2:	f014 0f07 	tst.w	r4, #7
1a0007e6:	d00e      	beq.n	1a000806 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0007e8:	f024 0407 	bic.w	r4, r4, #7
1a0007ec:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0007ee:	f004 0307 	and.w	r3, r4, #7
1a0007f2:	b143      	cbz	r3, 1a000806 <pvPortMalloc+0x66>
1a0007f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007f8:	f383 8811 	msr	BASEPRI, r3
1a0007fc:	f3bf 8f6f 	isb	sy
1a000800:	f3bf 8f4f 	dsb	sy
1a000804:	e7fe      	b.n	1a000804 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000806:	b134      	cbz	r4, 1a000816 <pvPortMalloc+0x76>
1a000808:	4b29      	ldr	r3, [pc, #164]	; (1a0008b0 <pvPortMalloc+0x110>)
1a00080a:	681b      	ldr	r3, [r3, #0]
1a00080c:	42a3      	cmp	r3, r4
1a00080e:	d306      	bcc.n	1a00081e <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000810:	4b28      	ldr	r3, [pc, #160]	; (1a0008b4 <pvPortMalloc+0x114>)
1a000812:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000814:	e009      	b.n	1a00082a <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000816:	f001 f83f 	bl	1a001898 <xTaskResumeAll>
void *pvReturn = NULL;
1a00081a:	2600      	movs	r6, #0
1a00081c:	e7ce      	b.n	1a0007bc <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a00081e:	f001 f83b 	bl	1a001898 <xTaskResumeAll>
void *pvReturn = NULL;
1a000822:	2600      	movs	r6, #0
1a000824:	e7ca      	b.n	1a0007bc <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000826:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000828:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00082a:	686a      	ldr	r2, [r5, #4]
1a00082c:	42a2      	cmp	r2, r4
1a00082e:	d202      	bcs.n	1a000836 <pvPortMalloc+0x96>
1a000830:	682a      	ldr	r2, [r5, #0]
1a000832:	2a00      	cmp	r2, #0
1a000834:	d1f7      	bne.n	1a000826 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000836:	4a1c      	ldr	r2, [pc, #112]	; (1a0008a8 <pvPortMalloc+0x108>)
1a000838:	6812      	ldr	r2, [r2, #0]
1a00083a:	42aa      	cmp	r2, r5
1a00083c:	d014      	beq.n	1a000868 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00083e:	681e      	ldr	r6, [r3, #0]
1a000840:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000842:	682a      	ldr	r2, [r5, #0]
1a000844:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000846:	686b      	ldr	r3, [r5, #4]
1a000848:	1b1b      	subs	r3, r3, r4
1a00084a:	2b10      	cmp	r3, #16
1a00084c:	d914      	bls.n	1a000878 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00084e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000850:	f010 0f07 	tst.w	r0, #7
1a000854:	d00c      	beq.n	1a000870 <pvPortMalloc+0xd0>
1a000856:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00085a:	f383 8811 	msr	BASEPRI, r3
1a00085e:	f3bf 8f6f 	isb	sy
1a000862:	f3bf 8f4f 	dsb	sy
1a000866:	e7fe      	b.n	1a000866 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000868:	f001 f816 	bl	1a001898 <xTaskResumeAll>
void *pvReturn = NULL;
1a00086c:	2600      	movs	r6, #0
1a00086e:	e7a5      	b.n	1a0007bc <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000870:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000872:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000874:	f7ff ff68 	bl	1a000748 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000878:	686a      	ldr	r2, [r5, #4]
1a00087a:	490d      	ldr	r1, [pc, #52]	; (1a0008b0 <pvPortMalloc+0x110>)
1a00087c:	680b      	ldr	r3, [r1, #0]
1a00087e:	1a9b      	subs	r3, r3, r2
1a000880:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000882:	490d      	ldr	r1, [pc, #52]	; (1a0008b8 <pvPortMalloc+0x118>)
1a000884:	6809      	ldr	r1, [r1, #0]
1a000886:	428b      	cmp	r3, r1
1a000888:	d201      	bcs.n	1a00088e <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a00088a:	490b      	ldr	r1, [pc, #44]	; (1a0008b8 <pvPortMalloc+0x118>)
1a00088c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a00088e:	4b07      	ldr	r3, [pc, #28]	; (1a0008ac <pvPortMalloc+0x10c>)
1a000890:	681b      	ldr	r3, [r3, #0]
1a000892:	4313      	orrs	r3, r2
1a000894:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000896:	2300      	movs	r3, #0
1a000898:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a00089a:	f000 fffd 	bl	1a001898 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00089e:	2e00      	cmp	r6, #0
1a0008a0:	d18e      	bne.n	1a0007c0 <pvPortMalloc+0x20>
1a0008a2:	e78b      	b.n	1a0007bc <pvPortMalloc+0x1c>
}
1a0008a4:	4630      	mov	r0, r6
1a0008a6:	bd70      	pop	{r4, r5, r6, pc}
1a0008a8:	100000a8 	.word	0x100000a8
1a0008ac:	100020ac 	.word	0x100020ac
1a0008b0:	100020b0 	.word	0x100020b0
1a0008b4:	100020b8 	.word	0x100020b8
1a0008b8:	100020b4 	.word	0x100020b4

1a0008bc <vPortFree>:
	if( pv != NULL )
1a0008bc:	b380      	cbz	r0, 1a000920 <vPortFree+0x64>
{
1a0008be:	b538      	push	{r3, r4, r5, lr}
1a0008c0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0008c2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0008c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0008ca:	4916      	ldr	r1, [pc, #88]	; (1a000924 <vPortFree+0x68>)
1a0008cc:	6809      	ldr	r1, [r1, #0]
1a0008ce:	420a      	tst	r2, r1
1a0008d0:	d108      	bne.n	1a0008e4 <vPortFree+0x28>
1a0008d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008d6:	f383 8811 	msr	BASEPRI, r3
1a0008da:	f3bf 8f6f 	isb	sy
1a0008de:	f3bf 8f4f 	dsb	sy
1a0008e2:	e7fe      	b.n	1a0008e2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a0008e4:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0008e8:	b140      	cbz	r0, 1a0008fc <vPortFree+0x40>
1a0008ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008ee:	f383 8811 	msr	BASEPRI, r3
1a0008f2:	f3bf 8f6f 	isb	sy
1a0008f6:	f3bf 8f4f 	dsb	sy
1a0008fa:	e7fe      	b.n	1a0008fa <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a0008fc:	ea22 0201 	bic.w	r2, r2, r1
1a000900:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000904:	f000 ff2e 	bl	1a001764 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000908:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a00090c:	4a06      	ldr	r2, [pc, #24]	; (1a000928 <vPortFree+0x6c>)
1a00090e:	6813      	ldr	r3, [r2, #0]
1a000910:	440b      	add	r3, r1
1a000912:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000914:	4628      	mov	r0, r5
1a000916:	f7ff ff17 	bl	1a000748 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00091a:	f000 ffbd 	bl	1a001898 <xTaskResumeAll>
}
1a00091e:	bd38      	pop	{r3, r4, r5, pc}
1a000920:	4770      	bx	lr
1a000922:	bf00      	nop
1a000924:	100020ac 	.word	0x100020ac
1a000928:	100020b0 	.word	0x100020b0

1a00092c <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a00092c:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a00092e:	b123      	cbz	r3, 1a00093a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000930:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000932:	6818      	ldr	r0, [r3, #0]
1a000934:	f1c0 0007 	rsb	r0, r0, #7
1a000938:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a00093a:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a00093c:	4770      	bx	lr

1a00093e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00093e:	b510      	push	{r4, lr}
1a000940:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000942:	f001 fd2f 	bl	1a0023a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000946:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00094a:	429a      	cmp	r2, r3
1a00094c:	d004      	beq.n	1a000958 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00094e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000950:	f001 fd4a 	bl	1a0023e8 <vPortExitCritical>

	return xReturn;
}
1a000954:	4620      	mov	r0, r4
1a000956:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000958:	2401      	movs	r4, #1
1a00095a:	e7f9      	b.n	1a000950 <prvIsQueueFull+0x12>

1a00095c <prvIsQueueEmpty>:
{
1a00095c:	b510      	push	{r4, lr}
1a00095e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000960:	f001 fd20 	bl	1a0023a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000966:	b123      	cbz	r3, 1a000972 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000968:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00096a:	f001 fd3d 	bl	1a0023e8 <vPortExitCritical>
}
1a00096e:	4620      	mov	r0, r4
1a000970:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000972:	2401      	movs	r4, #1
1a000974:	e7f9      	b.n	1a00096a <prvIsQueueEmpty+0xe>

1a000976 <prvCopyDataToQueue>:
{
1a000976:	b570      	push	{r4, r5, r6, lr}
1a000978:	4604      	mov	r4, r0
1a00097a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00097c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00097e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000980:	b95a      	cbnz	r2, 1a00099a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000982:	6803      	ldr	r3, [r0, #0]
1a000984:	b11b      	cbz	r3, 1a00098e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000986:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000988:	3501      	adds	r5, #1
1a00098a:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a00098c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00098e:	6840      	ldr	r0, [r0, #4]
1a000990:	f001 f9be 	bl	1a001d10 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000994:	2300      	movs	r3, #0
1a000996:	6063      	str	r3, [r4, #4]
1a000998:	e7f6      	b.n	1a000988 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a00099a:	b96e      	cbnz	r6, 1a0009b8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00099c:	6880      	ldr	r0, [r0, #8]
1a00099e:	f003 f9cd 	bl	1a003d3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0009a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0009a4:	68a3      	ldr	r3, [r4, #8]
1a0009a6:	4413      	add	r3, r2
1a0009a8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0009aa:	6862      	ldr	r2, [r4, #4]
1a0009ac:	4293      	cmp	r3, r2
1a0009ae:	d319      	bcc.n	1a0009e4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0009b0:	6823      	ldr	r3, [r4, #0]
1a0009b2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0009b4:	2000      	movs	r0, #0
1a0009b6:	e7e7      	b.n	1a000988 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0009b8:	68c0      	ldr	r0, [r0, #12]
1a0009ba:	f003 f9bf 	bl	1a003d3c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0009be:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0009c0:	4252      	negs	r2, r2
1a0009c2:	68e3      	ldr	r3, [r4, #12]
1a0009c4:	4413      	add	r3, r2
1a0009c6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0009c8:	6821      	ldr	r1, [r4, #0]
1a0009ca:	428b      	cmp	r3, r1
1a0009cc:	d202      	bcs.n	1a0009d4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0009ce:	6863      	ldr	r3, [r4, #4]
1a0009d0:	441a      	add	r2, r3
1a0009d2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0009d4:	2e02      	cmp	r6, #2
1a0009d6:	d001      	beq.n	1a0009dc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0009d8:	2000      	movs	r0, #0
1a0009da:	e7d5      	b.n	1a000988 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0009dc:	b125      	cbz	r5, 1a0009e8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0009de:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0009e0:	2000      	movs	r0, #0
1a0009e2:	e7d1      	b.n	1a000988 <prvCopyDataToQueue+0x12>
1a0009e4:	2000      	movs	r0, #0
1a0009e6:	e7cf      	b.n	1a000988 <prvCopyDataToQueue+0x12>
1a0009e8:	2000      	movs	r0, #0
1a0009ea:	e7cd      	b.n	1a000988 <prvCopyDataToQueue+0x12>

1a0009ec <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0009ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0009ee:	b172      	cbz	r2, 1a000a0e <prvCopyDataFromQueue+0x22>
{
1a0009f0:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0009f2:	68c3      	ldr	r3, [r0, #12]
1a0009f4:	4413      	add	r3, r2
1a0009f6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0009f8:	6844      	ldr	r4, [r0, #4]
1a0009fa:	42a3      	cmp	r3, r4
1a0009fc:	d301      	bcc.n	1a000a02 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0009fe:	6803      	ldr	r3, [r0, #0]
1a000a00:	60c3      	str	r3, [r0, #12]
1a000a02:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000a04:	68c1      	ldr	r1, [r0, #12]
1a000a06:	4620      	mov	r0, r4
1a000a08:	f003 f998 	bl	1a003d3c <memcpy>
}
1a000a0c:	bd10      	pop	{r4, pc}
1a000a0e:	4770      	bx	lr

1a000a10 <prvUnlockQueue>:
{
1a000a10:	b538      	push	{r3, r4, r5, lr}
1a000a12:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000a14:	f001 fcc6 	bl	1a0023a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000a18:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000a1c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000a1e:	e003      	b.n	1a000a28 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000a20:	f001 f904 	bl	1a001c2c <vTaskMissedYield>
			--cTxLock;
1a000a24:	3c01      	subs	r4, #1
1a000a26:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000a28:	2c00      	cmp	r4, #0
1a000a2a:	dd08      	ble.n	1a000a3e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000a2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000a2e:	b133      	cbz	r3, 1a000a3e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000a30:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000a34:	f001 f868 	bl	1a001b08 <xTaskRemoveFromEventList>
1a000a38:	2800      	cmp	r0, #0
1a000a3a:	d0f3      	beq.n	1a000a24 <prvUnlockQueue+0x14>
1a000a3c:	e7f0      	b.n	1a000a20 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000a3e:	23ff      	movs	r3, #255	; 0xff
1a000a40:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000a44:	f001 fcd0 	bl	1a0023e8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000a48:	f001 fcac 	bl	1a0023a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000a4c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000a50:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000a52:	e003      	b.n	1a000a5c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000a54:	f001 f8ea 	bl	1a001c2c <vTaskMissedYield>
				--cRxLock;
1a000a58:	3c01      	subs	r4, #1
1a000a5a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000a5c:	2c00      	cmp	r4, #0
1a000a5e:	dd08      	ble.n	1a000a72 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000a60:	692b      	ldr	r3, [r5, #16]
1a000a62:	b133      	cbz	r3, 1a000a72 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a64:	f105 0010 	add.w	r0, r5, #16
1a000a68:	f001 f84e 	bl	1a001b08 <xTaskRemoveFromEventList>
1a000a6c:	2800      	cmp	r0, #0
1a000a6e:	d0f3      	beq.n	1a000a58 <prvUnlockQueue+0x48>
1a000a70:	e7f0      	b.n	1a000a54 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000a72:	23ff      	movs	r3, #255	; 0xff
1a000a74:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000a78:	f001 fcb6 	bl	1a0023e8 <vPortExitCritical>
}
1a000a7c:	bd38      	pop	{r3, r4, r5, pc}
1a000a7e:	Address 0x000000001a000a7e is out of bounds.


1a000a80 <xQueueGenericReset>:
{
1a000a80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000a82:	b940      	cbnz	r0, 1a000a96 <xQueueGenericReset+0x16>
1a000a84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a88:	f383 8811 	msr	BASEPRI, r3
1a000a8c:	f3bf 8f6f 	isb	sy
1a000a90:	f3bf 8f4f 	dsb	sy
1a000a94:	e7fe      	b.n	1a000a94 <xQueueGenericReset+0x14>
1a000a96:	4604      	mov	r4, r0
1a000a98:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000a9a:	f001 fc83 	bl	1a0023a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000a9e:	6821      	ldr	r1, [r4, #0]
1a000aa0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000aa4:	fb03 1002 	mla	r0, r3, r2, r1
1a000aa8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000aaa:	2000      	movs	r0, #0
1a000aac:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000aae:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000ab0:	3a01      	subs	r2, #1
1a000ab2:	fb02 1303 	mla	r3, r2, r3, r1
1a000ab6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000ab8:	23ff      	movs	r3, #255	; 0xff
1a000aba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000ac2:	b9a5      	cbnz	r5, 1a000aee <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000ac4:	6923      	ldr	r3, [r4, #16]
1a000ac6:	b91b      	cbnz	r3, 1a000ad0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000ac8:	f001 fc8e 	bl	1a0023e8 <vPortExitCritical>
}
1a000acc:	2001      	movs	r0, #1
1a000ace:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000ad0:	f104 0010 	add.w	r0, r4, #16
1a000ad4:	f001 f818 	bl	1a001b08 <xTaskRemoveFromEventList>
1a000ad8:	2800      	cmp	r0, #0
1a000ada:	d0f5      	beq.n	1a000ac8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000adc:	4b08      	ldr	r3, [pc, #32]	; (1a000b00 <xQueueGenericReset+0x80>)
1a000ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ae2:	601a      	str	r2, [r3, #0]
1a000ae4:	f3bf 8f4f 	dsb	sy
1a000ae8:	f3bf 8f6f 	isb	sy
1a000aec:	e7ec      	b.n	1a000ac8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000aee:	f104 0010 	add.w	r0, r4, #16
1a000af2:	f000 fb62 	bl	1a0011ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000af6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000afa:	f000 fb5e 	bl	1a0011ba <vListInitialise>
1a000afe:	e7e3      	b.n	1a000ac8 <xQueueGenericReset+0x48>
1a000b00:	e000ed04 	.word	0xe000ed04

1a000b04 <prvInitialiseNewQueue>:
{
1a000b04:	b538      	push	{r3, r4, r5, lr}
1a000b06:	461d      	mov	r5, r3
1a000b08:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000b0a:	460b      	mov	r3, r1
1a000b0c:	b149      	cbz	r1, 1a000b22 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000b0e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000b10:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000b12:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000b14:	2101      	movs	r1, #1
1a000b16:	4620      	mov	r0, r4
1a000b18:	f7ff ffb2 	bl	1a000a80 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000b1c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000b20:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000b22:	6024      	str	r4, [r4, #0]
1a000b24:	e7f4      	b.n	1a000b10 <prvInitialiseNewQueue+0xc>

1a000b26 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000b26:	b940      	cbnz	r0, 1a000b3a <xQueueGenericCreateStatic+0x14>
1a000b28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b2c:	f383 8811 	msr	BASEPRI, r3
1a000b30:	f3bf 8f6f 	isb	sy
1a000b34:	f3bf 8f4f 	dsb	sy
1a000b38:	e7fe      	b.n	1a000b38 <xQueueGenericCreateStatic+0x12>
	{
1a000b3a:	b510      	push	{r4, lr}
1a000b3c:	b084      	sub	sp, #16
1a000b3e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000b40:	b153      	cbz	r3, 1a000b58 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000b42:	b192      	cbz	r2, 1a000b6a <xQueueGenericCreateStatic+0x44>
1a000b44:	b989      	cbnz	r1, 1a000b6a <xQueueGenericCreateStatic+0x44>
1a000b46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b4a:	f383 8811 	msr	BASEPRI, r3
1a000b4e:	f3bf 8f6f 	isb	sy
1a000b52:	f3bf 8f4f 	dsb	sy
1a000b56:	e7fe      	b.n	1a000b56 <xQueueGenericCreateStatic+0x30>
1a000b58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b5c:	f383 8811 	msr	BASEPRI, r3
1a000b60:	f3bf 8f6f 	isb	sy
1a000b64:	f3bf 8f4f 	dsb	sy
1a000b68:	e7fe      	b.n	1a000b68 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000b6a:	b94a      	cbnz	r2, 1a000b80 <xQueueGenericCreateStatic+0x5a>
1a000b6c:	b141      	cbz	r1, 1a000b80 <xQueueGenericCreateStatic+0x5a>
1a000b6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b72:	f383 8811 	msr	BASEPRI, r3
1a000b76:	f3bf 8f6f 	isb	sy
1a000b7a:	f3bf 8f4f 	dsb	sy
1a000b7e:	e7fe      	b.n	1a000b7e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000b80:	2050      	movs	r0, #80	; 0x50
1a000b82:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000b84:	9803      	ldr	r0, [sp, #12]
1a000b86:	2850      	cmp	r0, #80	; 0x50
1a000b88:	d008      	beq.n	1a000b9c <xQueueGenericCreateStatic+0x76>
1a000b8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b8e:	f383 8811 	msr	BASEPRI, r3
1a000b92:	f3bf 8f6f 	isb	sy
1a000b96:	f3bf 8f4f 	dsb	sy
1a000b9a:	e7fe      	b.n	1a000b9a <xQueueGenericCreateStatic+0x74>
1a000b9c:	4620      	mov	r0, r4
1a000b9e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000ba0:	2301      	movs	r3, #1
1a000ba2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000ba6:	9400      	str	r4, [sp, #0]
1a000ba8:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000bac:	f7ff ffaa 	bl	1a000b04 <prvInitialiseNewQueue>
	}
1a000bb0:	4620      	mov	r0, r4
1a000bb2:	b004      	add	sp, #16
1a000bb4:	bd10      	pop	{r4, pc}

1a000bb6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000bb6:	b940      	cbnz	r0, 1a000bca <xQueueGenericCreate+0x14>
1a000bb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bbc:	f383 8811 	msr	BASEPRI, r3
1a000bc0:	f3bf 8f6f 	isb	sy
1a000bc4:	f3bf 8f4f 	dsb	sy
1a000bc8:	e7fe      	b.n	1a000bc8 <xQueueGenericCreate+0x12>
	{
1a000bca:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bcc:	b083      	sub	sp, #12
1a000bce:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000bd0:	b111      	cbz	r1, 1a000bd8 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000bd2:	fb01 f000 	mul.w	r0, r1, r0
1a000bd6:	e000      	b.n	1a000bda <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000bd8:	2000      	movs	r0, #0
1a000bda:	4617      	mov	r7, r2
1a000bdc:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000bde:	3050      	adds	r0, #80	; 0x50
1a000be0:	f7ff fdde 	bl	1a0007a0 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000be4:	4605      	mov	r5, r0
1a000be6:	b150      	cbz	r0, 1a000bfe <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000be8:	2300      	movs	r3, #0
1a000bea:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000bee:	9000      	str	r0, [sp, #0]
1a000bf0:	463b      	mov	r3, r7
1a000bf2:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000bf6:	4621      	mov	r1, r4
1a000bf8:	4630      	mov	r0, r6
1a000bfa:	f7ff ff83 	bl	1a000b04 <prvInitialiseNewQueue>
	}
1a000bfe:	4628      	mov	r0, r5
1a000c00:	b003      	add	sp, #12
1a000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000c04 <xQueueGenericSend>:
{
1a000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c06:	b085      	sub	sp, #20
1a000c08:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000c0a:	b160      	cbz	r0, 1a000c26 <xQueueGenericSend+0x22>
1a000c0c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c0e:	b999      	cbnz	r1, 1a000c38 <xQueueGenericSend+0x34>
1a000c10:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000c12:	b18a      	cbz	r2, 1a000c38 <xQueueGenericSend+0x34>
1a000c14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c18:	f383 8811 	msr	BASEPRI, r3
1a000c1c:	f3bf 8f6f 	isb	sy
1a000c20:	f3bf 8f4f 	dsb	sy
1a000c24:	e7fe      	b.n	1a000c24 <xQueueGenericSend+0x20>
1a000c26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c2a:	f383 8811 	msr	BASEPRI, r3
1a000c2e:	f3bf 8f6f 	isb	sy
1a000c32:	f3bf 8f4f 	dsb	sy
1a000c36:	e7fe      	b.n	1a000c36 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c38:	2b02      	cmp	r3, #2
1a000c3a:	d10b      	bne.n	1a000c54 <xQueueGenericSend+0x50>
1a000c3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000c3e:	2a01      	cmp	r2, #1
1a000c40:	d008      	beq.n	1a000c54 <xQueueGenericSend+0x50>
1a000c42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c46:	f383 8811 	msr	BASEPRI, r3
1a000c4a:	f3bf 8f6f 	isb	sy
1a000c4e:	f3bf 8f4f 	dsb	sy
1a000c52:	e7fe      	b.n	1a000c52 <xQueueGenericSend+0x4e>
1a000c54:	461e      	mov	r6, r3
1a000c56:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000c58:	f000 ffee 	bl	1a001c38 <xTaskGetSchedulerState>
1a000c5c:	b950      	cbnz	r0, 1a000c74 <xQueueGenericSend+0x70>
1a000c5e:	9b01      	ldr	r3, [sp, #4]
1a000c60:	b153      	cbz	r3, 1a000c78 <xQueueGenericSend+0x74>
1a000c62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c66:	f383 8811 	msr	BASEPRI, r3
1a000c6a:	f3bf 8f6f 	isb	sy
1a000c6e:	f3bf 8f4f 	dsb	sy
1a000c72:	e7fe      	b.n	1a000c72 <xQueueGenericSend+0x6e>
1a000c74:	2500      	movs	r5, #0
1a000c76:	e03a      	b.n	1a000cee <xQueueGenericSend+0xea>
1a000c78:	2500      	movs	r5, #0
1a000c7a:	e038      	b.n	1a000cee <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000c7c:	4632      	mov	r2, r6
1a000c7e:	4639      	mov	r1, r7
1a000c80:	4620      	mov	r0, r4
1a000c82:	f7ff fe78 	bl	1a000976 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000c88:	b94b      	cbnz	r3, 1a000c9e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000c8a:	b1a8      	cbz	r0, 1a000cb8 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000c8c:	4b3b      	ldr	r3, [pc, #236]	; (1a000d7c <xQueueGenericSend+0x178>)
1a000c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c92:	601a      	str	r2, [r3, #0]
1a000c94:	f3bf 8f4f 	dsb	sy
1a000c98:	f3bf 8f6f 	isb	sy
1a000c9c:	e00c      	b.n	1a000cb8 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000c9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ca2:	f000 ff31 	bl	1a001b08 <xTaskRemoveFromEventList>
1a000ca6:	b138      	cbz	r0, 1a000cb8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000ca8:	4b34      	ldr	r3, [pc, #208]	; (1a000d7c <xQueueGenericSend+0x178>)
1a000caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cae:	601a      	str	r2, [r3, #0]
1a000cb0:	f3bf 8f4f 	dsb	sy
1a000cb4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000cb8:	f001 fb96 	bl	1a0023e8 <vPortExitCritical>
				return pdPASS;
1a000cbc:	2001      	movs	r0, #1
}
1a000cbe:	b005      	add	sp, #20
1a000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000cc2:	f001 fb91 	bl	1a0023e8 <vPortExitCritical>
					return errQUEUE_FULL;
1a000cc6:	2000      	movs	r0, #0
1a000cc8:	e7f9      	b.n	1a000cbe <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000cca:	a802      	add	r0, sp, #8
1a000ccc:	f000 ff62 	bl	1a001b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000cd0:	2501      	movs	r5, #1
1a000cd2:	e019      	b.n	1a000d08 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000cd4:	2300      	movs	r3, #0
1a000cd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000cda:	e021      	b.n	1a000d20 <xQueueGenericSend+0x11c>
1a000cdc:	2300      	movs	r3, #0
1a000cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ce2:	e023      	b.n	1a000d2c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000ce4:	4620      	mov	r0, r4
1a000ce6:	f7ff fe93 	bl	1a000a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000cea:	f000 fdd5 	bl	1a001898 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000cee:	f001 fb59 	bl	1a0023a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000cf2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000cf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000cf6:	429a      	cmp	r2, r3
1a000cf8:	d3c0      	bcc.n	1a000c7c <xQueueGenericSend+0x78>
1a000cfa:	2e02      	cmp	r6, #2
1a000cfc:	d0be      	beq.n	1a000c7c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000cfe:	9b01      	ldr	r3, [sp, #4]
1a000d00:	2b00      	cmp	r3, #0
1a000d02:	d0de      	beq.n	1a000cc2 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000d04:	2d00      	cmp	r5, #0
1a000d06:	d0e0      	beq.n	1a000cca <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000d08:	f001 fb6e 	bl	1a0023e8 <vPortExitCritical>
		vTaskSuspendAll();
1a000d0c:	f000 fd2a 	bl	1a001764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000d10:	f001 fb48 	bl	1a0023a4 <vPortEnterCritical>
1a000d14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000d18:	b25b      	sxtb	r3, r3
1a000d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d1e:	d0d9      	beq.n	1a000cd4 <xQueueGenericSend+0xd0>
1a000d20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000d24:	b25b      	sxtb	r3, r3
1a000d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d2a:	d0d7      	beq.n	1a000cdc <xQueueGenericSend+0xd8>
1a000d2c:	f001 fb5c 	bl	1a0023e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000d30:	a901      	add	r1, sp, #4
1a000d32:	a802      	add	r0, sp, #8
1a000d34:	f000 ff3a 	bl	1a001bac <xTaskCheckForTimeOut>
1a000d38:	b9c8      	cbnz	r0, 1a000d6e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000d3a:	4620      	mov	r0, r4
1a000d3c:	f7ff fdff 	bl	1a00093e <prvIsQueueFull>
1a000d40:	2800      	cmp	r0, #0
1a000d42:	d0cf      	beq.n	1a000ce4 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000d44:	9901      	ldr	r1, [sp, #4]
1a000d46:	f104 0010 	add.w	r0, r4, #16
1a000d4a:	f000 fea9 	bl	1a001aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000d4e:	4620      	mov	r0, r4
1a000d50:	f7ff fe5e 	bl	1a000a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000d54:	f000 fda0 	bl	1a001898 <xTaskResumeAll>
1a000d58:	2800      	cmp	r0, #0
1a000d5a:	d1c8      	bne.n	1a000cee <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000d5c:	4b07      	ldr	r3, [pc, #28]	; (1a000d7c <xQueueGenericSend+0x178>)
1a000d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d62:	601a      	str	r2, [r3, #0]
1a000d64:	f3bf 8f4f 	dsb	sy
1a000d68:	f3bf 8f6f 	isb	sy
1a000d6c:	e7bf      	b.n	1a000cee <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000d6e:	4620      	mov	r0, r4
1a000d70:	f7ff fe4e 	bl	1a000a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000d74:	f000 fd90 	bl	1a001898 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000d78:	2000      	movs	r0, #0
1a000d7a:	e7a0      	b.n	1a000cbe <xQueueGenericSend+0xba>
1a000d7c:	e000ed04 	.word	0xe000ed04

1a000d80 <xQueueGenericSendFromISR>:
{
1a000d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000d84:	b160      	cbz	r0, 1a000da0 <xQueueGenericSendFromISR+0x20>
1a000d86:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d88:	b999      	cbnz	r1, 1a000db2 <xQueueGenericSendFromISR+0x32>
1a000d8a:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000d8c:	b188      	cbz	r0, 1a000db2 <xQueueGenericSendFromISR+0x32>
1a000d8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d92:	f383 8811 	msr	BASEPRI, r3
1a000d96:	f3bf 8f6f 	isb	sy
1a000d9a:	f3bf 8f4f 	dsb	sy
1a000d9e:	e7fe      	b.n	1a000d9e <xQueueGenericSendFromISR+0x1e>
1a000da0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000da4:	f383 8811 	msr	BASEPRI, r3
1a000da8:	f3bf 8f6f 	isb	sy
1a000dac:	f3bf 8f4f 	dsb	sy
1a000db0:	e7fe      	b.n	1a000db0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000db2:	2b02      	cmp	r3, #2
1a000db4:	d10b      	bne.n	1a000dce <xQueueGenericSendFromISR+0x4e>
1a000db6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000db8:	2801      	cmp	r0, #1
1a000dba:	d008      	beq.n	1a000dce <xQueueGenericSendFromISR+0x4e>
1a000dbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dc0:	f383 8811 	msr	BASEPRI, r3
1a000dc4:	f3bf 8f6f 	isb	sy
1a000dc8:	f3bf 8f4f 	dsb	sy
1a000dcc:	e7fe      	b.n	1a000dcc <xQueueGenericSendFromISR+0x4c>
1a000dce:	461f      	mov	r7, r3
1a000dd0:	4690      	mov	r8, r2
1a000dd2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000dd4:	f001 fc10 	bl	1a0025f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000dd8:	f3ef 8611 	mrs	r6, BASEPRI
1a000ddc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000de0:	f383 8811 	msr	BASEPRI, r3
1a000de4:	f3bf 8f6f 	isb	sy
1a000de8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000dec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000df0:	429a      	cmp	r2, r3
1a000df2:	d303      	bcc.n	1a000dfc <xQueueGenericSendFromISR+0x7c>
1a000df4:	2f02      	cmp	r7, #2
1a000df6:	d001      	beq.n	1a000dfc <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000df8:	2000      	movs	r0, #0
1a000dfa:	e00f      	b.n	1a000e1c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000dfc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000e00:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000e02:	463a      	mov	r2, r7
1a000e04:	4649      	mov	r1, r9
1a000e06:	4620      	mov	r0, r4
1a000e08:	f7ff fdb5 	bl	1a000976 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000e0c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000e10:	d008      	beq.n	1a000e24 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000e12:	1c6b      	adds	r3, r5, #1
1a000e14:	b25b      	sxtb	r3, r3
1a000e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000e1a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000e1c:	f386 8811 	msr	BASEPRI, r6
}
1a000e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000e26:	b15b      	cbz	r3, 1a000e40 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e28:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e2c:	f000 fe6c 	bl	1a001b08 <xTaskRemoveFromEventList>
1a000e30:	b140      	cbz	r0, 1a000e44 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000e32:	f1b8 0f00 	cmp.w	r8, #0
1a000e36:	d007      	beq.n	1a000e48 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000e38:	2001      	movs	r0, #1
1a000e3a:	f8c8 0000 	str.w	r0, [r8]
1a000e3e:	e7ed      	b.n	1a000e1c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000e40:	2001      	movs	r0, #1
1a000e42:	e7eb      	b.n	1a000e1c <xQueueGenericSendFromISR+0x9c>
1a000e44:	2001      	movs	r0, #1
1a000e46:	e7e9      	b.n	1a000e1c <xQueueGenericSendFromISR+0x9c>
1a000e48:	2001      	movs	r0, #1
1a000e4a:	e7e7      	b.n	1a000e1c <xQueueGenericSendFromISR+0x9c>

1a000e4c <xQueueReceive>:
{
1a000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e4e:	b085      	sub	sp, #20
1a000e50:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000e52:	b160      	cbz	r0, 1a000e6e <xQueueReceive+0x22>
1a000e54:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e56:	b999      	cbnz	r1, 1a000e80 <xQueueReceive+0x34>
1a000e58:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000e5a:	b18b      	cbz	r3, 1a000e80 <xQueueReceive+0x34>
	__asm volatile
1a000e5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e60:	f383 8811 	msr	BASEPRI, r3
1a000e64:	f3bf 8f6f 	isb	sy
1a000e68:	f3bf 8f4f 	dsb	sy
1a000e6c:	e7fe      	b.n	1a000e6c <xQueueReceive+0x20>
1a000e6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e72:	f383 8811 	msr	BASEPRI, r3
1a000e76:	f3bf 8f6f 	isb	sy
1a000e7a:	f3bf 8f4f 	dsb	sy
1a000e7e:	e7fe      	b.n	1a000e7e <xQueueReceive+0x32>
1a000e80:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e82:	f000 fed9 	bl	1a001c38 <xTaskGetSchedulerState>
1a000e86:	b950      	cbnz	r0, 1a000e9e <xQueueReceive+0x52>
1a000e88:	9b01      	ldr	r3, [sp, #4]
1a000e8a:	b153      	cbz	r3, 1a000ea2 <xQueueReceive+0x56>
1a000e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e90:	f383 8811 	msr	BASEPRI, r3
1a000e94:	f3bf 8f6f 	isb	sy
1a000e98:	f3bf 8f4f 	dsb	sy
1a000e9c:	e7fe      	b.n	1a000e9c <xQueueReceive+0x50>
1a000e9e:	2600      	movs	r6, #0
1a000ea0:	e03e      	b.n	1a000f20 <xQueueReceive+0xd4>
1a000ea2:	2600      	movs	r6, #0
1a000ea4:	e03c      	b.n	1a000f20 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000ea6:	4639      	mov	r1, r7
1a000ea8:	4620      	mov	r0, r4
1a000eaa:	f7ff fd9f 	bl	1a0009ec <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000eae:	3d01      	subs	r5, #1
1a000eb0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000eb2:	6923      	ldr	r3, [r4, #16]
1a000eb4:	b923      	cbnz	r3, 1a000ec0 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000eb6:	f001 fa97 	bl	1a0023e8 <vPortExitCritical>
				return pdPASS;
1a000eba:	2001      	movs	r0, #1
}
1a000ebc:	b005      	add	sp, #20
1a000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000ec0:	f104 0010 	add.w	r0, r4, #16
1a000ec4:	f000 fe20 	bl	1a001b08 <xTaskRemoveFromEventList>
1a000ec8:	2800      	cmp	r0, #0
1a000eca:	d0f4      	beq.n	1a000eb6 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000ecc:	4b34      	ldr	r3, [pc, #208]	; (1a000fa0 <xQueueReceive+0x154>)
1a000ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ed2:	601a      	str	r2, [r3, #0]
1a000ed4:	f3bf 8f4f 	dsb	sy
1a000ed8:	f3bf 8f6f 	isb	sy
1a000edc:	e7eb      	b.n	1a000eb6 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000ede:	f001 fa83 	bl	1a0023e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000ee2:	2000      	movs	r0, #0
1a000ee4:	e7ea      	b.n	1a000ebc <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000ee6:	a802      	add	r0, sp, #8
1a000ee8:	f000 fe54 	bl	1a001b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000eec:	2601      	movs	r6, #1
1a000eee:	e021      	b.n	1a000f34 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000ef0:	2300      	movs	r3, #0
1a000ef2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ef6:	e029      	b.n	1a000f4c <xQueueReceive+0x100>
1a000ef8:	2300      	movs	r3, #0
1a000efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000efe:	e02b      	b.n	1a000f58 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000f00:	4620      	mov	r0, r4
1a000f02:	f7ff fd85 	bl	1a000a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000f06:	f000 fcc7 	bl	1a001898 <xTaskResumeAll>
1a000f0a:	e009      	b.n	1a000f20 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000f0c:	4620      	mov	r0, r4
1a000f0e:	f7ff fd7f 	bl	1a000a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f12:	f000 fcc1 	bl	1a001898 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f16:	4620      	mov	r0, r4
1a000f18:	f7ff fd20 	bl	1a00095c <prvIsQueueEmpty>
1a000f1c:	2800      	cmp	r0, #0
1a000f1e:	d13d      	bne.n	1a000f9c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000f20:	f001 fa40 	bl	1a0023a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000f26:	2d00      	cmp	r5, #0
1a000f28:	d1bd      	bne.n	1a000ea6 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000f2a:	9b01      	ldr	r3, [sp, #4]
1a000f2c:	2b00      	cmp	r3, #0
1a000f2e:	d0d6      	beq.n	1a000ede <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000f30:	2e00      	cmp	r6, #0
1a000f32:	d0d8      	beq.n	1a000ee6 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000f34:	f001 fa58 	bl	1a0023e8 <vPortExitCritical>
		vTaskSuspendAll();
1a000f38:	f000 fc14 	bl	1a001764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000f3c:	f001 fa32 	bl	1a0023a4 <vPortEnterCritical>
1a000f40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f44:	b25b      	sxtb	r3, r3
1a000f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f4a:	d0d1      	beq.n	1a000ef0 <xQueueReceive+0xa4>
1a000f4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f50:	b25b      	sxtb	r3, r3
1a000f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f56:	d0cf      	beq.n	1a000ef8 <xQueueReceive+0xac>
1a000f58:	f001 fa46 	bl	1a0023e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000f5c:	a901      	add	r1, sp, #4
1a000f5e:	a802      	add	r0, sp, #8
1a000f60:	f000 fe24 	bl	1a001bac <xTaskCheckForTimeOut>
1a000f64:	2800      	cmp	r0, #0
1a000f66:	d1d1      	bne.n	1a000f0c <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f68:	4620      	mov	r0, r4
1a000f6a:	f7ff fcf7 	bl	1a00095c <prvIsQueueEmpty>
1a000f6e:	2800      	cmp	r0, #0
1a000f70:	d0c6      	beq.n	1a000f00 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000f72:	9901      	ldr	r1, [sp, #4]
1a000f74:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f78:	f000 fd92 	bl	1a001aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000f7c:	4620      	mov	r0, r4
1a000f7e:	f7ff fd47 	bl	1a000a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000f82:	f000 fc89 	bl	1a001898 <xTaskResumeAll>
1a000f86:	2800      	cmp	r0, #0
1a000f88:	d1ca      	bne.n	1a000f20 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000f8a:	4b05      	ldr	r3, [pc, #20]	; (1a000fa0 <xQueueReceive+0x154>)
1a000f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f90:	601a      	str	r2, [r3, #0]
1a000f92:	f3bf 8f4f 	dsb	sy
1a000f96:	f3bf 8f6f 	isb	sy
1a000f9a:	e7c1      	b.n	1a000f20 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000f9c:	2000      	movs	r0, #0
1a000f9e:	e78d      	b.n	1a000ebc <xQueueReceive+0x70>
1a000fa0:	e000ed04 	.word	0xe000ed04

1a000fa4 <xQueueSemaphoreTake>:
{
1a000fa4:	b570      	push	{r4, r5, r6, lr}
1a000fa6:	b084      	sub	sp, #16
1a000fa8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000faa:	b940      	cbnz	r0, 1a000fbe <xQueueSemaphoreTake+0x1a>
1a000fac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fb0:	f383 8811 	msr	BASEPRI, r3
1a000fb4:	f3bf 8f6f 	isb	sy
1a000fb8:	f3bf 8f4f 	dsb	sy
1a000fbc:	e7fe      	b.n	1a000fbc <xQueueSemaphoreTake+0x18>
1a000fbe:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000fc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000fc2:	b143      	cbz	r3, 1a000fd6 <xQueueSemaphoreTake+0x32>
1a000fc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fc8:	f383 8811 	msr	BASEPRI, r3
1a000fcc:	f3bf 8f6f 	isb	sy
1a000fd0:	f3bf 8f4f 	dsb	sy
1a000fd4:	e7fe      	b.n	1a000fd4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000fd6:	f000 fe2f 	bl	1a001c38 <xTaskGetSchedulerState>
1a000fda:	b950      	cbnz	r0, 1a000ff2 <xQueueSemaphoreTake+0x4e>
1a000fdc:	9b01      	ldr	r3, [sp, #4]
1a000fde:	b15b      	cbz	r3, 1a000ff8 <xQueueSemaphoreTake+0x54>
1a000fe0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fe4:	f383 8811 	msr	BASEPRI, r3
1a000fe8:	f3bf 8f6f 	isb	sy
1a000fec:	f3bf 8f4f 	dsb	sy
1a000ff0:	e7fe      	b.n	1a000ff0 <xQueueSemaphoreTake+0x4c>
1a000ff2:	2500      	movs	r5, #0
1a000ff4:	462e      	mov	r6, r5
1a000ff6:	e051      	b.n	1a00109c <xQueueSemaphoreTake+0xf8>
1a000ff8:	2500      	movs	r5, #0
1a000ffa:	462e      	mov	r6, r5
1a000ffc:	e04e      	b.n	1a00109c <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000ffe:	3b01      	subs	r3, #1
1a001000:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001002:	6823      	ldr	r3, [r4, #0]
1a001004:	b913      	cbnz	r3, 1a00100c <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001006:	f000 ff3b 	bl	1a001e80 <pvTaskIncrementMutexHeldCount>
1a00100a:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00100c:	6923      	ldr	r3, [r4, #16]
1a00100e:	b163      	cbz	r3, 1a00102a <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001010:	f104 0010 	add.w	r0, r4, #16
1a001014:	f000 fd78 	bl	1a001b08 <xTaskRemoveFromEventList>
1a001018:	b138      	cbz	r0, 1a00102a <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a00101a:	4b48      	ldr	r3, [pc, #288]	; (1a00113c <xQueueSemaphoreTake+0x198>)
1a00101c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001020:	601a      	str	r2, [r3, #0]
1a001022:	f3bf 8f4f 	dsb	sy
1a001026:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00102a:	f001 f9dd 	bl	1a0023e8 <vPortExitCritical>
				return pdPASS;
1a00102e:	2501      	movs	r5, #1
}
1a001030:	4628      	mov	r0, r5
1a001032:	b004      	add	sp, #16
1a001034:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001036:	b145      	cbz	r5, 1a00104a <xQueueSemaphoreTake+0xa6>
1a001038:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00103c:	f383 8811 	msr	BASEPRI, r3
1a001040:	f3bf 8f6f 	isb	sy
1a001044:	f3bf 8f4f 	dsb	sy
1a001048:	e7fe      	b.n	1a001048 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a00104a:	f001 f9cd 	bl	1a0023e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00104e:	e7ef      	b.n	1a001030 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001050:	a802      	add	r0, sp, #8
1a001052:	f000 fd9f 	bl	1a001b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001056:	2601      	movs	r6, #1
1a001058:	e02a      	b.n	1a0010b0 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a00105a:	2300      	movs	r3, #0
1a00105c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001060:	e032      	b.n	1a0010c8 <xQueueSemaphoreTake+0x124>
1a001062:	2300      	movs	r3, #0
1a001064:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001068:	e034      	b.n	1a0010d4 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a00106a:	f001 f99b 	bl	1a0023a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a00106e:	6860      	ldr	r0, [r4, #4]
1a001070:	f000 fdf2 	bl	1a001c58 <xTaskPriorityInherit>
1a001074:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001076:	f001 f9b7 	bl	1a0023e8 <vPortExitCritical>
1a00107a:	e03b      	b.n	1a0010f4 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a00107c:	4620      	mov	r0, r4
1a00107e:	f7ff fcc7 	bl	1a000a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001082:	f000 fc09 	bl	1a001898 <xTaskResumeAll>
1a001086:	e009      	b.n	1a00109c <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001088:	4620      	mov	r0, r4
1a00108a:	f7ff fcc1 	bl	1a000a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00108e:	f000 fc03 	bl	1a001898 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001092:	4620      	mov	r0, r4
1a001094:	f7ff fc62 	bl	1a00095c <prvIsQueueEmpty>
1a001098:	2800      	cmp	r0, #0
1a00109a:	d140      	bne.n	1a00111e <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a00109c:	f001 f982 	bl	1a0023a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a0010a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a0010a2:	2b00      	cmp	r3, #0
1a0010a4:	d1ab      	bne.n	1a000ffe <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0010a6:	9b01      	ldr	r3, [sp, #4]
1a0010a8:	2b00      	cmp	r3, #0
1a0010aa:	d0c4      	beq.n	1a001036 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0010ac:	2e00      	cmp	r6, #0
1a0010ae:	d0cf      	beq.n	1a001050 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a0010b0:	f001 f99a 	bl	1a0023e8 <vPortExitCritical>
		vTaskSuspendAll();
1a0010b4:	f000 fb56 	bl	1a001764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0010b8:	f001 f974 	bl	1a0023a4 <vPortEnterCritical>
1a0010bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010c0:	b25b      	sxtb	r3, r3
1a0010c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010c6:	d0c8      	beq.n	1a00105a <xQueueSemaphoreTake+0xb6>
1a0010c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010cc:	b25b      	sxtb	r3, r3
1a0010ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010d2:	d0c6      	beq.n	1a001062 <xQueueSemaphoreTake+0xbe>
1a0010d4:	f001 f988 	bl	1a0023e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0010d8:	a901      	add	r1, sp, #4
1a0010da:	a802      	add	r0, sp, #8
1a0010dc:	f000 fd66 	bl	1a001bac <xTaskCheckForTimeOut>
1a0010e0:	2800      	cmp	r0, #0
1a0010e2:	d1d1      	bne.n	1a001088 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0010e4:	4620      	mov	r0, r4
1a0010e6:	f7ff fc39 	bl	1a00095c <prvIsQueueEmpty>
1a0010ea:	2800      	cmp	r0, #0
1a0010ec:	d0c6      	beq.n	1a00107c <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0010ee:	6823      	ldr	r3, [r4, #0]
1a0010f0:	2b00      	cmp	r3, #0
1a0010f2:	d0ba      	beq.n	1a00106a <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0010f4:	9901      	ldr	r1, [sp, #4]
1a0010f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010fa:	f000 fcd1 	bl	1a001aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0010fe:	4620      	mov	r0, r4
1a001100:	f7ff fc86 	bl	1a000a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001104:	f000 fbc8 	bl	1a001898 <xTaskResumeAll>
1a001108:	2800      	cmp	r0, #0
1a00110a:	d1c7      	bne.n	1a00109c <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a00110c:	4b0b      	ldr	r3, [pc, #44]	; (1a00113c <xQueueSemaphoreTake+0x198>)
1a00110e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001112:	601a      	str	r2, [r3, #0]
1a001114:	f3bf 8f4f 	dsb	sy
1a001118:	f3bf 8f6f 	isb	sy
1a00111c:	e7be      	b.n	1a00109c <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a00111e:	2d00      	cmp	r5, #0
1a001120:	d086      	beq.n	1a001030 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001122:	f001 f93f 	bl	1a0023a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001126:	4620      	mov	r0, r4
1a001128:	f7ff fc00 	bl	1a00092c <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a00112c:	4601      	mov	r1, r0
1a00112e:	6860      	ldr	r0, [r4, #4]
1a001130:	f000 fe46 	bl	1a001dc0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001134:	f001 f958 	bl	1a0023e8 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001138:	2500      	movs	r5, #0
1a00113a:	e779      	b.n	1a001030 <xQueueSemaphoreTake+0x8c>
1a00113c:	e000ed04 	.word	0xe000ed04

1a001140 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001140:	2300      	movs	r3, #0
1a001142:	2b07      	cmp	r3, #7
1a001144:	d80c      	bhi.n	1a001160 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001146:	4a07      	ldr	r2, [pc, #28]	; (1a001164 <vQueueAddToRegistry+0x24>)
1a001148:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00114c:	b10a      	cbz	r2, 1a001152 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00114e:	3301      	adds	r3, #1
1a001150:	e7f7      	b.n	1a001142 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001152:	4a04      	ldr	r2, [pc, #16]	; (1a001164 <vQueueAddToRegistry+0x24>)
1a001154:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001158:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00115c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00115e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001160:	4770      	bx	lr
1a001162:	bf00      	nop
1a001164:	10002b14 	.word	0x10002b14

1a001168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001168:	b570      	push	{r4, r5, r6, lr}
1a00116a:	4604      	mov	r4, r0
1a00116c:	460d      	mov	r5, r1
1a00116e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001170:	f001 f918 	bl	1a0023a4 <vPortEnterCritical>
1a001174:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001178:	b25b      	sxtb	r3, r3
1a00117a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00117e:	d00d      	beq.n	1a00119c <vQueueWaitForMessageRestricted+0x34>
1a001180:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001184:	b25b      	sxtb	r3, r3
1a001186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00118a:	d00b      	beq.n	1a0011a4 <vQueueWaitForMessageRestricted+0x3c>
1a00118c:	f001 f92c 	bl	1a0023e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001192:	b15b      	cbz	r3, 1a0011ac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001194:	4620      	mov	r0, r4
1a001196:	f7ff fc3b 	bl	1a000a10 <prvUnlockQueue>
	}
1a00119a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00119c:	2300      	movs	r3, #0
1a00119e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0011a2:	e7ed      	b.n	1a001180 <vQueueWaitForMessageRestricted+0x18>
1a0011a4:	2300      	movs	r3, #0
1a0011a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0011aa:	e7ef      	b.n	1a00118c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0011ac:	4632      	mov	r2, r6
1a0011ae:	4629      	mov	r1, r5
1a0011b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0011b4:	f000 fc8c 	bl	1a001ad0 <vTaskPlaceOnEventListRestricted>
1a0011b8:	e7ec      	b.n	1a001194 <vQueueWaitForMessageRestricted+0x2c>

1a0011ba <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011ba:	f100 0308 	add.w	r3, r0, #8
1a0011be:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0011c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011c4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011c6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011c8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0011ca:	2300      	movs	r3, #0
1a0011cc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0011ce:	4770      	bx	lr

1a0011d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0011d0:	2300      	movs	r3, #0
1a0011d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0011d4:	4770      	bx	lr

1a0011d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0011d6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0011d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0011da:	689a      	ldr	r2, [r3, #8]
1a0011dc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0011de:	689a      	ldr	r2, [r3, #8]
1a0011e0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0011e2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0011e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0011e6:	6803      	ldr	r3, [r0, #0]
1a0011e8:	3301      	adds	r3, #1
1a0011ea:	6003      	str	r3, [r0, #0]
}
1a0011ec:	4770      	bx	lr

1a0011ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0011ee:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0011f0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0011f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0011f6:	d002      	beq.n	1a0011fe <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011f8:	f100 0208 	add.w	r2, r0, #8
1a0011fc:	e002      	b.n	1a001204 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0011fe:	6902      	ldr	r2, [r0, #16]
1a001200:	e004      	b.n	1a00120c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001202:	461a      	mov	r2, r3
1a001204:	6853      	ldr	r3, [r2, #4]
1a001206:	681c      	ldr	r4, [r3, #0]
1a001208:	42ac      	cmp	r4, r5
1a00120a:	d9fa      	bls.n	1a001202 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00120c:	6853      	ldr	r3, [r2, #4]
1a00120e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001210:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001212:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001214:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001216:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001218:	6803      	ldr	r3, [r0, #0]
1a00121a:	3301      	adds	r3, #1
1a00121c:	6003      	str	r3, [r0, #0]
}
1a00121e:	bc30      	pop	{r4, r5}
1a001220:	4770      	bx	lr

1a001222 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001222:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001224:	6842      	ldr	r2, [r0, #4]
1a001226:	6881      	ldr	r1, [r0, #8]
1a001228:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00122a:	6882      	ldr	r2, [r0, #8]
1a00122c:	6841      	ldr	r1, [r0, #4]
1a00122e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001230:	685a      	ldr	r2, [r3, #4]
1a001232:	4282      	cmp	r2, r0
1a001234:	d006      	beq.n	1a001244 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001236:	2200      	movs	r2, #0
1a001238:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00123a:	681a      	ldr	r2, [r3, #0]
1a00123c:	3a01      	subs	r2, #1
1a00123e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001240:	6818      	ldr	r0, [r3, #0]
}
1a001242:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001244:	6882      	ldr	r2, [r0, #8]
1a001246:	605a      	str	r2, [r3, #4]
1a001248:	e7f5      	b.n	1a001236 <uxListRemove+0x14>
1a00124a:	Address 0x000000001a00124a is out of bounds.


1a00124c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00124c:	4b03      	ldr	r3, [pc, #12]	; (1a00125c <vApplicationGetIdleTaskMemory+0x10>)
1a00124e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001250:	4b03      	ldr	r3, [pc, #12]	; (1a001260 <vApplicationGetIdleTaskMemory+0x14>)
1a001252:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001254:	235a      	movs	r3, #90	; 0x5a
1a001256:	6013      	str	r3, [r2, #0]
}
1a001258:	4770      	bx	lr
1a00125a:	bf00      	nop
1a00125c:	100027c8 	.word	0x100027c8
1a001260:	100020c0 	.word	0x100020c0

1a001264 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001264:	4b03      	ldr	r3, [pc, #12]	; (1a001274 <vApplicationGetTimerTaskMemory+0x10>)
1a001266:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001268:	4b03      	ldr	r3, [pc, #12]	; (1a001278 <vApplicationGetTimerTaskMemory+0x14>)
1a00126a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00126c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001270:	6013      	str	r3, [r2, #0]
1a001272:	4770      	bx	lr
1a001274:	10002828 	.word	0x10002828
1a001278:	10002228 	.word	0x10002228

1a00127c <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a00127c:	b510      	push	{r4, lr}
1a00127e:	b082      	sub	sp, #8
1a001280:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001282:	9001      	str	r0, [sp, #4]
1a001284:	2300      	movs	r3, #0
1a001286:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001288:	f001 f88c 	bl	1a0023a4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a00128c:	9901      	ldr	r1, [sp, #4]
1a00128e:	4622      	mov	r2, r4
1a001290:	4804      	ldr	r0, [pc, #16]	; (1a0012a4 <vAssertCalled+0x28>)
1a001292:	f002 fe0f 	bl	1a003eb4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001296:	9b00      	ldr	r3, [sp, #0]
1a001298:	2b00      	cmp	r3, #0
1a00129a:	d0fc      	beq.n	1a001296 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a00129c:	f001 f8a4 	bl	1a0023e8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a0012a0:	b002      	add	sp, #8
1a0012a2:	bd10      	pop	{r4, pc}
1a0012a4:	1a00497c 	.word	0x1a00497c

1a0012a8 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0012a8:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0012aa:	4804      	ldr	r0, [pc, #16]	; (1a0012bc <vApplicationMallocFailedHook+0x14>)
1a0012ac:	f002 fe76 	bl	1a003f9c <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0012b0:	4903      	ldr	r1, [pc, #12]	; (1a0012c0 <vApplicationMallocFailedHook+0x18>)
1a0012b2:	202c      	movs	r0, #44	; 0x2c
1a0012b4:	f7ff ffe2 	bl	1a00127c <vAssertCalled>
}
1a0012b8:	bd08      	pop	{r3, pc}
1a0012ba:	bf00      	nop
1a0012bc:	1a004908 	.word	0x1a004908
1a0012c0:	1a00492c 	.word	0x1a00492c

1a0012c4 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0012c4:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0012c6:	4804      	ldr	r0, [pc, #16]	; (1a0012d8 <vApplicationStackOverflowHook+0x14>)
1a0012c8:	f002 fdf4 	bl	1a003eb4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0012cc:	4903      	ldr	r1, [pc, #12]	; (1a0012dc <vApplicationStackOverflowHook+0x18>)
1a0012ce:	2050      	movs	r0, #80	; 0x50
1a0012d0:	f7ff ffd4 	bl	1a00127c <vAssertCalled>
}
1a0012d4:	bd08      	pop	{r3, pc}
1a0012d6:	bf00      	nop
1a0012d8:	1a00494c 	.word	0x1a00494c
1a0012dc:	1a00492c 	.word	0x1a00492c

1a0012e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0012e0:	4b08      	ldr	r3, [pc, #32]	; (1a001304 <prvResetNextTaskUnblockTime+0x24>)
1a0012e2:	681b      	ldr	r3, [r3, #0]
1a0012e4:	681b      	ldr	r3, [r3, #0]
1a0012e6:	b13b      	cbz	r3, 1a0012f8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0012e8:	4b06      	ldr	r3, [pc, #24]	; (1a001304 <prvResetNextTaskUnblockTime+0x24>)
1a0012ea:	681b      	ldr	r3, [r3, #0]
1a0012ec:	68db      	ldr	r3, [r3, #12]
1a0012ee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0012f0:	685a      	ldr	r2, [r3, #4]
1a0012f2:	4b05      	ldr	r3, [pc, #20]	; (1a001308 <prvResetNextTaskUnblockTime+0x28>)
1a0012f4:	601a      	str	r2, [r3, #0]
	}
}
1a0012f6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0012f8:	4b03      	ldr	r3, [pc, #12]	; (1a001308 <prvResetNextTaskUnblockTime+0x28>)
1a0012fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0012fe:	601a      	str	r2, [r3, #0]
1a001300:	4770      	bx	lr
1a001302:	bf00      	nop
1a001304:	1000288c 	.word	0x1000288c
1a001308:	10002960 	.word	0x10002960

1a00130c <prvInitialiseNewTask>:
{
1a00130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001310:	4681      	mov	r9, r0
1a001312:	460d      	mov	r5, r1
1a001314:	4617      	mov	r7, r2
1a001316:	469a      	mov	sl, r3
1a001318:	9e08      	ldr	r6, [sp, #32]
1a00131a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00131e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001320:	0092      	lsls	r2, r2, #2
1a001322:	21a5      	movs	r1, #165	; 0xa5
1a001324:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001326:	f002 fd14 	bl	1a003d52 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00132a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00132c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001330:	3a01      	subs	r2, #1
1a001332:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001336:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00133a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00133c:	2300      	movs	r3, #0
1a00133e:	2b0f      	cmp	r3, #15
1a001340:	d807      	bhi.n	1a001352 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001342:	5ce9      	ldrb	r1, [r5, r3]
1a001344:	18e2      	adds	r2, r4, r3
1a001346:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00134a:	5cea      	ldrb	r2, [r5, r3]
1a00134c:	b10a      	cbz	r2, 1a001352 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00134e:	3301      	adds	r3, #1
1a001350:	e7f5      	b.n	1a00133e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001352:	2300      	movs	r3, #0
1a001354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001358:	2e06      	cmp	r6, #6
1a00135a:	d900      	bls.n	1a00135e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a00135c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00135e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001360:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001362:	2500      	movs	r5, #0
1a001364:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001366:	1d20      	adds	r0, r4, #4
1a001368:	f7ff ff32 	bl	1a0011d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a00136c:	f104 0018 	add.w	r0, r4, #24
1a001370:	f7ff ff2e 	bl	1a0011d0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001374:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001376:	f1c6 0607 	rsb	r6, r6, #7
1a00137a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a00137c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a00137e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001380:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001384:	4652      	mov	r2, sl
1a001386:	4649      	mov	r1, r9
1a001388:	4638      	mov	r0, r7
1a00138a:	f000 ffdf 	bl	1a00234c <pxPortInitialiseStack>
1a00138e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001390:	f1b8 0f00 	cmp.w	r8, #0
1a001394:	d001      	beq.n	1a00139a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001396:	f8c8 4000 	str.w	r4, [r8]
}
1a00139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00139e:	Address 0x000000001a00139e is out of bounds.


1a0013a0 <prvInitialiseTaskLists>:
{
1a0013a0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0013a2:	2400      	movs	r4, #0
1a0013a4:	e007      	b.n	1a0013b6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0013a6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0013aa:	0093      	lsls	r3, r2, #2
1a0013ac:	480e      	ldr	r0, [pc, #56]	; (1a0013e8 <prvInitialiseTaskLists+0x48>)
1a0013ae:	4418      	add	r0, r3
1a0013b0:	f7ff ff03 	bl	1a0011ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0013b4:	3401      	adds	r4, #1
1a0013b6:	2c06      	cmp	r4, #6
1a0013b8:	d9f5      	bls.n	1a0013a6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0013ba:	4d0c      	ldr	r5, [pc, #48]	; (1a0013ec <prvInitialiseTaskLists+0x4c>)
1a0013bc:	4628      	mov	r0, r5
1a0013be:	f7ff fefc 	bl	1a0011ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0013c2:	4c0b      	ldr	r4, [pc, #44]	; (1a0013f0 <prvInitialiseTaskLists+0x50>)
1a0013c4:	4620      	mov	r0, r4
1a0013c6:	f7ff fef8 	bl	1a0011ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0013ca:	480a      	ldr	r0, [pc, #40]	; (1a0013f4 <prvInitialiseTaskLists+0x54>)
1a0013cc:	f7ff fef5 	bl	1a0011ba <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0013d0:	4809      	ldr	r0, [pc, #36]	; (1a0013f8 <prvInitialiseTaskLists+0x58>)
1a0013d2:	f7ff fef2 	bl	1a0011ba <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0013d6:	4809      	ldr	r0, [pc, #36]	; (1a0013fc <prvInitialiseTaskLists+0x5c>)
1a0013d8:	f7ff feef 	bl	1a0011ba <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0013dc:	4b08      	ldr	r3, [pc, #32]	; (1a001400 <prvInitialiseTaskLists+0x60>)
1a0013de:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0013e0:	4b08      	ldr	r3, [pc, #32]	; (1a001404 <prvInitialiseTaskLists+0x64>)
1a0013e2:	601c      	str	r4, [r3, #0]
}
1a0013e4:	bd38      	pop	{r3, r4, r5, pc}
1a0013e6:	bf00      	nop
1a0013e8:	10002894 	.word	0x10002894
1a0013ec:	10002938 	.word	0x10002938
1a0013f0:	1000294c 	.word	0x1000294c
1a0013f4:	10002968 	.word	0x10002968
1a0013f8:	10002994 	.word	0x10002994
1a0013fc:	10002980 	.word	0x10002980
1a001400:	1000288c 	.word	0x1000288c
1a001404:	10002890 	.word	0x10002890

1a001408 <prvAddNewTaskToReadyList>:
{
1a001408:	b510      	push	{r4, lr}
1a00140a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00140c:	f000 ffca 	bl	1a0023a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001410:	4a21      	ldr	r2, [pc, #132]	; (1a001498 <prvAddNewTaskToReadyList+0x90>)
1a001412:	6813      	ldr	r3, [r2, #0]
1a001414:	3301      	adds	r3, #1
1a001416:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001418:	4b20      	ldr	r3, [pc, #128]	; (1a00149c <prvAddNewTaskToReadyList+0x94>)
1a00141a:	681b      	ldr	r3, [r3, #0]
1a00141c:	b15b      	cbz	r3, 1a001436 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00141e:	4b20      	ldr	r3, [pc, #128]	; (1a0014a0 <prvAddNewTaskToReadyList+0x98>)
1a001420:	681b      	ldr	r3, [r3, #0]
1a001422:	b96b      	cbnz	r3, 1a001440 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001424:	4b1d      	ldr	r3, [pc, #116]	; (1a00149c <prvAddNewTaskToReadyList+0x94>)
1a001426:	681b      	ldr	r3, [r3, #0]
1a001428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00142a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00142c:	429a      	cmp	r2, r3
1a00142e:	d807      	bhi.n	1a001440 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001430:	4b1a      	ldr	r3, [pc, #104]	; (1a00149c <prvAddNewTaskToReadyList+0x94>)
1a001432:	601c      	str	r4, [r3, #0]
1a001434:	e004      	b.n	1a001440 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001436:	4b19      	ldr	r3, [pc, #100]	; (1a00149c <prvAddNewTaskToReadyList+0x94>)
1a001438:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00143a:	6813      	ldr	r3, [r2, #0]
1a00143c:	2b01      	cmp	r3, #1
1a00143e:	d027      	beq.n	1a001490 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001440:	4a18      	ldr	r2, [pc, #96]	; (1a0014a4 <prvAddNewTaskToReadyList+0x9c>)
1a001442:	6813      	ldr	r3, [r2, #0]
1a001444:	3301      	adds	r3, #1
1a001446:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001448:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00144a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00144c:	2201      	movs	r2, #1
1a00144e:	409a      	lsls	r2, r3
1a001450:	4915      	ldr	r1, [pc, #84]	; (1a0014a8 <prvAddNewTaskToReadyList+0xa0>)
1a001452:	6808      	ldr	r0, [r1, #0]
1a001454:	4302      	orrs	r2, r0
1a001456:	600a      	str	r2, [r1, #0]
1a001458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00145c:	009a      	lsls	r2, r3, #2
1a00145e:	1d21      	adds	r1, r4, #4
1a001460:	4812      	ldr	r0, [pc, #72]	; (1a0014ac <prvAddNewTaskToReadyList+0xa4>)
1a001462:	4410      	add	r0, r2
1a001464:	f7ff feb7 	bl	1a0011d6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001468:	f000 ffbe 	bl	1a0023e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a00146c:	4b0c      	ldr	r3, [pc, #48]	; (1a0014a0 <prvAddNewTaskToReadyList+0x98>)
1a00146e:	681b      	ldr	r3, [r3, #0]
1a001470:	b16b      	cbz	r3, 1a00148e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001472:	4b0a      	ldr	r3, [pc, #40]	; (1a00149c <prvAddNewTaskToReadyList+0x94>)
1a001474:	681b      	ldr	r3, [r3, #0]
1a001476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00147a:	429a      	cmp	r2, r3
1a00147c:	d207      	bcs.n	1a00148e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00147e:	4b0c      	ldr	r3, [pc, #48]	; (1a0014b0 <prvAddNewTaskToReadyList+0xa8>)
1a001480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001484:	601a      	str	r2, [r3, #0]
1a001486:	f3bf 8f4f 	dsb	sy
1a00148a:	f3bf 8f6f 	isb	sy
}
1a00148e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001490:	f7ff ff86 	bl	1a0013a0 <prvInitialiseTaskLists>
1a001494:	e7d4      	b.n	1a001440 <prvAddNewTaskToReadyList+0x38>
1a001496:	bf00      	nop
1a001498:	10002920 	.word	0x10002920
1a00149c:	10002888 	.word	0x10002888
1a0014a0:	1000297c 	.word	0x1000297c
1a0014a4:	10002930 	.word	0x10002930
1a0014a8:	10002934 	.word	0x10002934
1a0014ac:	10002894 	.word	0x10002894
1a0014b0:	e000ed04 	.word	0xe000ed04

1a0014b4 <prvDeleteTCB>:
	{
1a0014b4:	b510      	push	{r4, lr}
1a0014b6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0014b8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0014bc:	b933      	cbnz	r3, 1a0014cc <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0014be:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0014c0:	f7ff f9fc 	bl	1a0008bc <vPortFree>
				vPortFree( pxTCB );
1a0014c4:	4620      	mov	r0, r4
1a0014c6:	f7ff f9f9 	bl	1a0008bc <vPortFree>
	}
1a0014ca:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0014cc:	2b01      	cmp	r3, #1
1a0014ce:	d00a      	beq.n	1a0014e6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0014d0:	2b02      	cmp	r3, #2
1a0014d2:	d0fa      	beq.n	1a0014ca <prvDeleteTCB+0x16>
1a0014d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014d8:	f383 8811 	msr	BASEPRI, r3
1a0014dc:	f3bf 8f6f 	isb	sy
1a0014e0:	f3bf 8f4f 	dsb	sy
1a0014e4:	e7fe      	b.n	1a0014e4 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0014e6:	f7ff f9e9 	bl	1a0008bc <vPortFree>
1a0014ea:	e7ee      	b.n	1a0014ca <prvDeleteTCB+0x16>

1a0014ec <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0014ec:	4b0f      	ldr	r3, [pc, #60]	; (1a00152c <prvCheckTasksWaitingTermination+0x40>)
1a0014ee:	681b      	ldr	r3, [r3, #0]
1a0014f0:	b1d3      	cbz	r3, 1a001528 <prvCheckTasksWaitingTermination+0x3c>
{
1a0014f2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0014f4:	f000 ff56 	bl	1a0023a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0014f8:	4b0d      	ldr	r3, [pc, #52]	; (1a001530 <prvCheckTasksWaitingTermination+0x44>)
1a0014fa:	68db      	ldr	r3, [r3, #12]
1a0014fc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0014fe:	1d20      	adds	r0, r4, #4
1a001500:	f7ff fe8f 	bl	1a001222 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001504:	4a0b      	ldr	r2, [pc, #44]	; (1a001534 <prvCheckTasksWaitingTermination+0x48>)
1a001506:	6813      	ldr	r3, [r2, #0]
1a001508:	3b01      	subs	r3, #1
1a00150a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00150c:	4a07      	ldr	r2, [pc, #28]	; (1a00152c <prvCheckTasksWaitingTermination+0x40>)
1a00150e:	6813      	ldr	r3, [r2, #0]
1a001510:	3b01      	subs	r3, #1
1a001512:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001514:	f000 ff68 	bl	1a0023e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001518:	4620      	mov	r0, r4
1a00151a:	f7ff ffcb 	bl	1a0014b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00151e:	4b03      	ldr	r3, [pc, #12]	; (1a00152c <prvCheckTasksWaitingTermination+0x40>)
1a001520:	681b      	ldr	r3, [r3, #0]
1a001522:	2b00      	cmp	r3, #0
1a001524:	d1e6      	bne.n	1a0014f4 <prvCheckTasksWaitingTermination+0x8>
}
1a001526:	bd10      	pop	{r4, pc}
1a001528:	4770      	bx	lr
1a00152a:	bf00      	nop
1a00152c:	10002924 	.word	0x10002924
1a001530:	10002994 	.word	0x10002994
1a001534:	10002920 	.word	0x10002920

1a001538 <prvIdleTask>:
{
1a001538:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00153a:	f7ff ffd7 	bl	1a0014ec <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00153e:	4b06      	ldr	r3, [pc, #24]	; (1a001558 <prvIdleTask+0x20>)
1a001540:	681b      	ldr	r3, [r3, #0]
1a001542:	2b01      	cmp	r3, #1
1a001544:	d9f9      	bls.n	1a00153a <prvIdleTask+0x2>
				taskYIELD();
1a001546:	4b05      	ldr	r3, [pc, #20]	; (1a00155c <prvIdleTask+0x24>)
1a001548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00154c:	601a      	str	r2, [r3, #0]
1a00154e:	f3bf 8f4f 	dsb	sy
1a001552:	f3bf 8f6f 	isb	sy
1a001556:	e7f0      	b.n	1a00153a <prvIdleTask+0x2>
1a001558:	10002894 	.word	0x10002894
1a00155c:	e000ed04 	.word	0xe000ed04

1a001560 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001560:	b570      	push	{r4, r5, r6, lr}
1a001562:	4604      	mov	r4, r0
1a001564:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001566:	4b1d      	ldr	r3, [pc, #116]	; (1a0015dc <prvAddCurrentTaskToDelayedList+0x7c>)
1a001568:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00156a:	4b1d      	ldr	r3, [pc, #116]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a00156c:	6818      	ldr	r0, [r3, #0]
1a00156e:	3004      	adds	r0, #4
1a001570:	f7ff fe57 	bl	1a001222 <uxListRemove>
1a001574:	b950      	cbnz	r0, 1a00158c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001576:	4b1a      	ldr	r3, [pc, #104]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001578:	681b      	ldr	r3, [r3, #0]
1a00157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00157c:	2301      	movs	r3, #1
1a00157e:	fa03 f202 	lsl.w	r2, r3, r2
1a001582:	4918      	ldr	r1, [pc, #96]	; (1a0015e4 <prvAddCurrentTaskToDelayedList+0x84>)
1a001584:	680b      	ldr	r3, [r1, #0]
1a001586:	ea23 0302 	bic.w	r3, r3, r2
1a00158a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00158c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001590:	d013      	beq.n	1a0015ba <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001592:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001594:	4b12      	ldr	r3, [pc, #72]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001596:	681b      	ldr	r3, [r3, #0]
1a001598:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00159a:	42a5      	cmp	r5, r4
1a00159c:	d816      	bhi.n	1a0015cc <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00159e:	4b12      	ldr	r3, [pc, #72]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x88>)
1a0015a0:	6818      	ldr	r0, [r3, #0]
1a0015a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a0015a4:	6819      	ldr	r1, [r3, #0]
1a0015a6:	3104      	adds	r1, #4
1a0015a8:	f7ff fe21 	bl	1a0011ee <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0015ac:	4b0f      	ldr	r3, [pc, #60]	; (1a0015ec <prvAddCurrentTaskToDelayedList+0x8c>)
1a0015ae:	681b      	ldr	r3, [r3, #0]
1a0015b0:	42a3      	cmp	r3, r4
1a0015b2:	d912      	bls.n	1a0015da <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0015b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0015ec <prvAddCurrentTaskToDelayedList+0x8c>)
1a0015b6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0015b8:	e00f      	b.n	1a0015da <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0015ba:	2e00      	cmp	r6, #0
1a0015bc:	d0e9      	beq.n	1a001592 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015be:	4b08      	ldr	r3, [pc, #32]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a0015c0:	6819      	ldr	r1, [r3, #0]
1a0015c2:	3104      	adds	r1, #4
1a0015c4:	480a      	ldr	r0, [pc, #40]	; (1a0015f0 <prvAddCurrentTaskToDelayedList+0x90>)
1a0015c6:	f7ff fe06 	bl	1a0011d6 <vListInsertEnd>
1a0015ca:	e006      	b.n	1a0015da <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015cc:	4b09      	ldr	r3, [pc, #36]	; (1a0015f4 <prvAddCurrentTaskToDelayedList+0x94>)
1a0015ce:	6818      	ldr	r0, [r3, #0]
1a0015d0:	4b03      	ldr	r3, [pc, #12]	; (1a0015e0 <prvAddCurrentTaskToDelayedList+0x80>)
1a0015d2:	6819      	ldr	r1, [r3, #0]
1a0015d4:	3104      	adds	r1, #4
1a0015d6:	f7ff fe0a 	bl	1a0011ee <vListInsert>
}
1a0015da:	bd70      	pop	{r4, r5, r6, pc}
1a0015dc:	100029a8 	.word	0x100029a8
1a0015e0:	10002888 	.word	0x10002888
1a0015e4:	10002934 	.word	0x10002934
1a0015e8:	1000288c 	.word	0x1000288c
1a0015ec:	10002960 	.word	0x10002960
1a0015f0:	10002980 	.word	0x10002980
1a0015f4:	10002890 	.word	0x10002890

1a0015f8 <xTaskCreateStatic>:
	{
1a0015f8:	b570      	push	{r4, r5, r6, lr}
1a0015fa:	b086      	sub	sp, #24
1a0015fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0015fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001600:	b945      	cbnz	r5, 1a001614 <xTaskCreateStatic+0x1c>
1a001602:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001606:	f383 8811 	msr	BASEPRI, r3
1a00160a:	f3bf 8f6f 	isb	sy
1a00160e:	f3bf 8f4f 	dsb	sy
1a001612:	e7fe      	b.n	1a001612 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001614:	b944      	cbnz	r4, 1a001628 <xTaskCreateStatic+0x30>
1a001616:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00161a:	f383 8811 	msr	BASEPRI, r3
1a00161e:	f3bf 8f6f 	isb	sy
1a001622:	f3bf 8f4f 	dsb	sy
1a001626:	e7fe      	b.n	1a001626 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001628:	2660      	movs	r6, #96	; 0x60
1a00162a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00162c:	9e04      	ldr	r6, [sp, #16]
1a00162e:	2e60      	cmp	r6, #96	; 0x60
1a001630:	d008      	beq.n	1a001644 <xTaskCreateStatic+0x4c>
1a001632:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001636:	f383 8811 	msr	BASEPRI, r3
1a00163a:	f3bf 8f6f 	isb	sy
1a00163e:	f3bf 8f4f 	dsb	sy
1a001642:	e7fe      	b.n	1a001642 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001644:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001646:	2502      	movs	r5, #2
1a001648:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a00164c:	2500      	movs	r5, #0
1a00164e:	9503      	str	r5, [sp, #12]
1a001650:	9402      	str	r4, [sp, #8]
1a001652:	ad05      	add	r5, sp, #20
1a001654:	9501      	str	r5, [sp, #4]
1a001656:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001658:	9500      	str	r5, [sp, #0]
1a00165a:	f7ff fe57 	bl	1a00130c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00165e:	4620      	mov	r0, r4
1a001660:	f7ff fed2 	bl	1a001408 <prvAddNewTaskToReadyList>
	}
1a001664:	9805      	ldr	r0, [sp, #20]
1a001666:	b006      	add	sp, #24
1a001668:	bd70      	pop	{r4, r5, r6, pc}

1a00166a <xTaskCreate>:
	{
1a00166a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00166e:	b085      	sub	sp, #20
1a001670:	4607      	mov	r7, r0
1a001672:	4688      	mov	r8, r1
1a001674:	4615      	mov	r5, r2
1a001676:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001678:	0090      	lsls	r0, r2, #2
1a00167a:	f7ff f891 	bl	1a0007a0 <pvPortMalloc>
			if( pxStack != NULL )
1a00167e:	b308      	cbz	r0, 1a0016c4 <xTaskCreate+0x5a>
1a001680:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001682:	2060      	movs	r0, #96	; 0x60
1a001684:	f7ff f88c 	bl	1a0007a0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001688:	4604      	mov	r4, r0
1a00168a:	b1b8      	cbz	r0, 1a0016bc <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a00168c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00168e:	b1e4      	cbz	r4, 1a0016ca <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001690:	2300      	movs	r3, #0
1a001692:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001696:	9303      	str	r3, [sp, #12]
1a001698:	9402      	str	r4, [sp, #8]
1a00169a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00169c:	9301      	str	r3, [sp, #4]
1a00169e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0016a0:	9300      	str	r3, [sp, #0]
1a0016a2:	464b      	mov	r3, r9
1a0016a4:	462a      	mov	r2, r5
1a0016a6:	4641      	mov	r1, r8
1a0016a8:	4638      	mov	r0, r7
1a0016aa:	f7ff fe2f 	bl	1a00130c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0016ae:	4620      	mov	r0, r4
1a0016b0:	f7ff feaa 	bl	1a001408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0016b4:	2001      	movs	r0, #1
	}
1a0016b6:	b005      	add	sp, #20
1a0016b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0016bc:	4630      	mov	r0, r6
1a0016be:	f7ff f8fd 	bl	1a0008bc <vPortFree>
1a0016c2:	e7e4      	b.n	1a00168e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0016c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0016c8:	e7f5      	b.n	1a0016b6 <xTaskCreate+0x4c>
1a0016ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0016ce:	e7f2      	b.n	1a0016b6 <xTaskCreate+0x4c>

1a0016d0 <vTaskStartScheduler>:
{
1a0016d0:	b510      	push	{r4, lr}
1a0016d2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0016d4:	2400      	movs	r4, #0
1a0016d6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0016d8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0016da:	aa07      	add	r2, sp, #28
1a0016dc:	a906      	add	r1, sp, #24
1a0016de:	a805      	add	r0, sp, #20
1a0016e0:	f7ff fdb4 	bl	1a00124c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0016e4:	9b05      	ldr	r3, [sp, #20]
1a0016e6:	9302      	str	r3, [sp, #8]
1a0016e8:	9b06      	ldr	r3, [sp, #24]
1a0016ea:	9301      	str	r3, [sp, #4]
1a0016ec:	9400      	str	r4, [sp, #0]
1a0016ee:	4623      	mov	r3, r4
1a0016f0:	9a07      	ldr	r2, [sp, #28]
1a0016f2:	4917      	ldr	r1, [pc, #92]	; (1a001750 <vTaskStartScheduler+0x80>)
1a0016f4:	4817      	ldr	r0, [pc, #92]	; (1a001754 <vTaskStartScheduler+0x84>)
1a0016f6:	f7ff ff7f 	bl	1a0015f8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0016fa:	b140      	cbz	r0, 1a00170e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0016fc:	f000 fc3a 	bl	1a001f74 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001700:	2801      	cmp	r0, #1
1a001702:	d006      	beq.n	1a001712 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001704:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001708:	d018      	beq.n	1a00173c <vTaskStartScheduler+0x6c>
}
1a00170a:	b008      	add	sp, #32
1a00170c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00170e:	2000      	movs	r0, #0
1a001710:	e7f6      	b.n	1a001700 <vTaskStartScheduler+0x30>
1a001712:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001716:	f383 8811 	msr	BASEPRI, r3
1a00171a:	f3bf 8f6f 	isb	sy
1a00171e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001722:	4b0d      	ldr	r3, [pc, #52]	; (1a001758 <vTaskStartScheduler+0x88>)
1a001724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00172a:	4b0c      	ldr	r3, [pc, #48]	; (1a00175c <vTaskStartScheduler+0x8c>)
1a00172c:	2201      	movs	r2, #1
1a00172e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001730:	4b0b      	ldr	r3, [pc, #44]	; (1a001760 <vTaskStartScheduler+0x90>)
1a001732:	2200      	movs	r2, #0
1a001734:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001736:	f000 fed7 	bl	1a0024e8 <xPortStartScheduler>
1a00173a:	e7e6      	b.n	1a00170a <vTaskStartScheduler+0x3a>
1a00173c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001740:	f383 8811 	msr	BASEPRI, r3
1a001744:	f3bf 8f6f 	isb	sy
1a001748:	f3bf 8f4f 	dsb	sy
1a00174c:	e7fe      	b.n	1a00174c <vTaskStartScheduler+0x7c>
1a00174e:	bf00      	nop
1a001750:	1a0049bc 	.word	0x1a0049bc
1a001754:	1a001539 	.word	0x1a001539
1a001758:	10002960 	.word	0x10002960
1a00175c:	1000297c 	.word	0x1000297c
1a001760:	100029a8 	.word	0x100029a8

1a001764 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001764:	4a02      	ldr	r2, [pc, #8]	; (1a001770 <vTaskSuspendAll+0xc>)
1a001766:	6813      	ldr	r3, [r2, #0]
1a001768:	3301      	adds	r3, #1
1a00176a:	6013      	str	r3, [r2, #0]
}
1a00176c:	4770      	bx	lr
1a00176e:	bf00      	nop
1a001770:	1000292c 	.word	0x1000292c

1a001774 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001774:	4b01      	ldr	r3, [pc, #4]	; (1a00177c <xTaskGetTickCount+0x8>)
1a001776:	6818      	ldr	r0, [r3, #0]
}
1a001778:	4770      	bx	lr
1a00177a:	bf00      	nop
1a00177c:	100029a8 	.word	0x100029a8

1a001780 <xTaskIncrementTick>:
{
1a001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001782:	4b3a      	ldr	r3, [pc, #232]	; (1a00186c <xTaskIncrementTick+0xec>)
1a001784:	681b      	ldr	r3, [r3, #0]
1a001786:	2b00      	cmp	r3, #0
1a001788:	d164      	bne.n	1a001854 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00178a:	4b39      	ldr	r3, [pc, #228]	; (1a001870 <xTaskIncrementTick+0xf0>)
1a00178c:	681d      	ldr	r5, [r3, #0]
1a00178e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001790:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001792:	b9c5      	cbnz	r5, 1a0017c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001794:	4b37      	ldr	r3, [pc, #220]	; (1a001874 <xTaskIncrementTick+0xf4>)
1a001796:	681b      	ldr	r3, [r3, #0]
1a001798:	681b      	ldr	r3, [r3, #0]
1a00179a:	b143      	cbz	r3, 1a0017ae <xTaskIncrementTick+0x2e>
1a00179c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017a0:	f383 8811 	msr	BASEPRI, r3
1a0017a4:	f3bf 8f6f 	isb	sy
1a0017a8:	f3bf 8f4f 	dsb	sy
1a0017ac:	e7fe      	b.n	1a0017ac <xTaskIncrementTick+0x2c>
1a0017ae:	4a31      	ldr	r2, [pc, #196]	; (1a001874 <xTaskIncrementTick+0xf4>)
1a0017b0:	6811      	ldr	r1, [r2, #0]
1a0017b2:	4b31      	ldr	r3, [pc, #196]	; (1a001878 <xTaskIncrementTick+0xf8>)
1a0017b4:	6818      	ldr	r0, [r3, #0]
1a0017b6:	6010      	str	r0, [r2, #0]
1a0017b8:	6019      	str	r1, [r3, #0]
1a0017ba:	4a30      	ldr	r2, [pc, #192]	; (1a00187c <xTaskIncrementTick+0xfc>)
1a0017bc:	6813      	ldr	r3, [r2, #0]
1a0017be:	3301      	adds	r3, #1
1a0017c0:	6013      	str	r3, [r2, #0]
1a0017c2:	f7ff fd8d 	bl	1a0012e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0017c6:	4b2e      	ldr	r3, [pc, #184]	; (1a001880 <xTaskIncrementTick+0x100>)
1a0017c8:	681b      	ldr	r3, [r3, #0]
1a0017ca:	42ab      	cmp	r3, r5
1a0017cc:	d938      	bls.n	1a001840 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0017ce:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0017d0:	4b2c      	ldr	r3, [pc, #176]	; (1a001884 <xTaskIncrementTick+0x104>)
1a0017d2:	681b      	ldr	r3, [r3, #0]
1a0017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017da:	009a      	lsls	r2, r3, #2
1a0017dc:	4b2a      	ldr	r3, [pc, #168]	; (1a001888 <xTaskIncrementTick+0x108>)
1a0017de:	589b      	ldr	r3, [r3, r2]
1a0017e0:	2b01      	cmp	r3, #1
1a0017e2:	d93c      	bls.n	1a00185e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0017e4:	2401      	movs	r4, #1
1a0017e6:	e03a      	b.n	1a00185e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0017e8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0017ea:	4b22      	ldr	r3, [pc, #136]	; (1a001874 <xTaskIncrementTick+0xf4>)
1a0017ec:	681b      	ldr	r3, [r3, #0]
1a0017ee:	681b      	ldr	r3, [r3, #0]
1a0017f0:	b343      	cbz	r3, 1a001844 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0017f2:	4b20      	ldr	r3, [pc, #128]	; (1a001874 <xTaskIncrementTick+0xf4>)
1a0017f4:	681b      	ldr	r3, [r3, #0]
1a0017f6:	68db      	ldr	r3, [r3, #12]
1a0017f8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0017fa:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0017fc:	429d      	cmp	r5, r3
1a0017fe:	d326      	bcc.n	1a00184e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001800:	1d37      	adds	r7, r6, #4
1a001802:	4638      	mov	r0, r7
1a001804:	f7ff fd0d 	bl	1a001222 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001808:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00180a:	b11b      	cbz	r3, 1a001814 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00180c:	f106 0018 	add.w	r0, r6, #24
1a001810:	f7ff fd07 	bl	1a001222 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001814:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001816:	2201      	movs	r2, #1
1a001818:	409a      	lsls	r2, r3
1a00181a:	491c      	ldr	r1, [pc, #112]	; (1a00188c <xTaskIncrementTick+0x10c>)
1a00181c:	6808      	ldr	r0, [r1, #0]
1a00181e:	4302      	orrs	r2, r0
1a001820:	600a      	str	r2, [r1, #0]
1a001822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001826:	009a      	lsls	r2, r3, #2
1a001828:	4639      	mov	r1, r7
1a00182a:	4817      	ldr	r0, [pc, #92]	; (1a001888 <xTaskIncrementTick+0x108>)
1a00182c:	4410      	add	r0, r2
1a00182e:	f7ff fcd2 	bl	1a0011d6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001832:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001834:	4b13      	ldr	r3, [pc, #76]	; (1a001884 <xTaskIncrementTick+0x104>)
1a001836:	681b      	ldr	r3, [r3, #0]
1a001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00183a:	429a      	cmp	r2, r3
1a00183c:	d2d4      	bcs.n	1a0017e8 <xTaskIncrementTick+0x68>
1a00183e:	e7d4      	b.n	1a0017ea <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001840:	2400      	movs	r4, #0
1a001842:	e7d2      	b.n	1a0017ea <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001844:	4b0e      	ldr	r3, [pc, #56]	; (1a001880 <xTaskIncrementTick+0x100>)
1a001846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00184a:	601a      	str	r2, [r3, #0]
					break;
1a00184c:	e7c0      	b.n	1a0017d0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00184e:	4a0c      	ldr	r2, [pc, #48]	; (1a001880 <xTaskIncrementTick+0x100>)
1a001850:	6013      	str	r3, [r2, #0]
						break;
1a001852:	e7bd      	b.n	1a0017d0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001854:	4a0e      	ldr	r2, [pc, #56]	; (1a001890 <xTaskIncrementTick+0x110>)
1a001856:	6813      	ldr	r3, [r2, #0]
1a001858:	3301      	adds	r3, #1
1a00185a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00185c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00185e:	4b0d      	ldr	r3, [pc, #52]	; (1a001894 <xTaskIncrementTick+0x114>)
1a001860:	681b      	ldr	r3, [r3, #0]
1a001862:	b103      	cbz	r3, 1a001866 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001864:	2401      	movs	r4, #1
}
1a001866:	4620      	mov	r0, r4
1a001868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00186a:	bf00      	nop
1a00186c:	1000292c 	.word	0x1000292c
1a001870:	100029a8 	.word	0x100029a8
1a001874:	1000288c 	.word	0x1000288c
1a001878:	10002890 	.word	0x10002890
1a00187c:	10002964 	.word	0x10002964
1a001880:	10002960 	.word	0x10002960
1a001884:	10002888 	.word	0x10002888
1a001888:	10002894 	.word	0x10002894
1a00188c:	10002934 	.word	0x10002934
1a001890:	10002928 	.word	0x10002928
1a001894:	100029ac 	.word	0x100029ac

1a001898 <xTaskResumeAll>:
{
1a001898:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00189a:	4b33      	ldr	r3, [pc, #204]	; (1a001968 <xTaskResumeAll+0xd0>)
1a00189c:	681b      	ldr	r3, [r3, #0]
1a00189e:	b943      	cbnz	r3, 1a0018b2 <xTaskResumeAll+0x1a>
1a0018a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018a4:	f383 8811 	msr	BASEPRI, r3
1a0018a8:	f3bf 8f6f 	isb	sy
1a0018ac:	f3bf 8f4f 	dsb	sy
1a0018b0:	e7fe      	b.n	1a0018b0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0018b2:	f000 fd77 	bl	1a0023a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0018b6:	4b2c      	ldr	r3, [pc, #176]	; (1a001968 <xTaskResumeAll+0xd0>)
1a0018b8:	681a      	ldr	r2, [r3, #0]
1a0018ba:	3a01      	subs	r2, #1
1a0018bc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0018be:	681b      	ldr	r3, [r3, #0]
1a0018c0:	2b00      	cmp	r3, #0
1a0018c2:	d14d      	bne.n	1a001960 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0018c4:	4b29      	ldr	r3, [pc, #164]	; (1a00196c <xTaskResumeAll+0xd4>)
1a0018c6:	681b      	ldr	r3, [r3, #0]
1a0018c8:	b923      	cbnz	r3, 1a0018d4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0018ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0018cc:	f000 fd8c 	bl	1a0023e8 <vPortExitCritical>
}
1a0018d0:	4620      	mov	r0, r4
1a0018d2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0018d4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0018d6:	4b26      	ldr	r3, [pc, #152]	; (1a001970 <xTaskResumeAll+0xd8>)
1a0018d8:	681b      	ldr	r3, [r3, #0]
1a0018da:	b31b      	cbz	r3, 1a001924 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0018dc:	4b24      	ldr	r3, [pc, #144]	; (1a001970 <xTaskResumeAll+0xd8>)
1a0018de:	68db      	ldr	r3, [r3, #12]
1a0018e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0018e2:	f104 0018 	add.w	r0, r4, #24
1a0018e6:	f7ff fc9c 	bl	1a001222 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0018ea:	1d25      	adds	r5, r4, #4
1a0018ec:	4628      	mov	r0, r5
1a0018ee:	f7ff fc98 	bl	1a001222 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0018f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018f4:	2201      	movs	r2, #1
1a0018f6:	409a      	lsls	r2, r3
1a0018f8:	491e      	ldr	r1, [pc, #120]	; (1a001974 <xTaskResumeAll+0xdc>)
1a0018fa:	6808      	ldr	r0, [r1, #0]
1a0018fc:	4302      	orrs	r2, r0
1a0018fe:	600a      	str	r2, [r1, #0]
1a001900:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001904:	009a      	lsls	r2, r3, #2
1a001906:	4629      	mov	r1, r5
1a001908:	481b      	ldr	r0, [pc, #108]	; (1a001978 <xTaskResumeAll+0xe0>)
1a00190a:	4410      	add	r0, r2
1a00190c:	f7ff fc63 	bl	1a0011d6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001910:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001912:	4b1a      	ldr	r3, [pc, #104]	; (1a00197c <xTaskResumeAll+0xe4>)
1a001914:	681b      	ldr	r3, [r3, #0]
1a001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001918:	429a      	cmp	r2, r3
1a00191a:	d3dc      	bcc.n	1a0018d6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00191c:	4b18      	ldr	r3, [pc, #96]	; (1a001980 <xTaskResumeAll+0xe8>)
1a00191e:	2201      	movs	r2, #1
1a001920:	601a      	str	r2, [r3, #0]
1a001922:	e7d8      	b.n	1a0018d6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001924:	b10c      	cbz	r4, 1a00192a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001926:	f7ff fcdb 	bl	1a0012e0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00192a:	4b16      	ldr	r3, [pc, #88]	; (1a001984 <xTaskResumeAll+0xec>)
1a00192c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00192e:	b154      	cbz	r4, 1a001946 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001930:	f7ff ff26 	bl	1a001780 <xTaskIncrementTick>
1a001934:	b110      	cbz	r0, 1a00193c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001936:	4b12      	ldr	r3, [pc, #72]	; (1a001980 <xTaskResumeAll+0xe8>)
1a001938:	2201      	movs	r2, #1
1a00193a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00193c:	3c01      	subs	r4, #1
1a00193e:	d1f7      	bne.n	1a001930 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001940:	4b10      	ldr	r3, [pc, #64]	; (1a001984 <xTaskResumeAll+0xec>)
1a001942:	2200      	movs	r2, #0
1a001944:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001946:	4b0e      	ldr	r3, [pc, #56]	; (1a001980 <xTaskResumeAll+0xe8>)
1a001948:	681b      	ldr	r3, [r3, #0]
1a00194a:	b15b      	cbz	r3, 1a001964 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a00194c:	4b0e      	ldr	r3, [pc, #56]	; (1a001988 <xTaskResumeAll+0xf0>)
1a00194e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001952:	601a      	str	r2, [r3, #0]
1a001954:	f3bf 8f4f 	dsb	sy
1a001958:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00195c:	2401      	movs	r4, #1
1a00195e:	e7b5      	b.n	1a0018cc <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001960:	2400      	movs	r4, #0
1a001962:	e7b3      	b.n	1a0018cc <xTaskResumeAll+0x34>
1a001964:	2400      	movs	r4, #0
1a001966:	e7b1      	b.n	1a0018cc <xTaskResumeAll+0x34>
1a001968:	1000292c 	.word	0x1000292c
1a00196c:	10002920 	.word	0x10002920
1a001970:	10002968 	.word	0x10002968
1a001974:	10002934 	.word	0x10002934
1a001978:	10002894 	.word	0x10002894
1a00197c:	10002888 	.word	0x10002888
1a001980:	100029ac 	.word	0x100029ac
1a001984:	10002928 	.word	0x10002928
1a001988:	e000ed04 	.word	0xe000ed04

1a00198c <vTaskDelay>:
	{
1a00198c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00198e:	b1a8      	cbz	r0, 1a0019bc <vTaskDelay+0x30>
1a001990:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001992:	4b0f      	ldr	r3, [pc, #60]	; (1a0019d0 <vTaskDelay+0x44>)
1a001994:	681b      	ldr	r3, [r3, #0]
1a001996:	b143      	cbz	r3, 1a0019aa <vTaskDelay+0x1e>
1a001998:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00199c:	f383 8811 	msr	BASEPRI, r3
1a0019a0:	f3bf 8f6f 	isb	sy
1a0019a4:	f3bf 8f4f 	dsb	sy
1a0019a8:	e7fe      	b.n	1a0019a8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0019aa:	f7ff fedb 	bl	1a001764 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0019ae:	2100      	movs	r1, #0
1a0019b0:	4620      	mov	r0, r4
1a0019b2:	f7ff fdd5 	bl	1a001560 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0019b6:	f7ff ff6f 	bl	1a001898 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0019ba:	b938      	cbnz	r0, 1a0019cc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0019bc:	4b05      	ldr	r3, [pc, #20]	; (1a0019d4 <vTaskDelay+0x48>)
1a0019be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019c2:	601a      	str	r2, [r3, #0]
1a0019c4:	f3bf 8f4f 	dsb	sy
1a0019c8:	f3bf 8f6f 	isb	sy
	}
1a0019cc:	bd10      	pop	{r4, pc}
1a0019ce:	bf00      	nop
1a0019d0:	1000292c 	.word	0x1000292c
1a0019d4:	e000ed04 	.word	0xe000ed04

1a0019d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0019d8:	4b2c      	ldr	r3, [pc, #176]	; (1a001a8c <vTaskSwitchContext+0xb4>)
1a0019da:	681b      	ldr	r3, [r3, #0]
1a0019dc:	b11b      	cbz	r3, 1a0019e6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0019de:	4b2c      	ldr	r3, [pc, #176]	; (1a001a90 <vTaskSwitchContext+0xb8>)
1a0019e0:	2201      	movs	r2, #1
1a0019e2:	601a      	str	r2, [r3, #0]
1a0019e4:	4770      	bx	lr
{
1a0019e6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0019e8:	4b29      	ldr	r3, [pc, #164]	; (1a001a90 <vTaskSwitchContext+0xb8>)
1a0019ea:	2200      	movs	r2, #0
1a0019ec:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0019ee:	4b29      	ldr	r3, [pc, #164]	; (1a001a94 <vTaskSwitchContext+0xbc>)
1a0019f0:	681b      	ldr	r3, [r3, #0]
1a0019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0019f4:	681a      	ldr	r2, [r3, #0]
1a0019f6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019fa:	d103      	bne.n	1a001a04 <vTaskSwitchContext+0x2c>
1a0019fc:	685a      	ldr	r2, [r3, #4]
1a0019fe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a02:	d01b      	beq.n	1a001a3c <vTaskSwitchContext+0x64>
1a001a04:	4b23      	ldr	r3, [pc, #140]	; (1a001a94 <vTaskSwitchContext+0xbc>)
1a001a06:	6818      	ldr	r0, [r3, #0]
1a001a08:	6819      	ldr	r1, [r3, #0]
1a001a0a:	3134      	adds	r1, #52	; 0x34
1a001a0c:	f7ff fc5a 	bl	1a0012c4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a10:	4b21      	ldr	r3, [pc, #132]	; (1a001a98 <vTaskSwitchContext+0xc0>)
1a001a12:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001a14:	fab3 f383 	clz	r3, r3
1a001a18:	b2db      	uxtb	r3, r3
1a001a1a:	f1c3 031f 	rsb	r3, r3, #31
1a001a1e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001a22:	008a      	lsls	r2, r1, #2
1a001a24:	491d      	ldr	r1, [pc, #116]	; (1a001a9c <vTaskSwitchContext+0xc4>)
1a001a26:	588a      	ldr	r2, [r1, r2]
1a001a28:	b98a      	cbnz	r2, 1a001a4e <vTaskSwitchContext+0x76>
	__asm volatile
1a001a2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a2e:	f383 8811 	msr	BASEPRI, r3
1a001a32:	f3bf 8f6f 	isb	sy
1a001a36:	f3bf 8f4f 	dsb	sy
1a001a3a:	e7fe      	b.n	1a001a3a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001a3c:	689a      	ldr	r2, [r3, #8]
1a001a3e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a42:	d1df      	bne.n	1a001a04 <vTaskSwitchContext+0x2c>
1a001a44:	68db      	ldr	r3, [r3, #12]
1a001a46:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001a4a:	d1db      	bne.n	1a001a04 <vTaskSwitchContext+0x2c>
1a001a4c:	e7e0      	b.n	1a001a10 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a4e:	4813      	ldr	r0, [pc, #76]	; (1a001a9c <vTaskSwitchContext+0xc4>)
1a001a50:	009a      	lsls	r2, r3, #2
1a001a52:	18d4      	adds	r4, r2, r3
1a001a54:	00a1      	lsls	r1, r4, #2
1a001a56:	4401      	add	r1, r0
1a001a58:	684c      	ldr	r4, [r1, #4]
1a001a5a:	6864      	ldr	r4, [r4, #4]
1a001a5c:	604c      	str	r4, [r1, #4]
1a001a5e:	441a      	add	r2, r3
1a001a60:	0091      	lsls	r1, r2, #2
1a001a62:	3108      	adds	r1, #8
1a001a64:	4408      	add	r0, r1
1a001a66:	4284      	cmp	r4, r0
1a001a68:	d009      	beq.n	1a001a7e <vTaskSwitchContext+0xa6>
1a001a6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a6e:	009a      	lsls	r2, r3, #2
1a001a70:	4b0a      	ldr	r3, [pc, #40]	; (1a001a9c <vTaskSwitchContext+0xc4>)
1a001a72:	4413      	add	r3, r2
1a001a74:	685b      	ldr	r3, [r3, #4]
1a001a76:	68da      	ldr	r2, [r3, #12]
1a001a78:	4b06      	ldr	r3, [pc, #24]	; (1a001a94 <vTaskSwitchContext+0xbc>)
1a001a7a:	601a      	str	r2, [r3, #0]
}
1a001a7c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a7e:	6861      	ldr	r1, [r4, #4]
1a001a80:	4806      	ldr	r0, [pc, #24]	; (1a001a9c <vTaskSwitchContext+0xc4>)
1a001a82:	2214      	movs	r2, #20
1a001a84:	fb02 0203 	mla	r2, r2, r3, r0
1a001a88:	6051      	str	r1, [r2, #4]
1a001a8a:	e7ee      	b.n	1a001a6a <vTaskSwitchContext+0x92>
1a001a8c:	1000292c 	.word	0x1000292c
1a001a90:	100029ac 	.word	0x100029ac
1a001a94:	10002888 	.word	0x10002888
1a001a98:	10002934 	.word	0x10002934
1a001a9c:	10002894 	.word	0x10002894

1a001aa0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001aa0:	b940      	cbnz	r0, 1a001ab4 <vTaskPlaceOnEventList+0x14>
1a001aa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa6:	f383 8811 	msr	BASEPRI, r3
1a001aaa:	f3bf 8f6f 	isb	sy
1a001aae:	f3bf 8f4f 	dsb	sy
1a001ab2:	e7fe      	b.n	1a001ab2 <vTaskPlaceOnEventList+0x12>
{
1a001ab4:	b510      	push	{r4, lr}
1a001ab6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001ab8:	4b04      	ldr	r3, [pc, #16]	; (1a001acc <vTaskPlaceOnEventList+0x2c>)
1a001aba:	6819      	ldr	r1, [r3, #0]
1a001abc:	3118      	adds	r1, #24
1a001abe:	f7ff fb96 	bl	1a0011ee <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001ac2:	2101      	movs	r1, #1
1a001ac4:	4620      	mov	r0, r4
1a001ac6:	f7ff fd4b 	bl	1a001560 <prvAddCurrentTaskToDelayedList>
}
1a001aca:	bd10      	pop	{r4, pc}
1a001acc:	10002888 	.word	0x10002888

1a001ad0 <vTaskPlaceOnEventListRestricted>:
	{
1a001ad0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001ad2:	b940      	cbnz	r0, 1a001ae6 <vTaskPlaceOnEventListRestricted+0x16>
1a001ad4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ad8:	f383 8811 	msr	BASEPRI, r3
1a001adc:	f3bf 8f6f 	isb	sy
1a001ae0:	f3bf 8f4f 	dsb	sy
1a001ae4:	e7fe      	b.n	1a001ae4 <vTaskPlaceOnEventListRestricted+0x14>
1a001ae6:	460c      	mov	r4, r1
1a001ae8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001aea:	4a06      	ldr	r2, [pc, #24]	; (1a001b04 <vTaskPlaceOnEventListRestricted+0x34>)
1a001aec:	6811      	ldr	r1, [r2, #0]
1a001aee:	3118      	adds	r1, #24
1a001af0:	f7ff fb71 	bl	1a0011d6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001af4:	b10d      	cbz	r5, 1a001afa <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001af6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001afa:	4629      	mov	r1, r5
1a001afc:	4620      	mov	r0, r4
1a001afe:	f7ff fd2f 	bl	1a001560 <prvAddCurrentTaskToDelayedList>
	}
1a001b02:	bd38      	pop	{r3, r4, r5, pc}
1a001b04:	10002888 	.word	0x10002888

1a001b08 <xTaskRemoveFromEventList>:
{
1a001b08:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001b0a:	68c3      	ldr	r3, [r0, #12]
1a001b0c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001b0e:	b944      	cbnz	r4, 1a001b22 <xTaskRemoveFromEventList+0x1a>
1a001b10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b14:	f383 8811 	msr	BASEPRI, r3
1a001b18:	f3bf 8f6f 	isb	sy
1a001b1c:	f3bf 8f4f 	dsb	sy
1a001b20:	e7fe      	b.n	1a001b20 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001b22:	f104 0518 	add.w	r5, r4, #24
1a001b26:	4628      	mov	r0, r5
1a001b28:	f7ff fb7b 	bl	1a001222 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b2c:	4b13      	ldr	r3, [pc, #76]	; (1a001b7c <xTaskRemoveFromEventList+0x74>)
1a001b2e:	681b      	ldr	r3, [r3, #0]
1a001b30:	b9e3      	cbnz	r3, 1a001b6c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001b32:	1d25      	adds	r5, r4, #4
1a001b34:	4628      	mov	r0, r5
1a001b36:	f7ff fb74 	bl	1a001222 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001b3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b3c:	2201      	movs	r2, #1
1a001b3e:	409a      	lsls	r2, r3
1a001b40:	490f      	ldr	r1, [pc, #60]	; (1a001b80 <xTaskRemoveFromEventList+0x78>)
1a001b42:	6808      	ldr	r0, [r1, #0]
1a001b44:	4302      	orrs	r2, r0
1a001b46:	600a      	str	r2, [r1, #0]
1a001b48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b4c:	009a      	lsls	r2, r3, #2
1a001b4e:	4629      	mov	r1, r5
1a001b50:	480c      	ldr	r0, [pc, #48]	; (1a001b84 <xTaskRemoveFromEventList+0x7c>)
1a001b52:	4410      	add	r0, r2
1a001b54:	f7ff fb3f 	bl	1a0011d6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001b58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b5a:	4b0b      	ldr	r3, [pc, #44]	; (1a001b88 <xTaskRemoveFromEventList+0x80>)
1a001b5c:	681b      	ldr	r3, [r3, #0]
1a001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b60:	429a      	cmp	r2, r3
1a001b62:	d908      	bls.n	1a001b76 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001b64:	2001      	movs	r0, #1
1a001b66:	4b09      	ldr	r3, [pc, #36]	; (1a001b8c <xTaskRemoveFromEventList+0x84>)
1a001b68:	6018      	str	r0, [r3, #0]
}
1a001b6a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001b6c:	4629      	mov	r1, r5
1a001b6e:	4808      	ldr	r0, [pc, #32]	; (1a001b90 <xTaskRemoveFromEventList+0x88>)
1a001b70:	f7ff fb31 	bl	1a0011d6 <vListInsertEnd>
1a001b74:	e7f0      	b.n	1a001b58 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001b76:	2000      	movs	r0, #0
	return xReturn;
1a001b78:	e7f7      	b.n	1a001b6a <xTaskRemoveFromEventList+0x62>
1a001b7a:	bf00      	nop
1a001b7c:	1000292c 	.word	0x1000292c
1a001b80:	10002934 	.word	0x10002934
1a001b84:	10002894 	.word	0x10002894
1a001b88:	10002888 	.word	0x10002888
1a001b8c:	100029ac 	.word	0x100029ac
1a001b90:	10002968 	.word	0x10002968

1a001b94 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001b94:	4b03      	ldr	r3, [pc, #12]	; (1a001ba4 <vTaskInternalSetTimeOutState+0x10>)
1a001b96:	681b      	ldr	r3, [r3, #0]
1a001b98:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001b9a:	4b03      	ldr	r3, [pc, #12]	; (1a001ba8 <vTaskInternalSetTimeOutState+0x14>)
1a001b9c:	681b      	ldr	r3, [r3, #0]
1a001b9e:	6043      	str	r3, [r0, #4]
}
1a001ba0:	4770      	bx	lr
1a001ba2:	bf00      	nop
1a001ba4:	10002964 	.word	0x10002964
1a001ba8:	100029a8 	.word	0x100029a8

1a001bac <xTaskCheckForTimeOut>:
{
1a001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001bae:	b150      	cbz	r0, 1a001bc6 <xTaskCheckForTimeOut+0x1a>
1a001bb0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001bb2:	b989      	cbnz	r1, 1a001bd8 <xTaskCheckForTimeOut+0x2c>
1a001bb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb8:	f383 8811 	msr	BASEPRI, r3
1a001bbc:	f3bf 8f6f 	isb	sy
1a001bc0:	f3bf 8f4f 	dsb	sy
1a001bc4:	e7fe      	b.n	1a001bc4 <xTaskCheckForTimeOut+0x18>
1a001bc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bca:	f383 8811 	msr	BASEPRI, r3
1a001bce:	f3bf 8f6f 	isb	sy
1a001bd2:	f3bf 8f4f 	dsb	sy
1a001bd6:	e7fe      	b.n	1a001bd6 <xTaskCheckForTimeOut+0x2a>
1a001bd8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001bda:	f000 fbe3 	bl	1a0023a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001bde:	4b11      	ldr	r3, [pc, #68]	; (1a001c24 <xTaskCheckForTimeOut+0x78>)
1a001be0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001be2:	6868      	ldr	r0, [r5, #4]
1a001be4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001be6:	6823      	ldr	r3, [r4, #0]
1a001be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bec:	d016      	beq.n	1a001c1c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001bee:	682f      	ldr	r7, [r5, #0]
1a001bf0:	4e0d      	ldr	r6, [pc, #52]	; (1a001c28 <xTaskCheckForTimeOut+0x7c>)
1a001bf2:	6836      	ldr	r6, [r6, #0]
1a001bf4:	42b7      	cmp	r7, r6
1a001bf6:	d001      	beq.n	1a001bfc <xTaskCheckForTimeOut+0x50>
1a001bf8:	4288      	cmp	r0, r1
1a001bfa:	d911      	bls.n	1a001c20 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001bfc:	4293      	cmp	r3, r2
1a001bfe:	d803      	bhi.n	1a001c08 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001c00:	2300      	movs	r3, #0
1a001c02:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001c04:	2401      	movs	r4, #1
1a001c06:	e005      	b.n	1a001c14 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001c08:	1a9b      	subs	r3, r3, r2
1a001c0a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001c0c:	4628      	mov	r0, r5
1a001c0e:	f7ff ffc1 	bl	1a001b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001c12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001c14:	f000 fbe8 	bl	1a0023e8 <vPortExitCritical>
}
1a001c18:	4620      	mov	r0, r4
1a001c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001c1c:	2400      	movs	r4, #0
1a001c1e:	e7f9      	b.n	1a001c14 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001c20:	2401      	movs	r4, #1
1a001c22:	e7f7      	b.n	1a001c14 <xTaskCheckForTimeOut+0x68>
1a001c24:	100029a8 	.word	0x100029a8
1a001c28:	10002964 	.word	0x10002964

1a001c2c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001c2c:	4b01      	ldr	r3, [pc, #4]	; (1a001c34 <vTaskMissedYield+0x8>)
1a001c2e:	2201      	movs	r2, #1
1a001c30:	601a      	str	r2, [r3, #0]
}
1a001c32:	4770      	bx	lr
1a001c34:	100029ac 	.word	0x100029ac

1a001c38 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001c38:	4b05      	ldr	r3, [pc, #20]	; (1a001c50 <xTaskGetSchedulerState+0x18>)
1a001c3a:	681b      	ldr	r3, [r3, #0]
1a001c3c:	b133      	cbz	r3, 1a001c4c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c3e:	4b05      	ldr	r3, [pc, #20]	; (1a001c54 <xTaskGetSchedulerState+0x1c>)
1a001c40:	681b      	ldr	r3, [r3, #0]
1a001c42:	b10b      	cbz	r3, 1a001c48 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001c44:	2000      	movs	r0, #0
	}
1a001c46:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001c48:	2002      	movs	r0, #2
1a001c4a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001c4c:	2001      	movs	r0, #1
1a001c4e:	4770      	bx	lr
1a001c50:	1000297c 	.word	0x1000297c
1a001c54:	1000292c 	.word	0x1000292c

1a001c58 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001c58:	2800      	cmp	r0, #0
1a001c5a:	d050      	beq.n	1a001cfe <xTaskPriorityInherit+0xa6>
	{
1a001c5c:	b538      	push	{r3, r4, r5, lr}
1a001c5e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001c60:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001c62:	4928      	ldr	r1, [pc, #160]	; (1a001d04 <xTaskPriorityInherit+0xac>)
1a001c64:	6809      	ldr	r1, [r1, #0]
1a001c66:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c68:	428a      	cmp	r2, r1
1a001c6a:	d23e      	bcs.n	1a001cea <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001c6c:	6981      	ldr	r1, [r0, #24]
1a001c6e:	2900      	cmp	r1, #0
1a001c70:	db05      	blt.n	1a001c7e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c72:	4924      	ldr	r1, [pc, #144]	; (1a001d04 <xTaskPriorityInherit+0xac>)
1a001c74:	6809      	ldr	r1, [r1, #0]
1a001c76:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c78:	f1c1 0107 	rsb	r1, r1, #7
1a001c7c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001c7e:	6960      	ldr	r0, [r4, #20]
1a001c80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001c84:	0091      	lsls	r1, r2, #2
1a001c86:	4a20      	ldr	r2, [pc, #128]	; (1a001d08 <xTaskPriorityInherit+0xb0>)
1a001c88:	440a      	add	r2, r1
1a001c8a:	4290      	cmp	r0, r2
1a001c8c:	d005      	beq.n	1a001c9a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001c8e:	4a1d      	ldr	r2, [pc, #116]	; (1a001d04 <xTaskPriorityInherit+0xac>)
1a001c90:	6812      	ldr	r2, [r2, #0]
1a001c92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001c94:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001c96:	2001      	movs	r0, #1
	}
1a001c98:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c9a:	1d25      	adds	r5, r4, #4
1a001c9c:	4628      	mov	r0, r5
1a001c9e:	f7ff fac0 	bl	1a001222 <uxListRemove>
1a001ca2:	b968      	cbnz	r0, 1a001cc0 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001ca4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ca6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001caa:	008a      	lsls	r2, r1, #2
1a001cac:	4916      	ldr	r1, [pc, #88]	; (1a001d08 <xTaskPriorityInherit+0xb0>)
1a001cae:	588a      	ldr	r2, [r1, r2]
1a001cb0:	b932      	cbnz	r2, 1a001cc0 <xTaskPriorityInherit+0x68>
1a001cb2:	2201      	movs	r2, #1
1a001cb4:	409a      	lsls	r2, r3
1a001cb6:	4915      	ldr	r1, [pc, #84]	; (1a001d0c <xTaskPriorityInherit+0xb4>)
1a001cb8:	680b      	ldr	r3, [r1, #0]
1a001cba:	ea23 0302 	bic.w	r3, r3, r2
1a001cbe:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001cc0:	4b10      	ldr	r3, [pc, #64]	; (1a001d04 <xTaskPriorityInherit+0xac>)
1a001cc2:	681b      	ldr	r3, [r3, #0]
1a001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001cc8:	2401      	movs	r4, #1
1a001cca:	fa04 f203 	lsl.w	r2, r4, r3
1a001cce:	490f      	ldr	r1, [pc, #60]	; (1a001d0c <xTaskPriorityInherit+0xb4>)
1a001cd0:	6808      	ldr	r0, [r1, #0]
1a001cd2:	4302      	orrs	r2, r0
1a001cd4:	600a      	str	r2, [r1, #0]
1a001cd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cda:	009a      	lsls	r2, r3, #2
1a001cdc:	4629      	mov	r1, r5
1a001cde:	480a      	ldr	r0, [pc, #40]	; (1a001d08 <xTaskPriorityInherit+0xb0>)
1a001ce0:	4410      	add	r0, r2
1a001ce2:	f7ff fa78 	bl	1a0011d6 <vListInsertEnd>
				xReturn = pdTRUE;
1a001ce6:	4620      	mov	r0, r4
1a001ce8:	e7d6      	b.n	1a001c98 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001cea:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001cec:	4b05      	ldr	r3, [pc, #20]	; (1a001d04 <xTaskPriorityInherit+0xac>)
1a001cee:	681b      	ldr	r3, [r3, #0]
1a001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cf2:	429a      	cmp	r2, r3
1a001cf4:	d201      	bcs.n	1a001cfa <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a001cf6:	2001      	movs	r0, #1
		return xReturn;
1a001cf8:	e7ce      	b.n	1a001c98 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a001cfa:	2000      	movs	r0, #0
1a001cfc:	e7cc      	b.n	1a001c98 <xTaskPriorityInherit+0x40>
1a001cfe:	2000      	movs	r0, #0
	}
1a001d00:	4770      	bx	lr
1a001d02:	bf00      	nop
1a001d04:	10002888 	.word	0x10002888
1a001d08:	10002894 	.word	0x10002894
1a001d0c:	10002934 	.word	0x10002934

1a001d10 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001d10:	2800      	cmp	r0, #0
1a001d12:	d049      	beq.n	1a001da8 <xTaskPriorityDisinherit+0x98>
	{
1a001d14:	b538      	push	{r3, r4, r5, lr}
1a001d16:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001d18:	4a26      	ldr	r2, [pc, #152]	; (1a001db4 <xTaskPriorityDisinherit+0xa4>)
1a001d1a:	6812      	ldr	r2, [r2, #0]
1a001d1c:	4282      	cmp	r2, r0
1a001d1e:	d008      	beq.n	1a001d32 <xTaskPriorityDisinherit+0x22>
1a001d20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d24:	f383 8811 	msr	BASEPRI, r3
1a001d28:	f3bf 8f6f 	isb	sy
1a001d2c:	f3bf 8f4f 	dsb	sy
1a001d30:	e7fe      	b.n	1a001d30 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001d32:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001d34:	b942      	cbnz	r2, 1a001d48 <xTaskPriorityDisinherit+0x38>
1a001d36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d3a:	f383 8811 	msr	BASEPRI, r3
1a001d3e:	f3bf 8f6f 	isb	sy
1a001d42:	f3bf 8f4f 	dsb	sy
1a001d46:	e7fe      	b.n	1a001d46 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001d48:	3a01      	subs	r2, #1
1a001d4a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001d4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001d4e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001d50:	4288      	cmp	r0, r1
1a001d52:	d02b      	beq.n	1a001dac <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001d54:	bb62      	cbnz	r2, 1a001db0 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001d56:	1d25      	adds	r5, r4, #4
1a001d58:	4628      	mov	r0, r5
1a001d5a:	f7ff fa62 	bl	1a001222 <uxListRemove>
1a001d5e:	b970      	cbnz	r0, 1a001d7e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001d60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d62:	2314      	movs	r3, #20
1a001d64:	fb03 f302 	mul.w	r3, r3, r2
1a001d68:	4913      	ldr	r1, [pc, #76]	; (1a001db8 <xTaskPriorityDisinherit+0xa8>)
1a001d6a:	58cb      	ldr	r3, [r1, r3]
1a001d6c:	b93b      	cbnz	r3, 1a001d7e <xTaskPriorityDisinherit+0x6e>
1a001d6e:	2301      	movs	r3, #1
1a001d70:	fa03 f202 	lsl.w	r2, r3, r2
1a001d74:	4911      	ldr	r1, [pc, #68]	; (1a001dbc <xTaskPriorityDisinherit+0xac>)
1a001d76:	680b      	ldr	r3, [r1, #0]
1a001d78:	ea23 0302 	bic.w	r3, r3, r2
1a001d7c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001d7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001d80:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d82:	f1c3 0207 	rsb	r2, r3, #7
1a001d86:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001d88:	2401      	movs	r4, #1
1a001d8a:	fa04 f203 	lsl.w	r2, r4, r3
1a001d8e:	490b      	ldr	r1, [pc, #44]	; (1a001dbc <xTaskPriorityDisinherit+0xac>)
1a001d90:	6808      	ldr	r0, [r1, #0]
1a001d92:	4302      	orrs	r2, r0
1a001d94:	600a      	str	r2, [r1, #0]
1a001d96:	4629      	mov	r1, r5
1a001d98:	4a07      	ldr	r2, [pc, #28]	; (1a001db8 <xTaskPriorityDisinherit+0xa8>)
1a001d9a:	2014      	movs	r0, #20
1a001d9c:	fb00 2003 	mla	r0, r0, r3, r2
1a001da0:	f7ff fa19 	bl	1a0011d6 <vListInsertEnd>
					xReturn = pdTRUE;
1a001da4:	4620      	mov	r0, r4
	}
1a001da6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001da8:	2000      	movs	r0, #0
	}
1a001daa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001dac:	2000      	movs	r0, #0
1a001dae:	e7fa      	b.n	1a001da6 <xTaskPriorityDisinherit+0x96>
1a001db0:	2000      	movs	r0, #0
		return xReturn;
1a001db2:	e7f8      	b.n	1a001da6 <xTaskPriorityDisinherit+0x96>
1a001db4:	10002888 	.word	0x10002888
1a001db8:	10002894 	.word	0x10002894
1a001dbc:	10002934 	.word	0x10002934

1a001dc0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001dc0:	2800      	cmp	r0, #0
1a001dc2:	d055      	beq.n	1a001e70 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a001dc4:	b538      	push	{r3, r4, r5, lr}
1a001dc6:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001dc8:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001dca:	b940      	cbnz	r0, 1a001dde <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001dcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dd0:	f383 8811 	msr	BASEPRI, r3
1a001dd4:	f3bf 8f6f 	isb	sy
1a001dd8:	f3bf 8f4f 	dsb	sy
1a001ddc:	e7fe      	b.n	1a001ddc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001de0:	428a      	cmp	r2, r1
1a001de2:	d200      	bcs.n	1a001de6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001de4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001de6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001de8:	4291      	cmp	r1, r2
1a001dea:	d001      	beq.n	1a001df0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001dec:	2801      	cmp	r0, #1
1a001dee:	d000      	beq.n	1a001df2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001df0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001df2:	4820      	ldr	r0, [pc, #128]	; (1a001e74 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001df4:	6800      	ldr	r0, [r0, #0]
1a001df6:	4298      	cmp	r0, r3
1a001df8:	d108      	bne.n	1a001e0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001dfa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dfe:	f383 8811 	msr	BASEPRI, r3
1a001e02:	f3bf 8f6f 	isb	sy
1a001e06:	f3bf 8f4f 	dsb	sy
1a001e0a:	e7fe      	b.n	1a001e0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001e0e:	6998      	ldr	r0, [r3, #24]
1a001e10:	2800      	cmp	r0, #0
1a001e12:	db02      	blt.n	1a001e1a <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e14:	f1c2 0207 	rsb	r2, r2, #7
1a001e18:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001e1a:	695a      	ldr	r2, [r3, #20]
1a001e1c:	4816      	ldr	r0, [pc, #88]	; (1a001e78 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e1e:	2414      	movs	r4, #20
1a001e20:	fb04 0101 	mla	r1, r4, r1, r0
1a001e24:	428a      	cmp	r2, r1
1a001e26:	d1e3      	bne.n	1a001df0 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001e28:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001e2a:	1d1d      	adds	r5, r3, #4
1a001e2c:	4628      	mov	r0, r5
1a001e2e:	f7ff f9f8 	bl	1a001222 <uxListRemove>
1a001e32:	b970      	cbnz	r0, 1a001e52 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001e34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e36:	2314      	movs	r3, #20
1a001e38:	fb03 f302 	mul.w	r3, r3, r2
1a001e3c:	490e      	ldr	r1, [pc, #56]	; (1a001e78 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e3e:	58cb      	ldr	r3, [r1, r3]
1a001e40:	b93b      	cbnz	r3, 1a001e52 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001e42:	2301      	movs	r3, #1
1a001e44:	fa03 f202 	lsl.w	r2, r3, r2
1a001e48:	490c      	ldr	r1, [pc, #48]	; (1a001e7c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001e4a:	680b      	ldr	r3, [r1, #0]
1a001e4c:	ea23 0302 	bic.w	r3, r3, r2
1a001e50:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001e52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e54:	2301      	movs	r3, #1
1a001e56:	4093      	lsls	r3, r2
1a001e58:	4908      	ldr	r1, [pc, #32]	; (1a001e7c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001e5a:	6808      	ldr	r0, [r1, #0]
1a001e5c:	4303      	orrs	r3, r0
1a001e5e:	600b      	str	r3, [r1, #0]
1a001e60:	4629      	mov	r1, r5
1a001e62:	4b05      	ldr	r3, [pc, #20]	; (1a001e78 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001e64:	2014      	movs	r0, #20
1a001e66:	fb00 3002 	mla	r0, r0, r2, r3
1a001e6a:	f7ff f9b4 	bl	1a0011d6 <vListInsertEnd>
	}
1a001e6e:	e7bf      	b.n	1a001df0 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001e70:	4770      	bx	lr
1a001e72:	bf00      	nop
1a001e74:	10002888 	.word	0x10002888
1a001e78:	10002894 	.word	0x10002894
1a001e7c:	10002934 	.word	0x10002934

1a001e80 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001e80:	4b05      	ldr	r3, [pc, #20]	; (1a001e98 <pvTaskIncrementMutexHeldCount+0x18>)
1a001e82:	681b      	ldr	r3, [r3, #0]
1a001e84:	b123      	cbz	r3, 1a001e90 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001e86:	4b04      	ldr	r3, [pc, #16]	; (1a001e98 <pvTaskIncrementMutexHeldCount+0x18>)
1a001e88:	681a      	ldr	r2, [r3, #0]
1a001e8a:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001e8c:	3301      	adds	r3, #1
1a001e8e:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001e90:	4b01      	ldr	r3, [pc, #4]	; (1a001e98 <pvTaskIncrementMutexHeldCount+0x18>)
1a001e92:	6818      	ldr	r0, [r3, #0]
	}
1a001e94:	4770      	bx	lr
1a001e96:	bf00      	nop
1a001e98:	10002888 	.word	0x10002888

1a001e9c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001e9c:	4b06      	ldr	r3, [pc, #24]	; (1a001eb8 <prvGetNextExpireTime+0x1c>)
1a001e9e:	681a      	ldr	r2, [r3, #0]
1a001ea0:	6813      	ldr	r3, [r2, #0]
1a001ea2:	fab3 f383 	clz	r3, r3
1a001ea6:	095b      	lsrs	r3, r3, #5
1a001ea8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001eaa:	b913      	cbnz	r3, 1a001eb2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001eac:	68d3      	ldr	r3, [r2, #12]
1a001eae:	6818      	ldr	r0, [r3, #0]
1a001eb0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001eb2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001eb4:	4770      	bx	lr
1a001eb6:	bf00      	nop
1a001eb8:	100029b0 	.word	0x100029b0

1a001ebc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001ebc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001ebe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001ec0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001ec2:	4291      	cmp	r1, r2
1a001ec4:	d80c      	bhi.n	1a001ee0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ec6:	1ad2      	subs	r2, r2, r3
1a001ec8:	6983      	ldr	r3, [r0, #24]
1a001eca:	429a      	cmp	r2, r3
1a001ecc:	d301      	bcc.n	1a001ed2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001ece:	2001      	movs	r0, #1
1a001ed0:	e010      	b.n	1a001ef4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001ed2:	1d01      	adds	r1, r0, #4
1a001ed4:	4b09      	ldr	r3, [pc, #36]	; (1a001efc <prvInsertTimerInActiveList+0x40>)
1a001ed6:	6818      	ldr	r0, [r3, #0]
1a001ed8:	f7ff f989 	bl	1a0011ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001edc:	2000      	movs	r0, #0
1a001ede:	e009      	b.n	1a001ef4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001ee0:	429a      	cmp	r2, r3
1a001ee2:	d201      	bcs.n	1a001ee8 <prvInsertTimerInActiveList+0x2c>
1a001ee4:	4299      	cmp	r1, r3
1a001ee6:	d206      	bcs.n	1a001ef6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001ee8:	1d01      	adds	r1, r0, #4
1a001eea:	4b05      	ldr	r3, [pc, #20]	; (1a001f00 <prvInsertTimerInActiveList+0x44>)
1a001eec:	6818      	ldr	r0, [r3, #0]
1a001eee:	f7ff f97e 	bl	1a0011ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001ef2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001ef4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001ef6:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001ef8:	e7fc      	b.n	1a001ef4 <prvInsertTimerInActiveList+0x38>
1a001efa:	bf00      	nop
1a001efc:	100029b4 	.word	0x100029b4
1a001f00:	100029b0 	.word	0x100029b0

1a001f04 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001f04:	b530      	push	{r4, r5, lr}
1a001f06:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001f08:	f000 fa4c 	bl	1a0023a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001f0c:	4b11      	ldr	r3, [pc, #68]	; (1a001f54 <prvCheckForValidListAndQueue+0x50>)
1a001f0e:	681b      	ldr	r3, [r3, #0]
1a001f10:	b11b      	cbz	r3, 1a001f1a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001f12:	f000 fa69 	bl	1a0023e8 <vPortExitCritical>
}
1a001f16:	b003      	add	sp, #12
1a001f18:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001f1a:	4d0f      	ldr	r5, [pc, #60]	; (1a001f58 <prvCheckForValidListAndQueue+0x54>)
1a001f1c:	4628      	mov	r0, r5
1a001f1e:	f7ff f94c 	bl	1a0011ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001f22:	4c0e      	ldr	r4, [pc, #56]	; (1a001f5c <prvCheckForValidListAndQueue+0x58>)
1a001f24:	4620      	mov	r0, r4
1a001f26:	f7ff f948 	bl	1a0011ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001f2a:	4b0d      	ldr	r3, [pc, #52]	; (1a001f60 <prvCheckForValidListAndQueue+0x5c>)
1a001f2c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001f2e:	4b0d      	ldr	r3, [pc, #52]	; (1a001f64 <prvCheckForValidListAndQueue+0x60>)
1a001f30:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001f32:	2300      	movs	r3, #0
1a001f34:	9300      	str	r3, [sp, #0]
1a001f36:	4b0c      	ldr	r3, [pc, #48]	; (1a001f68 <prvCheckForValidListAndQueue+0x64>)
1a001f38:	4a0c      	ldr	r2, [pc, #48]	; (1a001f6c <prvCheckForValidListAndQueue+0x68>)
1a001f3a:	2110      	movs	r1, #16
1a001f3c:	200a      	movs	r0, #10
1a001f3e:	f7fe fdf2 	bl	1a000b26 <xQueueGenericCreateStatic>
1a001f42:	4b04      	ldr	r3, [pc, #16]	; (1a001f54 <prvCheckForValidListAndQueue+0x50>)
1a001f44:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001f46:	2800      	cmp	r0, #0
1a001f48:	d0e3      	beq.n	1a001f12 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001f4a:	4909      	ldr	r1, [pc, #36]	; (1a001f70 <prvCheckForValidListAndQueue+0x6c>)
1a001f4c:	f7ff f8f8 	bl	1a001140 <vQueueAddToRegistry>
1a001f50:	e7df      	b.n	1a001f12 <prvCheckForValidListAndQueue+0xe>
1a001f52:	bf00      	nop
1a001f54:	10002ad4 	.word	0x10002ad4
1a001f58:	10002a58 	.word	0x10002a58
1a001f5c:	10002a6c 	.word	0x10002a6c
1a001f60:	100029b0 	.word	0x100029b0
1a001f64:	100029b4 	.word	0x100029b4
1a001f68:	10002a84 	.word	0x10002a84
1a001f6c:	100029b8 	.word	0x100029b8
1a001f70:	1a0049c4 	.word	0x1a0049c4

1a001f74 <xTimerCreateTimerTask>:
{
1a001f74:	b510      	push	{r4, lr}
1a001f76:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001f78:	f7ff ffc4 	bl	1a001f04 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001f7c:	4b12      	ldr	r3, [pc, #72]	; (1a001fc8 <xTimerCreateTimerTask+0x54>)
1a001f7e:	681b      	ldr	r3, [r3, #0]
1a001f80:	b1cb      	cbz	r3, 1a001fb6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001f82:	2400      	movs	r4, #0
1a001f84:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001f86:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001f88:	aa07      	add	r2, sp, #28
1a001f8a:	a906      	add	r1, sp, #24
1a001f8c:	a805      	add	r0, sp, #20
1a001f8e:	f7ff f969 	bl	1a001264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001f92:	9b05      	ldr	r3, [sp, #20]
1a001f94:	9302      	str	r3, [sp, #8]
1a001f96:	9b06      	ldr	r3, [sp, #24]
1a001f98:	9301      	str	r3, [sp, #4]
1a001f9a:	2304      	movs	r3, #4
1a001f9c:	9300      	str	r3, [sp, #0]
1a001f9e:	4623      	mov	r3, r4
1a001fa0:	9a07      	ldr	r2, [sp, #28]
1a001fa2:	490a      	ldr	r1, [pc, #40]	; (1a001fcc <xTimerCreateTimerTask+0x58>)
1a001fa4:	480a      	ldr	r0, [pc, #40]	; (1a001fd0 <xTimerCreateTimerTask+0x5c>)
1a001fa6:	f7ff fb27 	bl	1a0015f8 <xTaskCreateStatic>
1a001faa:	4b0a      	ldr	r3, [pc, #40]	; (1a001fd4 <xTimerCreateTimerTask+0x60>)
1a001fac:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001fae:	b110      	cbz	r0, 1a001fb6 <xTimerCreateTimerTask+0x42>
}
1a001fb0:	2001      	movs	r0, #1
1a001fb2:	b008      	add	sp, #32
1a001fb4:	bd10      	pop	{r4, pc}
1a001fb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fba:	f383 8811 	msr	BASEPRI, r3
1a001fbe:	f3bf 8f6f 	isb	sy
1a001fc2:	f3bf 8f4f 	dsb	sy
1a001fc6:	e7fe      	b.n	1a001fc6 <xTimerCreateTimerTask+0x52>
1a001fc8:	10002ad4 	.word	0x10002ad4
1a001fcc:	1a0049cc 	.word	0x1a0049cc
1a001fd0:	1a0022b9 	.word	0x1a0022b9
1a001fd4:	10002ad8 	.word	0x10002ad8

1a001fd8 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001fd8:	b1c8      	cbz	r0, 1a00200e <xTimerGenericCommand+0x36>
{
1a001fda:	b530      	push	{r4, r5, lr}
1a001fdc:	b085      	sub	sp, #20
1a001fde:	4615      	mov	r5, r2
1a001fe0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001fe2:	4a17      	ldr	r2, [pc, #92]	; (1a002040 <xTimerGenericCommand+0x68>)
1a001fe4:	6810      	ldr	r0, [r2, #0]
1a001fe6:	b340      	cbz	r0, 1a00203a <xTimerGenericCommand+0x62>
1a001fe8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001fea:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001fec:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001fee:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001ff0:	2905      	cmp	r1, #5
1a001ff2:	dc1d      	bgt.n	1a002030 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001ff4:	f7ff fe20 	bl	1a001c38 <xTaskGetSchedulerState>
1a001ff8:	2802      	cmp	r0, #2
1a001ffa:	d011      	beq.n	1a002020 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001ffc:	2300      	movs	r3, #0
1a001ffe:	461a      	mov	r2, r3
1a002000:	4669      	mov	r1, sp
1a002002:	480f      	ldr	r0, [pc, #60]	; (1a002040 <xTimerGenericCommand+0x68>)
1a002004:	6800      	ldr	r0, [r0, #0]
1a002006:	f7fe fdfd 	bl	1a000c04 <xQueueGenericSend>
}
1a00200a:	b005      	add	sp, #20
1a00200c:	bd30      	pop	{r4, r5, pc}
1a00200e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002012:	f383 8811 	msr	BASEPRI, r3
1a002016:	f3bf 8f6f 	isb	sy
1a00201a:	f3bf 8f4f 	dsb	sy
1a00201e:	e7fe      	b.n	1a00201e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002020:	2300      	movs	r3, #0
1a002022:	9a08      	ldr	r2, [sp, #32]
1a002024:	4669      	mov	r1, sp
1a002026:	4806      	ldr	r0, [pc, #24]	; (1a002040 <xTimerGenericCommand+0x68>)
1a002028:	6800      	ldr	r0, [r0, #0]
1a00202a:	f7fe fdeb 	bl	1a000c04 <xQueueGenericSend>
1a00202e:	e7ec      	b.n	1a00200a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002030:	2300      	movs	r3, #0
1a002032:	4669      	mov	r1, sp
1a002034:	f7fe fea4 	bl	1a000d80 <xQueueGenericSendFromISR>
1a002038:	e7e7      	b.n	1a00200a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a00203a:	2000      	movs	r0, #0
	return xReturn;
1a00203c:	e7e5      	b.n	1a00200a <xTimerGenericCommand+0x32>
1a00203e:	bf00      	nop
1a002040:	10002ad4 	.word	0x10002ad4

1a002044 <prvSwitchTimerLists>:
{
1a002044:	b570      	push	{r4, r5, r6, lr}
1a002046:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002048:	4b1a      	ldr	r3, [pc, #104]	; (1a0020b4 <prvSwitchTimerLists+0x70>)
1a00204a:	681b      	ldr	r3, [r3, #0]
1a00204c:	681a      	ldr	r2, [r3, #0]
1a00204e:	b352      	cbz	r2, 1a0020a6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002050:	68db      	ldr	r3, [r3, #12]
1a002052:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002054:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002056:	1d25      	adds	r5, r4, #4
1a002058:	4628      	mov	r0, r5
1a00205a:	f7ff f8e2 	bl	1a001222 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00205e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002060:	4620      	mov	r0, r4
1a002062:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002064:	69e3      	ldr	r3, [r4, #28]
1a002066:	2b01      	cmp	r3, #1
1a002068:	d1ee      	bne.n	1a002048 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00206a:	69a3      	ldr	r3, [r4, #24]
1a00206c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00206e:	429e      	cmp	r6, r3
1a002070:	d207      	bcs.n	1a002082 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002072:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002074:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002076:	4629      	mov	r1, r5
1a002078:	4b0e      	ldr	r3, [pc, #56]	; (1a0020b4 <prvSwitchTimerLists+0x70>)
1a00207a:	6818      	ldr	r0, [r3, #0]
1a00207c:	f7ff f8b7 	bl	1a0011ee <vListInsert>
1a002080:	e7e2      	b.n	1a002048 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002082:	2100      	movs	r1, #0
1a002084:	9100      	str	r1, [sp, #0]
1a002086:	460b      	mov	r3, r1
1a002088:	4632      	mov	r2, r6
1a00208a:	4620      	mov	r0, r4
1a00208c:	f7ff ffa4 	bl	1a001fd8 <xTimerGenericCommand>
				configASSERT( xResult );
1a002090:	2800      	cmp	r0, #0
1a002092:	d1d9      	bne.n	1a002048 <prvSwitchTimerLists+0x4>
1a002094:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002098:	f383 8811 	msr	BASEPRI, r3
1a00209c:	f3bf 8f6f 	isb	sy
1a0020a0:	f3bf 8f4f 	dsb	sy
1a0020a4:	e7fe      	b.n	1a0020a4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0020a6:	4a04      	ldr	r2, [pc, #16]	; (1a0020b8 <prvSwitchTimerLists+0x74>)
1a0020a8:	6810      	ldr	r0, [r2, #0]
1a0020aa:	4902      	ldr	r1, [pc, #8]	; (1a0020b4 <prvSwitchTimerLists+0x70>)
1a0020ac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0020ae:	6013      	str	r3, [r2, #0]
}
1a0020b0:	b002      	add	sp, #8
1a0020b2:	bd70      	pop	{r4, r5, r6, pc}
1a0020b4:	100029b0 	.word	0x100029b0
1a0020b8:	100029b4 	.word	0x100029b4

1a0020bc <prvSampleTimeNow>:
{
1a0020bc:	b538      	push	{r3, r4, r5, lr}
1a0020be:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0020c0:	f7ff fb58 	bl	1a001774 <xTaskGetTickCount>
1a0020c4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0020c6:	4b07      	ldr	r3, [pc, #28]	; (1a0020e4 <prvSampleTimeNow+0x28>)
1a0020c8:	681b      	ldr	r3, [r3, #0]
1a0020ca:	4283      	cmp	r3, r0
1a0020cc:	d805      	bhi.n	1a0020da <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0020ce:	2300      	movs	r3, #0
1a0020d0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0020d2:	4b04      	ldr	r3, [pc, #16]	; (1a0020e4 <prvSampleTimeNow+0x28>)
1a0020d4:	601c      	str	r4, [r3, #0]
}
1a0020d6:	4620      	mov	r0, r4
1a0020d8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0020da:	f7ff ffb3 	bl	1a002044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0020de:	2301      	movs	r3, #1
1a0020e0:	602b      	str	r3, [r5, #0]
1a0020e2:	e7f6      	b.n	1a0020d2 <prvSampleTimeNow+0x16>
1a0020e4:	10002a80 	.word	0x10002a80

1a0020e8 <prvProcessExpiredTimer>:
{
1a0020e8:	b570      	push	{r4, r5, r6, lr}
1a0020ea:	b082      	sub	sp, #8
1a0020ec:	4605      	mov	r5, r0
1a0020ee:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0020f0:	4b14      	ldr	r3, [pc, #80]	; (1a002144 <prvProcessExpiredTimer+0x5c>)
1a0020f2:	681b      	ldr	r3, [r3, #0]
1a0020f4:	68db      	ldr	r3, [r3, #12]
1a0020f6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0020f8:	1d20      	adds	r0, r4, #4
1a0020fa:	f7ff f892 	bl	1a001222 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020fe:	69e3      	ldr	r3, [r4, #28]
1a002100:	2b01      	cmp	r3, #1
1a002102:	d004      	beq.n	1a00210e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002104:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002106:	4620      	mov	r0, r4
1a002108:	4798      	blx	r3
}
1a00210a:	b002      	add	sp, #8
1a00210c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00210e:	69a1      	ldr	r1, [r4, #24]
1a002110:	462b      	mov	r3, r5
1a002112:	4632      	mov	r2, r6
1a002114:	4429      	add	r1, r5
1a002116:	4620      	mov	r0, r4
1a002118:	f7ff fed0 	bl	1a001ebc <prvInsertTimerInActiveList>
1a00211c:	2800      	cmp	r0, #0
1a00211e:	d0f1      	beq.n	1a002104 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002120:	2100      	movs	r1, #0
1a002122:	9100      	str	r1, [sp, #0]
1a002124:	460b      	mov	r3, r1
1a002126:	462a      	mov	r2, r5
1a002128:	4620      	mov	r0, r4
1a00212a:	f7ff ff55 	bl	1a001fd8 <xTimerGenericCommand>
			configASSERT( xResult );
1a00212e:	2800      	cmp	r0, #0
1a002130:	d1e8      	bne.n	1a002104 <prvProcessExpiredTimer+0x1c>
1a002132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002136:	f383 8811 	msr	BASEPRI, r3
1a00213a:	f3bf 8f6f 	isb	sy
1a00213e:	f3bf 8f4f 	dsb	sy
1a002142:	e7fe      	b.n	1a002142 <prvProcessExpiredTimer+0x5a>
1a002144:	100029b0 	.word	0x100029b0

1a002148 <prvProcessTimerOrBlockTask>:
{
1a002148:	b570      	push	{r4, r5, r6, lr}
1a00214a:	b082      	sub	sp, #8
1a00214c:	4606      	mov	r6, r0
1a00214e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002150:	f7ff fb08 	bl	1a001764 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002154:	a801      	add	r0, sp, #4
1a002156:	f7ff ffb1 	bl	1a0020bc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00215a:	9b01      	ldr	r3, [sp, #4]
1a00215c:	bb1b      	cbnz	r3, 1a0021a6 <prvProcessTimerOrBlockTask+0x5e>
1a00215e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002160:	b90c      	cbnz	r4, 1a002166 <prvProcessTimerOrBlockTask+0x1e>
1a002162:	42b0      	cmp	r0, r6
1a002164:	d218      	bcs.n	1a002198 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002166:	b12c      	cbz	r4, 1a002174 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002168:	4b11      	ldr	r3, [pc, #68]	; (1a0021b0 <prvProcessTimerOrBlockTask+0x68>)
1a00216a:	681b      	ldr	r3, [r3, #0]
1a00216c:	681c      	ldr	r4, [r3, #0]
1a00216e:	fab4 f484 	clz	r4, r4
1a002172:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002174:	4622      	mov	r2, r4
1a002176:	1b71      	subs	r1, r6, r5
1a002178:	4b0e      	ldr	r3, [pc, #56]	; (1a0021b4 <prvProcessTimerOrBlockTask+0x6c>)
1a00217a:	6818      	ldr	r0, [r3, #0]
1a00217c:	f7fe fff4 	bl	1a001168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002180:	f7ff fb8a 	bl	1a001898 <xTaskResumeAll>
1a002184:	b988      	cbnz	r0, 1a0021aa <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002186:	4b0c      	ldr	r3, [pc, #48]	; (1a0021b8 <prvProcessTimerOrBlockTask+0x70>)
1a002188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00218c:	601a      	str	r2, [r3, #0]
1a00218e:	f3bf 8f4f 	dsb	sy
1a002192:	f3bf 8f6f 	isb	sy
1a002196:	e008      	b.n	1a0021aa <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002198:	f7ff fb7e 	bl	1a001898 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00219c:	4629      	mov	r1, r5
1a00219e:	4630      	mov	r0, r6
1a0021a0:	f7ff ffa2 	bl	1a0020e8 <prvProcessExpiredTimer>
1a0021a4:	e001      	b.n	1a0021aa <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0021a6:	f7ff fb77 	bl	1a001898 <xTaskResumeAll>
}
1a0021aa:	b002      	add	sp, #8
1a0021ac:	bd70      	pop	{r4, r5, r6, pc}
1a0021ae:	bf00      	nop
1a0021b0:	100029b4 	.word	0x100029b4
1a0021b4:	10002ad4 	.word	0x10002ad4
1a0021b8:	e000ed04 	.word	0xe000ed04

1a0021bc <prvProcessReceivedCommands>:
{
1a0021bc:	b530      	push	{r4, r5, lr}
1a0021be:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0021c0:	e002      	b.n	1a0021c8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0021c2:	9b04      	ldr	r3, [sp, #16]
1a0021c4:	2b00      	cmp	r3, #0
1a0021c6:	da0f      	bge.n	1a0021e8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0021c8:	2200      	movs	r2, #0
1a0021ca:	a904      	add	r1, sp, #16
1a0021cc:	4b39      	ldr	r3, [pc, #228]	; (1a0022b4 <prvProcessReceivedCommands+0xf8>)
1a0021ce:	6818      	ldr	r0, [r3, #0]
1a0021d0:	f7fe fe3c 	bl	1a000e4c <xQueueReceive>
1a0021d4:	2800      	cmp	r0, #0
1a0021d6:	d06a      	beq.n	1a0022ae <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0021d8:	9b04      	ldr	r3, [sp, #16]
1a0021da:	2b00      	cmp	r3, #0
1a0021dc:	daf1      	bge.n	1a0021c2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0021de:	9907      	ldr	r1, [sp, #28]
1a0021e0:	9806      	ldr	r0, [sp, #24]
1a0021e2:	9b05      	ldr	r3, [sp, #20]
1a0021e4:	4798      	blx	r3
1a0021e6:	e7ec      	b.n	1a0021c2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0021e8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0021ea:	6963      	ldr	r3, [r4, #20]
1a0021ec:	b113      	cbz	r3, 1a0021f4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0021ee:	1d20      	adds	r0, r4, #4
1a0021f0:	f7ff f817 	bl	1a001222 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0021f4:	a803      	add	r0, sp, #12
1a0021f6:	f7ff ff61 	bl	1a0020bc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0021fa:	9b04      	ldr	r3, [sp, #16]
1a0021fc:	2b09      	cmp	r3, #9
1a0021fe:	d8e3      	bhi.n	1a0021c8 <prvProcessReceivedCommands+0xc>
1a002200:	a201      	add	r2, pc, #4	; (adr r2, 1a002208 <prvProcessReceivedCommands+0x4c>)
1a002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002206:	bf00      	nop
1a002208:	1a002231 	.word	0x1a002231
1a00220c:	1a002231 	.word	0x1a002231
1a002210:	1a002231 	.word	0x1a002231
1a002214:	1a0021c9 	.word	0x1a0021c9
1a002218:	1a002279 	.word	0x1a002279
1a00221c:	1a00229f 	.word	0x1a00229f
1a002220:	1a002231 	.word	0x1a002231
1a002224:	1a002231 	.word	0x1a002231
1a002228:	1a0021c9 	.word	0x1a0021c9
1a00222c:	1a002279 	.word	0x1a002279
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002230:	9905      	ldr	r1, [sp, #20]
1a002232:	69a5      	ldr	r5, [r4, #24]
1a002234:	460b      	mov	r3, r1
1a002236:	4602      	mov	r2, r0
1a002238:	4429      	add	r1, r5
1a00223a:	4620      	mov	r0, r4
1a00223c:	f7ff fe3e 	bl	1a001ebc <prvInsertTimerInActiveList>
1a002240:	2800      	cmp	r0, #0
1a002242:	d0c1      	beq.n	1a0021c8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002244:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002246:	4620      	mov	r0, r4
1a002248:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00224a:	69e3      	ldr	r3, [r4, #28]
1a00224c:	2b01      	cmp	r3, #1
1a00224e:	d1bb      	bne.n	1a0021c8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002250:	69a2      	ldr	r2, [r4, #24]
1a002252:	2100      	movs	r1, #0
1a002254:	9100      	str	r1, [sp, #0]
1a002256:	460b      	mov	r3, r1
1a002258:	9805      	ldr	r0, [sp, #20]
1a00225a:	4402      	add	r2, r0
1a00225c:	4620      	mov	r0, r4
1a00225e:	f7ff febb 	bl	1a001fd8 <xTimerGenericCommand>
							configASSERT( xResult );
1a002262:	2800      	cmp	r0, #0
1a002264:	d1b0      	bne.n	1a0021c8 <prvProcessReceivedCommands+0xc>
1a002266:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00226a:	f383 8811 	msr	BASEPRI, r3
1a00226e:	f3bf 8f6f 	isb	sy
1a002272:	f3bf 8f4f 	dsb	sy
1a002276:	e7fe      	b.n	1a002276 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002278:	9905      	ldr	r1, [sp, #20]
1a00227a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00227c:	b131      	cbz	r1, 1a00228c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00227e:	4603      	mov	r3, r0
1a002280:	4602      	mov	r2, r0
1a002282:	4401      	add	r1, r0
1a002284:	4620      	mov	r0, r4
1a002286:	f7ff fe19 	bl	1a001ebc <prvInsertTimerInActiveList>
					break;
1a00228a:	e79d      	b.n	1a0021c8 <prvProcessReceivedCommands+0xc>
1a00228c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002290:	f383 8811 	msr	BASEPRI, r3
1a002294:	f3bf 8f6f 	isb	sy
1a002298:	f3bf 8f4f 	dsb	sy
1a00229c:	e7fe      	b.n	1a00229c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00229e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0022a2:	2b00      	cmp	r3, #0
1a0022a4:	d190      	bne.n	1a0021c8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0022a6:	4620      	mov	r0, r4
1a0022a8:	f7fe fb08 	bl	1a0008bc <vPortFree>
1a0022ac:	e78c      	b.n	1a0021c8 <prvProcessReceivedCommands+0xc>
}
1a0022ae:	b009      	add	sp, #36	; 0x24
1a0022b0:	bd30      	pop	{r4, r5, pc}
1a0022b2:	bf00      	nop
1a0022b4:	10002ad4 	.word	0x10002ad4

1a0022b8 <prvTimerTask>:
{
1a0022b8:	b500      	push	{lr}
1a0022ba:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0022bc:	a801      	add	r0, sp, #4
1a0022be:	f7ff fded 	bl	1a001e9c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0022c2:	9901      	ldr	r1, [sp, #4]
1a0022c4:	f7ff ff40 	bl	1a002148 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0022c8:	f7ff ff78 	bl	1a0021bc <prvProcessReceivedCommands>
1a0022cc:	e7f6      	b.n	1a0022bc <prvTimerTask+0x4>
1a0022ce:	Address 0x000000001a0022ce is out of bounds.


1a0022d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0022d0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0022d2:	2300      	movs	r3, #0
1a0022d4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0022d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00230c <prvTaskExitError+0x3c>)
1a0022d8:	681b      	ldr	r3, [r3, #0]
1a0022da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0022de:	d008      	beq.n	1a0022f2 <prvTaskExitError+0x22>
1a0022e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022e4:	f383 8811 	msr	BASEPRI, r3
1a0022e8:	f3bf 8f6f 	isb	sy
1a0022ec:	f3bf 8f4f 	dsb	sy
1a0022f0:	e7fe      	b.n	1a0022f0 <prvTaskExitError+0x20>
1a0022f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022f6:	f383 8811 	msr	BASEPRI, r3
1a0022fa:	f3bf 8f6f 	isb	sy
1a0022fe:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002302:	9b01      	ldr	r3, [sp, #4]
1a002304:	2b00      	cmp	r3, #0
1a002306:	d0fc      	beq.n	1a002302 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002308:	b002      	add	sp, #8
1a00230a:	4770      	bx	lr
1a00230c:	10000000 	.word	0x10000000

1a002310 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002310:	4808      	ldr	r0, [pc, #32]	; (1a002334 <prvPortStartFirstTask+0x24>)
1a002312:	6800      	ldr	r0, [r0, #0]
1a002314:	6800      	ldr	r0, [r0, #0]
1a002316:	f380 8808 	msr	MSP, r0
1a00231a:	f04f 0000 	mov.w	r0, #0
1a00231e:	f380 8814 	msr	CONTROL, r0
1a002322:	b662      	cpsie	i
1a002324:	b661      	cpsie	f
1a002326:	f3bf 8f4f 	dsb	sy
1a00232a:	f3bf 8f6f 	isb	sy
1a00232e:	df00      	svc	0
1a002330:	bf00      	nop
1a002332:	0000      	.short	0x0000
1a002334:	e000ed08 	.word	0xe000ed08

1a002338 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002338:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002348 <vPortEnableVFP+0x10>
1a00233c:	6801      	ldr	r1, [r0, #0]
1a00233e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002342:	6001      	str	r1, [r0, #0]
1a002344:	4770      	bx	lr
1a002346:	0000      	.short	0x0000
1a002348:	e000ed88 	.word	0xe000ed88

1a00234c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a00234c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002350:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002354:	f021 0101 	bic.w	r1, r1, #1
1a002358:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00235c:	4b05      	ldr	r3, [pc, #20]	; (1a002374 <pxPortInitialiseStack+0x28>)
1a00235e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002362:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002366:	f06f 0302 	mvn.w	r3, #2
1a00236a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00236e:	3844      	subs	r0, #68	; 0x44
1a002370:	4770      	bx	lr
1a002372:	bf00      	nop
1a002374:	1a0022d1 	.word	0x1a0022d1
1a002378:	ffffffff 	.word	0xffffffff
1a00237c:	ffffffff 	.word	0xffffffff

1a002380 <SVC_Handler>:
	__asm volatile (
1a002380:	4b07      	ldr	r3, [pc, #28]	; (1a0023a0 <pxCurrentTCBConst2>)
1a002382:	6819      	ldr	r1, [r3, #0]
1a002384:	6808      	ldr	r0, [r1, #0]
1a002386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00238a:	f380 8809 	msr	PSP, r0
1a00238e:	f3bf 8f6f 	isb	sy
1a002392:	f04f 0000 	mov.w	r0, #0
1a002396:	f380 8811 	msr	BASEPRI, r0
1a00239a:	4770      	bx	lr
1a00239c:	f3af 8000 	nop.w

1a0023a0 <pxCurrentTCBConst2>:
1a0023a0:	10002888 	.word	0x10002888

1a0023a4 <vPortEnterCritical>:
1a0023a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023a8:	f383 8811 	msr	BASEPRI, r3
1a0023ac:	f3bf 8f6f 	isb	sy
1a0023b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0023b4:	4a0a      	ldr	r2, [pc, #40]	; (1a0023e0 <vPortEnterCritical+0x3c>)
1a0023b6:	6813      	ldr	r3, [r2, #0]
1a0023b8:	3301      	adds	r3, #1
1a0023ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0023bc:	2b01      	cmp	r3, #1
1a0023be:	d000      	beq.n	1a0023c2 <vPortEnterCritical+0x1e>
}
1a0023c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0023c2:	4b08      	ldr	r3, [pc, #32]	; (1a0023e4 <vPortEnterCritical+0x40>)
1a0023c4:	681b      	ldr	r3, [r3, #0]
1a0023c6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0023ca:	d0f9      	beq.n	1a0023c0 <vPortEnterCritical+0x1c>
1a0023cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023d0:	f383 8811 	msr	BASEPRI, r3
1a0023d4:	f3bf 8f6f 	isb	sy
1a0023d8:	f3bf 8f4f 	dsb	sy
1a0023dc:	e7fe      	b.n	1a0023dc <vPortEnterCritical+0x38>
1a0023de:	bf00      	nop
1a0023e0:	10000000 	.word	0x10000000
1a0023e4:	e000ed04 	.word	0xe000ed04

1a0023e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0023e8:	4b09      	ldr	r3, [pc, #36]	; (1a002410 <vPortExitCritical+0x28>)
1a0023ea:	681b      	ldr	r3, [r3, #0]
1a0023ec:	b943      	cbnz	r3, 1a002400 <vPortExitCritical+0x18>
1a0023ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023f2:	f383 8811 	msr	BASEPRI, r3
1a0023f6:	f3bf 8f6f 	isb	sy
1a0023fa:	f3bf 8f4f 	dsb	sy
1a0023fe:	e7fe      	b.n	1a0023fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002400:	3b01      	subs	r3, #1
1a002402:	4a03      	ldr	r2, [pc, #12]	; (1a002410 <vPortExitCritical+0x28>)
1a002404:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002406:	b90b      	cbnz	r3, 1a00240c <vPortExitCritical+0x24>
	__asm volatile
1a002408:	f383 8811 	msr	BASEPRI, r3
}
1a00240c:	4770      	bx	lr
1a00240e:	bf00      	nop
1a002410:	10000000 	.word	0x10000000
1a002414:	ffffffff 	.word	0xffffffff
1a002418:	ffffffff 	.word	0xffffffff
1a00241c:	ffffffff 	.word	0xffffffff

1a002420 <PendSV_Handler>:
	__asm volatile
1a002420:	f3ef 8009 	mrs	r0, PSP
1a002424:	f3bf 8f6f 	isb	sy
1a002428:	4b15      	ldr	r3, [pc, #84]	; (1a002480 <pxCurrentTCBConst>)
1a00242a:	681a      	ldr	r2, [r3, #0]
1a00242c:	f01e 0f10 	tst.w	lr, #16
1a002430:	bf08      	it	eq
1a002432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00243a:	6010      	str	r0, [r2, #0]
1a00243c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002440:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002444:	f380 8811 	msr	BASEPRI, r0
1a002448:	f3bf 8f4f 	dsb	sy
1a00244c:	f3bf 8f6f 	isb	sy
1a002450:	f7ff fac2 	bl	1a0019d8 <vTaskSwitchContext>
1a002454:	f04f 0000 	mov.w	r0, #0
1a002458:	f380 8811 	msr	BASEPRI, r0
1a00245c:	bc09      	pop	{r0, r3}
1a00245e:	6819      	ldr	r1, [r3, #0]
1a002460:	6808      	ldr	r0, [r1, #0]
1a002462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002466:	f01e 0f10 	tst.w	lr, #16
1a00246a:	bf08      	it	eq
1a00246c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002470:	f380 8809 	msr	PSP, r0
1a002474:	f3bf 8f6f 	isb	sy
1a002478:	4770      	bx	lr
1a00247a:	bf00      	nop
1a00247c:	f3af 8000 	nop.w

1a002480 <pxCurrentTCBConst>:
1a002480:	10002888 	.word	0x10002888

1a002484 <SysTick_Handler>:
{
1a002484:	b508      	push	{r3, lr}
	__asm volatile
1a002486:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00248a:	f383 8811 	msr	BASEPRI, r3
1a00248e:	f3bf 8f6f 	isb	sy
1a002492:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002496:	f7ff f973 	bl	1a001780 <xTaskIncrementTick>
1a00249a:	b118      	cbz	r0, 1a0024a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00249c:	4b03      	ldr	r3, [pc, #12]	; (1a0024ac <SysTick_Handler+0x28>)
1a00249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0024a2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0024a4:	2300      	movs	r3, #0
1a0024a6:	f383 8811 	msr	BASEPRI, r3
}
1a0024aa:	bd08      	pop	{r3, pc}
1a0024ac:	e000ed04 	.word	0xe000ed04

1a0024b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0024b0:	4a08      	ldr	r2, [pc, #32]	; (1a0024d4 <vPortSetupTimerInterrupt+0x24>)
1a0024b2:	2300      	movs	r3, #0
1a0024b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0024b6:	4908      	ldr	r1, [pc, #32]	; (1a0024d8 <vPortSetupTimerInterrupt+0x28>)
1a0024b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0024ba:	4b08      	ldr	r3, [pc, #32]	; (1a0024dc <vPortSetupTimerInterrupt+0x2c>)
1a0024bc:	681b      	ldr	r3, [r3, #0]
1a0024be:	4908      	ldr	r1, [pc, #32]	; (1a0024e0 <vPortSetupTimerInterrupt+0x30>)
1a0024c0:	fba1 1303 	umull	r1, r3, r1, r3
1a0024c4:	099b      	lsrs	r3, r3, #6
1a0024c6:	3b01      	subs	r3, #1
1a0024c8:	4906      	ldr	r1, [pc, #24]	; (1a0024e4 <vPortSetupTimerInterrupt+0x34>)
1a0024ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0024cc:	2307      	movs	r3, #7
1a0024ce:	6013      	str	r3, [r2, #0]
}
1a0024d0:	4770      	bx	lr
1a0024d2:	bf00      	nop
1a0024d4:	e000e010 	.word	0xe000e010
1a0024d8:	e000e018 	.word	0xe000e018
1a0024dc:	10002b54 	.word	0x10002b54
1a0024e0:	10624dd3 	.word	0x10624dd3
1a0024e4:	e000e014 	.word	0xe000e014

1a0024e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0024e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0025d4 <xPortStartScheduler+0xec>)
1a0024ea:	681a      	ldr	r2, [r3, #0]
1a0024ec:	4b3a      	ldr	r3, [pc, #232]	; (1a0025d8 <xPortStartScheduler+0xf0>)
1a0024ee:	429a      	cmp	r2, r3
1a0024f0:	d00d      	beq.n	1a00250e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0024f2:	4b38      	ldr	r3, [pc, #224]	; (1a0025d4 <xPortStartScheduler+0xec>)
1a0024f4:	681a      	ldr	r2, [r3, #0]
1a0024f6:	4b39      	ldr	r3, [pc, #228]	; (1a0025dc <xPortStartScheduler+0xf4>)
1a0024f8:	429a      	cmp	r2, r3
1a0024fa:	d111      	bne.n	1a002520 <xPortStartScheduler+0x38>
	__asm volatile
1a0024fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002500:	f383 8811 	msr	BASEPRI, r3
1a002504:	f3bf 8f6f 	isb	sy
1a002508:	f3bf 8f4f 	dsb	sy
1a00250c:	e7fe      	b.n	1a00250c <xPortStartScheduler+0x24>
1a00250e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002512:	f383 8811 	msr	BASEPRI, r3
1a002516:	f3bf 8f6f 	isb	sy
1a00251a:	f3bf 8f4f 	dsb	sy
1a00251e:	e7fe      	b.n	1a00251e <xPortStartScheduler+0x36>
{
1a002520:	b510      	push	{r4, lr}
1a002522:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002524:	4b2e      	ldr	r3, [pc, #184]	; (1a0025e0 <xPortStartScheduler+0xf8>)
1a002526:	781a      	ldrb	r2, [r3, #0]
1a002528:	b2d2      	uxtb	r2, r2
1a00252a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00252c:	22ff      	movs	r2, #255	; 0xff
1a00252e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002530:	781b      	ldrb	r3, [r3, #0]
1a002532:	b2db      	uxtb	r3, r3
1a002534:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002538:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00253c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002540:	4a28      	ldr	r2, [pc, #160]	; (1a0025e4 <xPortStartScheduler+0xfc>)
1a002542:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002544:	4b28      	ldr	r3, [pc, #160]	; (1a0025e8 <xPortStartScheduler+0x100>)
1a002546:	2207      	movs	r2, #7
1a002548:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00254a:	e009      	b.n	1a002560 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00254c:	4a26      	ldr	r2, [pc, #152]	; (1a0025e8 <xPortStartScheduler+0x100>)
1a00254e:	6813      	ldr	r3, [r2, #0]
1a002550:	3b01      	subs	r3, #1
1a002552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002554:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002558:	005b      	lsls	r3, r3, #1
1a00255a:	b2db      	uxtb	r3, r3
1a00255c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002560:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002564:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002568:	d1f0      	bne.n	1a00254c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00256a:	4b1f      	ldr	r3, [pc, #124]	; (1a0025e8 <xPortStartScheduler+0x100>)
1a00256c:	681b      	ldr	r3, [r3, #0]
1a00256e:	2b04      	cmp	r3, #4
1a002570:	d008      	beq.n	1a002584 <xPortStartScheduler+0x9c>
1a002572:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002576:	f383 8811 	msr	BASEPRI, r3
1a00257a:	f3bf 8f6f 	isb	sy
1a00257e:	f3bf 8f4f 	dsb	sy
1a002582:	e7fe      	b.n	1a002582 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002584:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00258a:	4a17      	ldr	r2, [pc, #92]	; (1a0025e8 <xPortStartScheduler+0x100>)
1a00258c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00258e:	9b01      	ldr	r3, [sp, #4]
1a002590:	b2db      	uxtb	r3, r3
1a002592:	4a13      	ldr	r2, [pc, #76]	; (1a0025e0 <xPortStartScheduler+0xf8>)
1a002594:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002596:	4b15      	ldr	r3, [pc, #84]	; (1a0025ec <xPortStartScheduler+0x104>)
1a002598:	681a      	ldr	r2, [r3, #0]
1a00259a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00259e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0025a0:	681a      	ldr	r2, [r3, #0]
1a0025a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0025a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0025a8:	f7ff ff82 	bl	1a0024b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0025ac:	2400      	movs	r4, #0
1a0025ae:	4b10      	ldr	r3, [pc, #64]	; (1a0025f0 <xPortStartScheduler+0x108>)
1a0025b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0025b2:	f7ff fec1 	bl	1a002338 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0025b6:	4a0f      	ldr	r2, [pc, #60]	; (1a0025f4 <xPortStartScheduler+0x10c>)
1a0025b8:	6813      	ldr	r3, [r2, #0]
1a0025ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0025be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0025c0:	f7ff fea6 	bl	1a002310 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0025c4:	f7ff fa08 	bl	1a0019d8 <vTaskSwitchContext>
	prvTaskExitError();
1a0025c8:	f7ff fe82 	bl	1a0022d0 <prvTaskExitError>
}
1a0025cc:	4620      	mov	r0, r4
1a0025ce:	b002      	add	sp, #8
1a0025d0:	bd10      	pop	{r4, pc}
1a0025d2:	bf00      	nop
1a0025d4:	e000ed00 	.word	0xe000ed00
1a0025d8:	410fc271 	.word	0x410fc271
1a0025dc:	410fc270 	.word	0x410fc270
1a0025e0:	e000e400 	.word	0xe000e400
1a0025e4:	10002adc 	.word	0x10002adc
1a0025e8:	10002ae0 	.word	0x10002ae0
1a0025ec:	e000ed20 	.word	0xe000ed20
1a0025f0:	10000000 	.word	0x10000000
1a0025f4:	e000ef34 	.word	0xe000ef34

1a0025f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0025f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0025fc:	2b0f      	cmp	r3, #15
1a0025fe:	d90f      	bls.n	1a002620 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002600:	4a10      	ldr	r2, [pc, #64]	; (1a002644 <vPortValidateInterruptPriority+0x4c>)
1a002602:	5c9b      	ldrb	r3, [r3, r2]
1a002604:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002606:	4a10      	ldr	r2, [pc, #64]	; (1a002648 <vPortValidateInterruptPriority+0x50>)
1a002608:	7812      	ldrb	r2, [r2, #0]
1a00260a:	429a      	cmp	r2, r3
1a00260c:	d908      	bls.n	1a002620 <vPortValidateInterruptPriority+0x28>
1a00260e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002612:	f383 8811 	msr	BASEPRI, r3
1a002616:	f3bf 8f6f 	isb	sy
1a00261a:	f3bf 8f4f 	dsb	sy
1a00261e:	e7fe      	b.n	1a00261e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002620:	4b0a      	ldr	r3, [pc, #40]	; (1a00264c <vPortValidateInterruptPriority+0x54>)
1a002622:	681b      	ldr	r3, [r3, #0]
1a002624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002628:	4a09      	ldr	r2, [pc, #36]	; (1a002650 <vPortValidateInterruptPriority+0x58>)
1a00262a:	6812      	ldr	r2, [r2, #0]
1a00262c:	4293      	cmp	r3, r2
1a00262e:	d908      	bls.n	1a002642 <vPortValidateInterruptPriority+0x4a>
1a002630:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002634:	f383 8811 	msr	BASEPRI, r3
1a002638:	f3bf 8f6f 	isb	sy
1a00263c:	f3bf 8f4f 	dsb	sy
1a002640:	e7fe      	b.n	1a002640 <vPortValidateInterruptPriority+0x48>
	}
1a002642:	4770      	bx	lr
1a002644:	e000e3f0 	.word	0xe000e3f0
1a002648:	10002adc 	.word	0x10002adc
1a00264c:	e000ed0c 	.word	0xe000ed0c
1a002650:	10002ae0 	.word	0x10002ae0

1a002654 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002654:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002656:	4b05      	ldr	r3, [pc, #20]	; (1a00266c <DAC_IRQHandler+0x18>)
1a002658:	2201      	movs	r2, #1
1a00265a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00265e:	4b04      	ldr	r3, [pc, #16]	; (1a002670 <DAC_IRQHandler+0x1c>)
1a002660:	681b      	ldr	r3, [r3, #0]
1a002662:	b113      	cbz	r3, 1a00266a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002664:	4b02      	ldr	r3, [pc, #8]	; (1a002670 <DAC_IRQHandler+0x1c>)
1a002666:	681b      	ldr	r3, [r3, #0]
1a002668:	4798      	blx	r3
   }
}
1a00266a:	bd08      	pop	{r3, pc}
1a00266c:	e000e100 	.word	0xe000e100
1a002670:	10002ae4 	.word	0x10002ae4

1a002674 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002674:	2200      	movs	r2, #0
1a002676:	2a05      	cmp	r2, #5
1a002678:	d819      	bhi.n	1a0026ae <Board_LED_Init+0x3a>
{
1a00267a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00267c:	490c      	ldr	r1, [pc, #48]	; (1a0026b0 <Board_LED_Init+0x3c>)
1a00267e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002682:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002686:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002688:	4b0a      	ldr	r3, [pc, #40]	; (1a0026b4 <Board_LED_Init+0x40>)
1a00268a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00268e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002692:	2001      	movs	r0, #1
1a002694:	40a0      	lsls	r0, r4
1a002696:	4301      	orrs	r1, r0
1a002698:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00269c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0026a0:	2100      	movs	r1, #0
1a0026a2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0026a4:	3201      	adds	r2, #1
1a0026a6:	2a05      	cmp	r2, #5
1a0026a8:	d9e8      	bls.n	1a00267c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0026aa:	bc70      	pop	{r4, r5, r6}
1a0026ac:	4770      	bx	lr
1a0026ae:	4770      	bx	lr
1a0026b0:	1a0049e0 	.word	0x1a0049e0
1a0026b4:	400f4000 	.word	0x400f4000

1a0026b8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0026b8:	2300      	movs	r3, #0
1a0026ba:	2b03      	cmp	r3, #3
1a0026bc:	d816      	bhi.n	1a0026ec <Board_TEC_Init+0x34>
{
1a0026be:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0026c0:	490b      	ldr	r1, [pc, #44]	; (1a0026f0 <Board_TEC_Init+0x38>)
1a0026c2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0026c6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0026ca:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0026cc:	4c09      	ldr	r4, [pc, #36]	; (1a0026f4 <Board_TEC_Init+0x3c>)
1a0026ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0026d2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0026d6:	2001      	movs	r0, #1
1a0026d8:	40a8      	lsls	r0, r5
1a0026da:	ea21 0100 	bic.w	r1, r1, r0
1a0026de:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0026e2:	3301      	adds	r3, #1
1a0026e4:	2b03      	cmp	r3, #3
1a0026e6:	d9eb      	bls.n	1a0026c0 <Board_TEC_Init+0x8>
   }
}
1a0026e8:	bc30      	pop	{r4, r5}
1a0026ea:	4770      	bx	lr
1a0026ec:	4770      	bx	lr
1a0026ee:	bf00      	nop
1a0026f0:	1a0049d8 	.word	0x1a0049d8
1a0026f4:	400f4000 	.word	0x400f4000

1a0026f8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0026f8:	2300      	movs	r3, #0
1a0026fa:	2b08      	cmp	r3, #8
1a0026fc:	d816      	bhi.n	1a00272c <Board_GPIO_Init+0x34>
{
1a0026fe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002700:	490b      	ldr	r1, [pc, #44]	; (1a002730 <Board_GPIO_Init+0x38>)
1a002702:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002706:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00270a:	784d      	ldrb	r5, [r1, #1]
1a00270c:	4c09      	ldr	r4, [pc, #36]	; (1a002734 <Board_GPIO_Init+0x3c>)
1a00270e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002712:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002716:	2001      	movs	r0, #1
1a002718:	40a8      	lsls	r0, r5
1a00271a:	ea21 0100 	bic.w	r1, r1, r0
1a00271e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002722:	3301      	adds	r3, #1
1a002724:	2b08      	cmp	r3, #8
1a002726:	d9eb      	bls.n	1a002700 <Board_GPIO_Init+0x8>
   }
}
1a002728:	bc30      	pop	{r4, r5}
1a00272a:	4770      	bx	lr
1a00272c:	4770      	bx	lr
1a00272e:	bf00      	nop
1a002730:	1a0049ec 	.word	0x1a0049ec
1a002734:	400f4000 	.word	0x400f4000

1a002738 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002738:	b510      	push	{r4, lr}
1a00273a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00273c:	4c08      	ldr	r4, [pc, #32]	; (1a002760 <Board_ADC_Init+0x28>)
1a00273e:	4669      	mov	r1, sp
1a002740:	4620      	mov	r0, r4
1a002742:	f000 f9bf 	bl	1a002ac4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002746:	4a07      	ldr	r2, [pc, #28]	; (1a002764 <Board_ADC_Init+0x2c>)
1a002748:	4669      	mov	r1, sp
1a00274a:	4620      	mov	r0, r4
1a00274c:	f000 f9da 	bl	1a002b04 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002750:	2200      	movs	r2, #0
1a002752:	4669      	mov	r1, sp
1a002754:	4620      	mov	r0, r4
1a002756:	f000 f9ee 	bl	1a002b36 <Chip_ADC_SetResolution>
}
1a00275a:	b002      	add	sp, #8
1a00275c:	bd10      	pop	{r4, pc}
1a00275e:	bf00      	nop
1a002760:	400e3000 	.word	0x400e3000
1a002764:	00061a80 	.word	0x00061a80

1a002768 <Board_SPI_Init>:
{
1a002768:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00276a:	4c0b      	ldr	r4, [pc, #44]	; (1a002798 <Board_SPI_Init+0x30>)
1a00276c:	4620      	mov	r0, r4
1a00276e:	f000 fde3 	bl	1a003338 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002772:	6863      	ldr	r3, [r4, #4]
1a002774:	f023 0304 	bic.w	r3, r3, #4
1a002778:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00277a:	6823      	ldr	r3, [r4, #0]
1a00277c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002780:	f043 0307 	orr.w	r3, r3, #7
1a002784:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002786:	4905      	ldr	r1, [pc, #20]	; (1a00279c <Board_SPI_Init+0x34>)
1a002788:	4620      	mov	r0, r4
1a00278a:	f000 fdb6 	bl	1a0032fa <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00278e:	6863      	ldr	r3, [r4, #4]
1a002790:	f043 0302 	orr.w	r3, r3, #2
1a002794:	6063      	str	r3, [r4, #4]
}
1a002796:	bd10      	pop	{r4, pc}
1a002798:	400c5000 	.word	0x400c5000
1a00279c:	000186a0 	.word	0x000186a0

1a0027a0 <Board_I2C_Init>:
{
1a0027a0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0027a2:	2000      	movs	r0, #0
1a0027a4:	f000 fd5c 	bl	1a003260 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0027a8:	4b04      	ldr	r3, [pc, #16]	; (1a0027bc <Board_I2C_Init+0x1c>)
1a0027aa:	f640 0208 	movw	r2, #2056	; 0x808
1a0027ae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0027b2:	4903      	ldr	r1, [pc, #12]	; (1a0027c0 <Board_I2C_Init+0x20>)
1a0027b4:	2000      	movs	r0, #0
1a0027b6:	f000 fd65 	bl	1a003284 <Chip_I2C_SetClockRate>
}
1a0027ba:	bd08      	pop	{r3, pc}
1a0027bc:	40086000 	.word	0x40086000
1a0027c0:	000f4240 	.word	0x000f4240

1a0027c4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0027c4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0027c6:	4c07      	ldr	r4, [pc, #28]	; (1a0027e4 <Board_Debug_Init+0x20>)
1a0027c8:	4620      	mov	r0, r4
1a0027ca:	f000 f8b9 	bl	1a002940 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0027ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0027d2:	4620      	mov	r0, r4
1a0027d4:	f000 f8de 	bl	1a002994 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0027d8:	2303      	movs	r3, #3
1a0027da:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0027dc:	2301      	movs	r3, #1
1a0027de:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0027e0:	bd10      	pop	{r4, pc}
1a0027e2:	bf00      	nop
1a0027e4:	400c1000 	.word	0x400c1000

1a0027e8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0027e8:	4b03      	ldr	r3, [pc, #12]	; (1a0027f8 <Board_UARTPutChar+0x10>)
1a0027ea:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0027ec:	f013 0f20 	tst.w	r3, #32
1a0027f0:	d0fa      	beq.n	1a0027e8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0027f2:	4b01      	ldr	r3, [pc, #4]	; (1a0027f8 <Board_UARTPutChar+0x10>)
1a0027f4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0027f6:	4770      	bx	lr
1a0027f8:	400c1000 	.word	0x400c1000

1a0027fc <Board_UARTGetChar>:
	return pUART->LSR;
1a0027fc:	4b05      	ldr	r3, [pc, #20]	; (1a002814 <Board_UARTGetChar+0x18>)
1a0027fe:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002800:	f013 0f01 	tst.w	r3, #1
1a002804:	d003      	beq.n	1a00280e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002806:	4b03      	ldr	r3, [pc, #12]	; (1a002814 <Board_UARTGetChar+0x18>)
1a002808:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00280a:	b2c0      	uxtb	r0, r0
1a00280c:	4770      	bx	lr
   }
   return EOF;
1a00280e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002812:	4770      	bx	lr
1a002814:	400c1000 	.word	0x400c1000

1a002818 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002818:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00281a:	f7ff ffd3 	bl	1a0027c4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00281e:	4809      	ldr	r0, [pc, #36]	; (1a002844 <Board_Init+0x2c>)
1a002820:	f000 fc62 	bl	1a0030e8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002824:	f7ff ff68 	bl	1a0026f8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002828:	f7ff ff86 	bl	1a002738 <Board_ADC_Init>
   Board_SPI_Init();
1a00282c:	f7ff ff9c 	bl	1a002768 <Board_SPI_Init>
   Board_I2C_Init();
1a002830:	f7ff ffb6 	bl	1a0027a0 <Board_I2C_Init>

   Board_LED_Init();
1a002834:	f7ff ff1e 	bl	1a002674 <Board_LED_Init>
   Board_TEC_Init();
1a002838:	f7ff ff3e 	bl	1a0026b8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00283c:	f000 fc4a 	bl	1a0030d4 <SystemCoreClockUpdate>
}
1a002840:	bd08      	pop	{r3, pc}
1a002842:	bf00      	nop
1a002844:	400f4000 	.word	0x400f4000

1a002848 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002848:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00284a:	b2c0      	uxtb	r0, r0
1a00284c:	f7ff ffcc 	bl	1a0027e8 <Board_UARTPutChar>
}
1a002850:	bd08      	pop	{r3, pc}

1a002852 <__stdio_getchar>:

int __stdio_getchar()
{
1a002852:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002854:	f7ff ffd2 	bl	1a0027fc <Board_UARTGetChar>
}
1a002858:	bd08      	pop	{r3, pc}

1a00285a <__stdio_init>:

void __stdio_init()
{
1a00285a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00285c:	f7ff ffb2 	bl	1a0027c4 <Board_Debug_Init>
1a002860:	bd08      	pop	{r3, pc}
1a002862:	Address 0x000000001a002862 is out of bounds.


1a002864 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002864:	2300      	movs	r3, #0
1a002866:	2b1c      	cmp	r3, #28
1a002868:	d812      	bhi.n	1a002890 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00286a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00286c:	4a09      	ldr	r2, [pc, #36]	; (1a002894 <Board_SetupMuxing+0x30>)
1a00286e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002872:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002876:	784a      	ldrb	r2, [r1, #1]
1a002878:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00287a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00287e:	4906      	ldr	r1, [pc, #24]	; (1a002898 <Board_SetupMuxing+0x34>)
1a002880:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002884:	3301      	adds	r3, #1
1a002886:	2b1c      	cmp	r3, #28
1a002888:	d9f0      	bls.n	1a00286c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00288a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00288e:	4770      	bx	lr
1a002890:	4770      	bx	lr
1a002892:	bf00      	nop
1a002894:	1a004a08 	.word	0x1a004a08
1a002898:	40086000 	.word	0x40086000

1a00289c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00289c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00289e:	4a17      	ldr	r2, [pc, #92]	; (1a0028fc <Board_SetupClocking+0x60>)
1a0028a0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0028a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028a8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028ac:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0028b0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0028b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028b8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028bc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0028c0:	2201      	movs	r2, #1
1a0028c2:	490f      	ldr	r1, [pc, #60]	; (1a002900 <Board_SetupClocking+0x64>)
1a0028c4:	2006      	movs	r0, #6
1a0028c6:	f000 fc11 	bl	1a0030ec <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028ca:	2400      	movs	r4, #0
1a0028cc:	b14c      	cbz	r4, 1a0028e2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0028ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0028fc <Board_SetupClocking+0x60>)
1a0028d0:	685a      	ldr	r2, [r3, #4]
1a0028d2:	f022 020c 	bic.w	r2, r2, #12
1a0028d6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0028d8:	685a      	ldr	r2, [r3, #4]
1a0028da:	f042 0203 	orr.w	r2, r2, #3
1a0028de:	605a      	str	r2, [r3, #4]
}
1a0028e0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0028e2:	4808      	ldr	r0, [pc, #32]	; (1a002904 <Board_SetupClocking+0x68>)
1a0028e4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0028e8:	2301      	movs	r3, #1
1a0028ea:	788a      	ldrb	r2, [r1, #2]
1a0028ec:	7849      	ldrb	r1, [r1, #1]
1a0028ee:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0028f2:	f000 fb4b 	bl	1a002f8c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028f6:	3401      	adds	r4, #1
1a0028f8:	e7e8      	b.n	1a0028cc <Board_SetupClocking+0x30>
1a0028fa:	bf00      	nop
1a0028fc:	40043000 	.word	0x40043000
1a002900:	0c28cb00 	.word	0x0c28cb00
1a002904:	1a004a04 	.word	0x1a004a04

1a002908 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002908:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00290a:	f7ff ffab 	bl	1a002864 <Board_SetupMuxing>
    Board_SetupClocking();
1a00290e:	f7ff ffc5 	bl	1a00289c <Board_SetupClocking>
}
1a002912:	bd08      	pop	{r3, pc}

1a002914 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002914:	4b09      	ldr	r3, [pc, #36]	; (1a00293c <Chip_UART_GetIndex+0x28>)
1a002916:	4298      	cmp	r0, r3
1a002918:	d009      	beq.n	1a00292e <Chip_UART_GetIndex+0x1a>
1a00291a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00291e:	4298      	cmp	r0, r3
1a002920:	d007      	beq.n	1a002932 <Chip_UART_GetIndex+0x1e>
1a002922:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002926:	4298      	cmp	r0, r3
1a002928:	d005      	beq.n	1a002936 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00292a:	2000      	movs	r0, #0
1a00292c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00292e:	2002      	movs	r0, #2
1a002930:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002932:	2003      	movs	r0, #3
1a002934:	4770      	bx	lr
			return 1;
1a002936:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002938:	4770      	bx	lr
1a00293a:	bf00      	nop
1a00293c:	400c1000 	.word	0x400c1000

1a002940 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002940:	b530      	push	{r4, r5, lr}
1a002942:	b083      	sub	sp, #12
1a002944:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002946:	f7ff ffe5 	bl	1a002914 <Chip_UART_GetIndex>
1a00294a:	2301      	movs	r3, #1
1a00294c:	461a      	mov	r2, r3
1a00294e:	4619      	mov	r1, r3
1a002950:	4d0e      	ldr	r5, [pc, #56]	; (1a00298c <Chip_UART_Init+0x4c>)
1a002952:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002956:	f000 fb5f 	bl	1a003018 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00295a:	2307      	movs	r3, #7
1a00295c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00295e:	2300      	movs	r3, #0
1a002960:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002962:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002964:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002966:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002968:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00296a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00296c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00296e:	4b08      	ldr	r3, [pc, #32]	; (1a002990 <Chip_UART_Init+0x50>)
1a002970:	429c      	cmp	r4, r3
1a002972:	d006      	beq.n	1a002982 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002974:	2303      	movs	r3, #3
1a002976:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002978:	2310      	movs	r3, #16
1a00297a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00297c:	9b01      	ldr	r3, [sp, #4]
}
1a00297e:	b003      	add	sp, #12
1a002980:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002982:	2300      	movs	r3, #0
1a002984:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002986:	69a3      	ldr	r3, [r4, #24]
1a002988:	9301      	str	r3, [sp, #4]
1a00298a:	e7f3      	b.n	1a002974 <Chip_UART_Init+0x34>
1a00298c:	1a004a84 	.word	0x1a004a84
1a002990:	40082000 	.word	0x40082000

1a002994 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002998:	b083      	sub	sp, #12
1a00299a:	4683      	mov	fp, r0
1a00299c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00299e:	f7ff ffb9 	bl	1a002914 <Chip_UART_GetIndex>
1a0029a2:	4b35      	ldr	r3, [pc, #212]	; (1a002a78 <Chip_UART_SetBaudFDR+0xe4>)
1a0029a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0029a8:	f000 fb6e 	bl	1a003088 <Chip_Clock_GetRate>
1a0029ac:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0029ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0029b2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0029b4:	2300      	movs	r3, #0
1a0029b6:	9301      	str	r3, [sp, #4]
1a0029b8:	46a2      	mov	sl, r4
1a0029ba:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0029bc:	e02a      	b.n	1a002a14 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0029be:	4242      	negs	r2, r0
				div ++;
1a0029c0:	1c4b      	adds	r3, r1, #1
1a0029c2:	e017      	b.n	1a0029f4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0029c4:	b30a      	cbz	r2, 1a002a0a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0029c6:	4617      	mov	r7, r2
			sd = d;
1a0029c8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0029ca:	46a2      	mov	sl, r4
			sdiv = div;
1a0029cc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0029ce:	3501      	adds	r5, #1
1a0029d0:	42ac      	cmp	r4, r5
1a0029d2:	d91e      	bls.n	1a002a12 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0029d4:	0933      	lsrs	r3, r6, #4
1a0029d6:	0730      	lsls	r0, r6, #28
1a0029d8:	fba4 0100 	umull	r0, r1, r4, r0
1a0029dc:	fb04 1103 	mla	r1, r4, r3, r1
1a0029e0:	1962      	adds	r2, r4, r5
1a0029e2:	fb08 f202 	mul.w	r2, r8, r2
1a0029e6:	2300      	movs	r3, #0
1a0029e8:	f000 fe8a 	bl	1a003700 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0029ec:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0029ee:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0029f0:	2800      	cmp	r0, #0
1a0029f2:	dbe4      	blt.n	1a0029be <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0029f4:	4297      	cmp	r7, r2
1a0029f6:	d3ea      	bcc.n	1a0029ce <Chip_UART_SetBaudFDR+0x3a>
1a0029f8:	2b00      	cmp	r3, #0
1a0029fa:	d0e8      	beq.n	1a0029ce <Chip_UART_SetBaudFDR+0x3a>
1a0029fc:	0c19      	lsrs	r1, r3, #16
1a0029fe:	d1e6      	bne.n	1a0029ce <Chip_UART_SetBaudFDR+0x3a>
1a002a00:	2b02      	cmp	r3, #2
1a002a02:	d8df      	bhi.n	1a0029c4 <Chip_UART_SetBaudFDR+0x30>
1a002a04:	2d00      	cmp	r5, #0
1a002a06:	d0dd      	beq.n	1a0029c4 <Chip_UART_SetBaudFDR+0x30>
1a002a08:	e7e1      	b.n	1a0029ce <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002a0a:	4617      	mov	r7, r2
			sd = d;
1a002a0c:	9501      	str	r5, [sp, #4]
			sm = m;
1a002a0e:	46a2      	mov	sl, r4
			sdiv = div;
1a002a10:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002a12:	3401      	adds	r4, #1
1a002a14:	b11f      	cbz	r7, 1a002a1e <Chip_UART_SetBaudFDR+0x8a>
1a002a16:	2c0f      	cmp	r4, #15
1a002a18:	d801      	bhi.n	1a002a1e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002a1a:	2500      	movs	r5, #0
1a002a1c:	e7d8      	b.n	1a0029d0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002a1e:	f1b9 0f00 	cmp.w	r9, #0
1a002a22:	d024      	beq.n	1a002a6e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002a24:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002a2c:	f8cb 300c 	str.w	r3, [fp, #12]
1a002a30:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002a34:	f8cb 3000 	str.w	r3, [fp]
1a002a38:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002a3c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002a40:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002a48:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002a4c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002a50:	b2db      	uxtb	r3, r3
1a002a52:	9901      	ldr	r1, [sp, #4]
1a002a54:	f001 020f 	and.w	r2, r1, #15
1a002a58:	4313      	orrs	r3, r2
1a002a5a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002a5e:	0933      	lsrs	r3, r6, #4
1a002a60:	fb0a f303 	mul.w	r3, sl, r3
1a002a64:	448a      	add	sl, r1
1a002a66:	fb09 f90a 	mul.w	r9, r9, sl
1a002a6a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002a6e:	4648      	mov	r0, r9
1a002a70:	b003      	add	sp, #12
1a002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a76:	bf00      	nop
1a002a78:	1a004a7c 	.word	0x1a004a7c

1a002a7c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002a7c:	4b03      	ldr	r3, [pc, #12]	; (1a002a8c <Chip_ADC_GetClockIndex+0x10>)
1a002a7e:	4298      	cmp	r0, r3
1a002a80:	d001      	beq.n	1a002a86 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002a82:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002a84:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002a86:	2004      	movs	r0, #4
1a002a88:	4770      	bx	lr
1a002a8a:	bf00      	nop
1a002a8c:	400e4000 	.word	0x400e4000

1a002a90 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002a90:	b570      	push	{r4, r5, r6, lr}
1a002a92:	460d      	mov	r5, r1
1a002a94:	4614      	mov	r4, r2
1a002a96:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002a98:	f7ff fff0 	bl	1a002a7c <Chip_ADC_GetClockIndex>
1a002a9c:	f000 faf4 	bl	1a003088 <Chip_Clock_GetRate>
	if (burstMode) {
1a002aa0:	b965      	cbnz	r5, 1a002abc <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002aa2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002aa6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002aaa:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002aae:	0064      	lsls	r4, r4, #1
1a002ab0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002ab4:	b2c0      	uxtb	r0, r0
1a002ab6:	3801      	subs	r0, #1
	return div;
}
1a002ab8:	b2c0      	uxtb	r0, r0
1a002aba:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002abc:	fb04 f406 	mul.w	r4, r4, r6
1a002ac0:	e7f3      	b.n	1a002aaa <getClkDiv+0x1a>
1a002ac2:	Address 0x000000001a002ac2 is out of bounds.


1a002ac4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002ac4:	b538      	push	{r3, r4, r5, lr}
1a002ac6:	4605      	mov	r5, r0
1a002ac8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002aca:	f7ff ffd7 	bl	1a002a7c <Chip_ADC_GetClockIndex>
1a002ace:	2301      	movs	r3, #1
1a002ad0:	461a      	mov	r2, r3
1a002ad2:	4619      	mov	r1, r3
1a002ad4:	f000 faa0 	bl	1a003018 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002ad8:	2100      	movs	r1, #0
1a002ada:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002adc:	4a08      	ldr	r2, [pc, #32]	; (1a002b00 <Chip_ADC_Init+0x3c>)
1a002ade:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002ae0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002ae2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002ae4:	230b      	movs	r3, #11
1a002ae6:	4628      	mov	r0, r5
1a002ae8:	f7ff ffd2 	bl	1a002a90 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002aec:	0200      	lsls	r0, r0, #8
1a002aee:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002af2:	7920      	ldrb	r0, [r4, #4]
1a002af4:	0440      	lsls	r0, r0, #17
1a002af6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002afa:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002afc:	6028      	str	r0, [r5, #0]
}
1a002afe:	bd38      	pop	{r3, r4, r5, pc}
1a002b00:	00061a80 	.word	0x00061a80

1a002b04 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002b04:	b570      	push	{r4, r5, r6, lr}
1a002b06:	4605      	mov	r5, r0
1a002b08:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002b0a:	6804      	ldr	r4, [r0, #0]
1a002b0c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002b10:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002b14:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002b16:	790b      	ldrb	r3, [r1, #4]
1a002b18:	f1c3 030b 	rsb	r3, r3, #11
1a002b1c:	b2db      	uxtb	r3, r3
1a002b1e:	7949      	ldrb	r1, [r1, #5]
1a002b20:	f7ff ffb6 	bl	1a002a90 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002b24:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002b28:	7930      	ldrb	r0, [r6, #4]
1a002b2a:	0440      	lsls	r0, r0, #17
1a002b2c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002b30:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002b32:	6028      	str	r0, [r5, #0]
}
1a002b34:	bd70      	pop	{r4, r5, r6, pc}

1a002b36 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002b36:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002b38:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002b3a:	680a      	ldr	r2, [r1, #0]
1a002b3c:	f7ff ffe2 	bl	1a002b04 <Chip_ADC_SetSampleRate>
}
1a002b40:	bd08      	pop	{r3, pc}
1a002b42:	Address 0x000000001a002b42 is out of bounds.


1a002b44 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b44:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002b46:	680b      	ldr	r3, [r1, #0]
1a002b48:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b4c:	d002      	beq.n	1a002b54 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002b52:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002b54:	4607      	mov	r7, r0
1a002b56:	2501      	movs	r5, #1
1a002b58:	e03b      	b.n	1a002bd2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002b5a:	694b      	ldr	r3, [r1, #20]
1a002b5c:	fb03 f302 	mul.w	r3, r3, r2
1a002b60:	fbb3 f3f5 	udiv	r3, r3, r5
1a002b64:	e014      	b.n	1a002b90 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002b66:	461c      	mov	r4, r3
1a002b68:	e020      	b.n	1a002bac <pll_calc_divs+0x68>
		return -val;
1a002b6a:	f1cc 0c00 	rsb	ip, ip, #0
1a002b6e:	e020      	b.n	1a002bb2 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002b70:	3201      	adds	r2, #1
1a002b72:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002b76:	dc26      	bgt.n	1a002bc6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002b78:	680c      	ldr	r4, [r1, #0]
1a002b7a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002b7e:	d0ec      	beq.n	1a002b5a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002b80:	1c73      	adds	r3, r6, #1
1a002b82:	fa02 fc03 	lsl.w	ip, r2, r3
1a002b86:	694b      	ldr	r3, [r1, #20]
1a002b88:	fb03 f30c 	mul.w	r3, r3, ip
1a002b8c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002b90:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002be0 <pll_calc_divs+0x9c>
1a002b94:	4563      	cmp	r3, ip
1a002b96:	d9eb      	bls.n	1a002b70 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002b98:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002be4 <pll_calc_divs+0xa0>
1a002b9c:	4563      	cmp	r3, ip
1a002b9e:	d812      	bhi.n	1a002bc6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002ba0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002ba4:	d1df      	bne.n	1a002b66 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002ba6:	1c74      	adds	r4, r6, #1
1a002ba8:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002bac:	ebb0 0c04 	subs.w	ip, r0, r4
1a002bb0:	d4db      	bmi.n	1a002b6a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002bb2:	4567      	cmp	r7, ip
1a002bb4:	d9dc      	bls.n	1a002b70 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002bb6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002bb8:	1c77      	adds	r7, r6, #1
1a002bba:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002bbc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002bbe:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002bc0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002bc2:	4667      	mov	r7, ip
1a002bc4:	e7d4      	b.n	1a002b70 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002bc6:	3601      	adds	r6, #1
1a002bc8:	2e03      	cmp	r6, #3
1a002bca:	dc01      	bgt.n	1a002bd0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002bcc:	2201      	movs	r2, #1
1a002bce:	e7d0      	b.n	1a002b72 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002bd0:	3501      	adds	r5, #1
1a002bd2:	2d04      	cmp	r5, #4
1a002bd4:	dc01      	bgt.n	1a002bda <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002bd6:	2600      	movs	r6, #0
1a002bd8:	e7f6      	b.n	1a002bc8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002bda:	bcf0      	pop	{r4, r5, r6, r7}
1a002bdc:	4770      	bx	lr
1a002bde:	bf00      	nop
1a002be0:	094c5eff 	.word	0x094c5eff
1a002be4:	1312d000 	.word	0x1312d000

1a002be8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002be8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002bea:	b099      	sub	sp, #100	; 0x64
1a002bec:	4605      	mov	r5, r0
1a002bee:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002bf0:	225c      	movs	r2, #92	; 0x5c
1a002bf2:	2100      	movs	r1, #0
1a002bf4:	a801      	add	r0, sp, #4
1a002bf6:	f001 f8ac 	bl	1a003d52 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002bfa:	2380      	movs	r3, #128	; 0x80
1a002bfc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002bfe:	6963      	ldr	r3, [r4, #20]
1a002c00:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002c02:	7923      	ldrb	r3, [r4, #4]
1a002c04:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002c08:	4669      	mov	r1, sp
1a002c0a:	4628      	mov	r0, r5
1a002c0c:	f7ff ff9a 	bl	1a002b44 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002c10:	9b06      	ldr	r3, [sp, #24]
1a002c12:	42ab      	cmp	r3, r5
1a002c14:	d027      	beq.n	1a002c66 <pll_get_frac+0x7e>
	if (val < 0)
1a002c16:	1aeb      	subs	r3, r5, r3
1a002c18:	d42e      	bmi.n	1a002c78 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002c1a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002c22:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002c24:	6963      	ldr	r3, [r4, #20]
1a002c26:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002c28:	7923      	ldrb	r3, [r4, #4]
1a002c2a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002c2e:	a910      	add	r1, sp, #64	; 0x40
1a002c30:	4628      	mov	r0, r5
1a002c32:	f7ff ff87 	bl	1a002b44 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002c36:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002c38:	42ab      	cmp	r3, r5
1a002c3a:	d01f      	beq.n	1a002c7c <pll_get_frac+0x94>
	if (val < 0)
1a002c3c:	1aeb      	subs	r3, r5, r3
1a002c3e:	d425      	bmi.n	1a002c8c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002c40:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002c42:	4b2b      	ldr	r3, [pc, #172]	; (1a002cf0 <pll_get_frac+0x108>)
1a002c44:	429d      	cmp	r5, r3
1a002c46:	d923      	bls.n	1a002c90 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002c4a:	1aed      	subs	r5, r5, r3
1a002c4c:	d433      	bmi.n	1a002cb6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002c4e:	42ae      	cmp	r6, r5
1a002c50:	dc3b      	bgt.n	1a002cca <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002c52:	42be      	cmp	r6, r7
1a002c54:	dc31      	bgt.n	1a002cba <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002c56:	466d      	mov	r5, sp
1a002c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c64:	e006      	b.n	1a002c74 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002c66:	466d      	mov	r5, sp
1a002c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002c74:	b019      	add	sp, #100	; 0x64
1a002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002c78:	425b      	negs	r3, r3
1a002c7a:	e7ce      	b.n	1a002c1a <pll_get_frac+0x32>
		*ppll = pll[2];
1a002c7c:	ad10      	add	r5, sp, #64	; 0x40
1a002c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002c8a:	e7f3      	b.n	1a002c74 <pll_get_frac+0x8c>
		return -val;
1a002c8c:	425b      	negs	r3, r3
1a002c8e:	e7d7      	b.n	1a002c40 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002c90:	2340      	movs	r3, #64	; 0x40
1a002c92:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002c94:	6963      	ldr	r3, [r4, #20]
1a002c96:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002c98:	a908      	add	r1, sp, #32
1a002c9a:	4628      	mov	r0, r5
1a002c9c:	f7ff ff52 	bl	1a002b44 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002ca2:	42ab      	cmp	r3, r5
1a002ca4:	d1d0      	bne.n	1a002c48 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002ca6:	ad08      	add	r5, sp, #32
1a002ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002cb4:	e7de      	b.n	1a002c74 <pll_get_frac+0x8c>
		return -val;
1a002cb6:	426d      	negs	r5, r5
1a002cb8:	e7c9      	b.n	1a002c4e <pll_get_frac+0x66>
			*ppll = pll[2];
1a002cba:	ad10      	add	r5, sp, #64	; 0x40
1a002cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cc8:	e7d4      	b.n	1a002c74 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002cca:	42af      	cmp	r7, r5
1a002ccc:	db07      	blt.n	1a002cde <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002cce:	ad08      	add	r5, sp, #32
1a002cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cdc:	e7ca      	b.n	1a002c74 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002cde:	ad10      	add	r5, sp, #64	; 0x40
1a002ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ce4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cec:	e7c2      	b.n	1a002c74 <pll_get_frac+0x8c>
1a002cee:	bf00      	nop
1a002cf0:	068e7780 	.word	0x068e7780

1a002cf4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002cf4:	b430      	push	{r4, r5}
1a002cf6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002cf8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002cfa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002cfc:	e000      	b.n	1a002d00 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002cfe:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002d00:	281c      	cmp	r0, #28
1a002d02:	d118      	bne.n	1a002d36 <Chip_Clock_FindBaseClock+0x42>
1a002d04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d08:	0051      	lsls	r1, r2, #1
1a002d0a:	4a0c      	ldr	r2, [pc, #48]	; (1a002d3c <Chip_Clock_FindBaseClock+0x48>)
1a002d0c:	440a      	add	r2, r1
1a002d0e:	7914      	ldrb	r4, [r2, #4]
1a002d10:	4284      	cmp	r4, r0
1a002d12:	d010      	beq.n	1a002d36 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002d14:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002d18:	004a      	lsls	r2, r1, #1
1a002d1a:	4908      	ldr	r1, [pc, #32]	; (1a002d3c <Chip_Clock_FindBaseClock+0x48>)
1a002d1c:	5a8a      	ldrh	r2, [r1, r2]
1a002d1e:	42aa      	cmp	r2, r5
1a002d20:	d8ed      	bhi.n	1a002cfe <Chip_Clock_FindBaseClock+0xa>
1a002d22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d26:	0051      	lsls	r1, r2, #1
1a002d28:	4a04      	ldr	r2, [pc, #16]	; (1a002d3c <Chip_Clock_FindBaseClock+0x48>)
1a002d2a:	440a      	add	r2, r1
1a002d2c:	8852      	ldrh	r2, [r2, #2]
1a002d2e:	42aa      	cmp	r2, r5
1a002d30:	d3e5      	bcc.n	1a002cfe <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002d32:	4620      	mov	r0, r4
1a002d34:	e7e4      	b.n	1a002d00 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002d36:	bc30      	pop	{r4, r5}
1a002d38:	4770      	bx	lr
1a002d3a:	bf00      	nop
1a002d3c:	1a004a98 	.word	0x1a004a98

1a002d40 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002d40:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002d46:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002d48:	4a0d      	ldr	r2, [pc, #52]	; (1a002d80 <Chip_Clock_EnableCrystal+0x40>)
1a002d4a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002d4c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002d50:	6992      	ldr	r2, [r2, #24]
1a002d52:	428a      	cmp	r2, r1
1a002d54:	d001      	beq.n	1a002d5a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d56:	4a0a      	ldr	r2, [pc, #40]	; (1a002d80 <Chip_Clock_EnableCrystal+0x40>)
1a002d58:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002d5a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002d5e:	4a09      	ldr	r2, [pc, #36]	; (1a002d84 <Chip_Clock_EnableCrystal+0x44>)
1a002d60:	6811      	ldr	r1, [r2, #0]
1a002d62:	4a09      	ldr	r2, [pc, #36]	; (1a002d88 <Chip_Clock_EnableCrystal+0x48>)
1a002d64:	4291      	cmp	r1, r2
1a002d66:	d901      	bls.n	1a002d6c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002d68:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d6c:	4a04      	ldr	r2, [pc, #16]	; (1a002d80 <Chip_Clock_EnableCrystal+0x40>)
1a002d6e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002d70:	9b01      	ldr	r3, [sp, #4]
1a002d72:	1e5a      	subs	r2, r3, #1
1a002d74:	9201      	str	r2, [sp, #4]
1a002d76:	2b00      	cmp	r3, #0
1a002d78:	d1fa      	bne.n	1a002d70 <Chip_Clock_EnableCrystal+0x30>
}
1a002d7a:	b002      	add	sp, #8
1a002d7c:	4770      	bx	lr
1a002d7e:	bf00      	nop
1a002d80:	40050000 	.word	0x40050000
1a002d84:	1a004a00 	.word	0x1a004a00
1a002d88:	01312cff 	.word	0x01312cff

1a002d8c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002d8c:	3012      	adds	r0, #18
1a002d8e:	4b05      	ldr	r3, [pc, #20]	; (1a002da4 <Chip_Clock_GetDividerSource+0x18>)
1a002d90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002d94:	f010 0f01 	tst.w	r0, #1
1a002d98:	d102      	bne.n	1a002da0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d9a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d9e:	4770      	bx	lr
		return CLKINPUT_PD;
1a002da0:	2011      	movs	r0, #17
}
1a002da2:	4770      	bx	lr
1a002da4:	40050000 	.word	0x40050000

1a002da8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002da8:	f100 0212 	add.w	r2, r0, #18
1a002dac:	4b03      	ldr	r3, [pc, #12]	; (1a002dbc <Chip_Clock_GetDividerDivisor+0x14>)
1a002dae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002db2:	4b03      	ldr	r3, [pc, #12]	; (1a002dc0 <Chip_Clock_GetDividerDivisor+0x18>)
1a002db4:	5c18      	ldrb	r0, [r3, r0]
}
1a002db6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002dba:	4770      	bx	lr
1a002dbc:	40050000 	.word	0x40050000
1a002dc0:	1a004a90 	.word	0x1a004a90

1a002dc4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002dc4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002dc6:	2810      	cmp	r0, #16
1a002dc8:	d80a      	bhi.n	1a002de0 <Chip_Clock_GetClockInputHz+0x1c>
1a002dca:	e8df f000 	tbb	[pc, r0]
1a002dce:	0b42      	.short	0x0b42
1a002dd0:	091f160d 	.word	0x091f160d
1a002dd4:	2b282522 	.word	0x2b282522
1a002dd8:	322e0909 	.word	0x322e0909
1a002ddc:	3a36      	.short	0x3a36
1a002dde:	3e          	.byte	0x3e
1a002ddf:	00          	.byte	0x00
	uint32_t rate = 0;
1a002de0:	2000      	movs	r0, #0
1a002de2:	e038      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002de4:	481e      	ldr	r0, [pc, #120]	; (1a002e60 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002de6:	e036      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002de8:	4b1e      	ldr	r3, [pc, #120]	; (1a002e64 <Chip_Clock_GetClockInputHz+0xa0>)
1a002dea:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002dee:	f003 0307 	and.w	r3, r3, #7
1a002df2:	2b04      	cmp	r3, #4
1a002df4:	d130      	bne.n	1a002e58 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002df6:	2000      	movs	r0, #0
1a002df8:	e02d      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002dfa:	4b1a      	ldr	r3, [pc, #104]	; (1a002e64 <Chip_Clock_GetClockInputHz+0xa0>)
1a002dfc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002e00:	f003 0307 	and.w	r3, r3, #7
1a002e04:	2b04      	cmp	r3, #4
1a002e06:	d029      	beq.n	1a002e5c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002e08:	4817      	ldr	r0, [pc, #92]	; (1a002e68 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e0a:	e024      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002e0c:	4b17      	ldr	r3, [pc, #92]	; (1a002e6c <Chip_Clock_GetClockInputHz+0xa8>)
1a002e0e:	6818      	ldr	r0, [r3, #0]
		break;
1a002e10:	e021      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002e12:	4b17      	ldr	r3, [pc, #92]	; (1a002e70 <Chip_Clock_GetClockInputHz+0xac>)
1a002e14:	6818      	ldr	r0, [r3, #0]
		break;
1a002e16:	e01e      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002e18:	4b16      	ldr	r3, [pc, #88]	; (1a002e74 <Chip_Clock_GetClockInputHz+0xb0>)
1a002e1a:	6818      	ldr	r0, [r3, #0]
		break;
1a002e1c:	e01b      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002e1e:	4b15      	ldr	r3, [pc, #84]	; (1a002e74 <Chip_Clock_GetClockInputHz+0xb0>)
1a002e20:	6858      	ldr	r0, [r3, #4]
		break;
1a002e22:	e018      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002e24:	f000 f86a 	bl	1a002efc <Chip_Clock_GetMainPLLHz>
		break;
1a002e28:	e015      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002e2a:	2100      	movs	r1, #0
1a002e2c:	f000 f89c 	bl	1a002f68 <Chip_Clock_GetDivRate>
		break;
1a002e30:	e011      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002e32:	2101      	movs	r1, #1
1a002e34:	f000 f898 	bl	1a002f68 <Chip_Clock_GetDivRate>
		break;
1a002e38:	e00d      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002e3a:	2102      	movs	r1, #2
1a002e3c:	f000 f894 	bl	1a002f68 <Chip_Clock_GetDivRate>
		break;
1a002e40:	e009      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002e42:	2103      	movs	r1, #3
1a002e44:	f000 f890 	bl	1a002f68 <Chip_Clock_GetDivRate>
		break;
1a002e48:	e005      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002e4a:	2104      	movs	r1, #4
1a002e4c:	f000 f88c 	bl	1a002f68 <Chip_Clock_GetDivRate>
		break;
1a002e50:	e001      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002e52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002e56:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002e58:	4803      	ldr	r0, [pc, #12]	; (1a002e68 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e5a:	e7fc      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002e5c:	4806      	ldr	r0, [pc, #24]	; (1a002e78 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002e5e:	e7fa      	b.n	1a002e56 <Chip_Clock_GetClockInputHz+0x92>
1a002e60:	00b71b00 	.word	0x00b71b00
1a002e64:	40043000 	.word	0x40043000
1a002e68:	017d7840 	.word	0x017d7840
1a002e6c:	1a0049d4 	.word	0x1a0049d4
1a002e70:	1a004a00 	.word	0x1a004a00
1a002e74:	10002ae8 	.word	0x10002ae8
1a002e78:	02faf080 	.word	0x02faf080

1a002e7c <Chip_Clock_CalcMainPLLValue>:
{
1a002e7c:	b538      	push	{r3, r4, r5, lr}
1a002e7e:	4605      	mov	r5, r0
1a002e80:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002e82:	7908      	ldrb	r0, [r1, #4]
1a002e84:	f7ff ff9e 	bl	1a002dc4 <Chip_Clock_GetClockInputHz>
1a002e88:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002e8a:	4b19      	ldr	r3, [pc, #100]	; (1a002ef0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002e8c:	442b      	add	r3, r5
1a002e8e:	4a19      	ldr	r2, [pc, #100]	; (1a002ef4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002e90:	4293      	cmp	r3, r2
1a002e92:	d821      	bhi.n	1a002ed8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002e94:	b318      	cbz	r0, 1a002ede <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002e96:	2380      	movs	r3, #128	; 0x80
1a002e98:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002e9a:	2300      	movs	r3, #0
1a002e9c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002e9e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002ea0:	fbb5 f3f0 	udiv	r3, r5, r0
1a002ea4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002ea6:	4a14      	ldr	r2, [pc, #80]	; (1a002ef8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002ea8:	4295      	cmp	r5, r2
1a002eaa:	d903      	bls.n	1a002eb4 <Chip_Clock_CalcMainPLLValue+0x38>
1a002eac:	fb03 f000 	mul.w	r0, r3, r0
1a002eb0:	42a8      	cmp	r0, r5
1a002eb2:	d007      	beq.n	1a002ec4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002eb4:	4621      	mov	r1, r4
1a002eb6:	4628      	mov	r0, r5
1a002eb8:	f7ff fe96 	bl	1a002be8 <pll_get_frac>
		if (!ppll->nsel) {
1a002ebc:	68a3      	ldr	r3, [r4, #8]
1a002ebe:	b18b      	cbz	r3, 1a002ee4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002ec0:	3b01      	subs	r3, #1
1a002ec2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002ec4:	6923      	ldr	r3, [r4, #16]
1a002ec6:	b183      	cbz	r3, 1a002eea <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002ec8:	68e2      	ldr	r2, [r4, #12]
1a002eca:	b10a      	cbz	r2, 1a002ed0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002ecc:	3a01      	subs	r2, #1
1a002ece:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002ed0:	3b01      	subs	r3, #1
1a002ed2:	6123      	str	r3, [r4, #16]
	return 0;
1a002ed4:	2000      	movs	r0, #0
}
1a002ed6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002edc:	e7fb      	b.n	1a002ed6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ee2:	e7f8      	b.n	1a002ed6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ee8:	e7f5      	b.n	1a002ed6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002eee:	e7f2      	b.n	1a002ed6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002ef0:	ff6b3a10 	.word	0xff6b3a10
1a002ef4:	0b940510 	.word	0x0b940510
1a002ef8:	094c5eff 	.word	0x094c5eff

1a002efc <Chip_Clock_GetMainPLLHz>:
{
1a002efc:	b530      	push	{r4, r5, lr}
1a002efe:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002f00:	4d17      	ldr	r5, [pc, #92]	; (1a002f60 <Chip_Clock_GetMainPLLHz+0x64>)
1a002f02:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002f04:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002f08:	f7ff ff5c 	bl	1a002dc4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002f0c:	4b15      	ldr	r3, [pc, #84]	; (1a002f64 <Chip_Clock_GetMainPLLHz+0x68>)
1a002f0e:	681b      	ldr	r3, [r3, #0]
1a002f10:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002f12:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002f14:	f013 0f01 	tst.w	r3, #1
1a002f18:	d01f      	beq.n	1a002f5a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002f1a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002f1e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002f22:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002f26:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002f2a:	3301      	adds	r3, #1
	n = nsel + 1;
1a002f2c:	3201      	adds	r2, #1
	p = ptab[psel];
1a002f2e:	f10d 0c08 	add.w	ip, sp, #8
1a002f32:	4461      	add	r1, ip
1a002f34:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002f38:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002f3c:	d108      	bne.n	1a002f50 <Chip_Clock_GetMainPLLHz+0x54>
1a002f3e:	b93d      	cbnz	r5, 1a002f50 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002f40:	0049      	lsls	r1, r1, #1
1a002f42:	fbb3 f3f1 	udiv	r3, r3, r1
1a002f46:	fbb0 f0f2 	udiv	r0, r0, r2
1a002f4a:	fb00 f003 	mul.w	r0, r0, r3
1a002f4e:	e005      	b.n	1a002f5c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002f50:	fbb0 f0f2 	udiv	r0, r0, r2
1a002f54:	fb03 f000 	mul.w	r0, r3, r0
1a002f58:	e000      	b.n	1a002f5c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002f5a:	2000      	movs	r0, #0
}
1a002f5c:	b003      	add	sp, #12
1a002f5e:	bd30      	pop	{r4, r5, pc}
1a002f60:	40050000 	.word	0x40050000
1a002f64:	1a004a8c 	.word	0x1a004a8c

1a002f68 <Chip_Clock_GetDivRate>:
{
1a002f68:	b538      	push	{r3, r4, r5, lr}
1a002f6a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002f6c:	4608      	mov	r0, r1
1a002f6e:	f7ff ff0d 	bl	1a002d8c <Chip_Clock_GetDividerSource>
1a002f72:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002f74:	4620      	mov	r0, r4
1a002f76:	f7ff ff17 	bl	1a002da8 <Chip_Clock_GetDividerDivisor>
1a002f7a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002f7c:	4628      	mov	r0, r5
1a002f7e:	f7ff ff21 	bl	1a002dc4 <Chip_Clock_GetClockInputHz>
1a002f82:	3401      	adds	r4, #1
}
1a002f84:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f88:	bd38      	pop	{r3, r4, r5, pc}
1a002f8a:	Address 0x000000001a002f8a is out of bounds.


1a002f8c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002f8c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f8e:	f100 0416 	add.w	r4, r0, #22
1a002f92:	00a4      	lsls	r4, r4, #2
1a002f94:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002f98:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002f9c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002f9e:	281b      	cmp	r0, #27
1a002fa0:	d813      	bhi.n	1a002fca <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002fa2:	2911      	cmp	r1, #17
1a002fa4:	d01a      	beq.n	1a002fdc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002fa6:	4d0e      	ldr	r5, [pc, #56]	; (1a002fe0 <Chip_Clock_SetBaseClock+0x54>)
1a002fa8:	4025      	ands	r5, r4

			if (autoblocken) {
1a002faa:	b10a      	cbz	r2, 1a002fb0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002fac:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002fb0:	b10b      	cbz	r3, 1a002fb6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002fb2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002fb6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002fba:	3016      	adds	r0, #22
1a002fbc:	0080      	lsls	r0, r0, #2
1a002fbe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002fc2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fc6:	6045      	str	r5, [r0, #4]
1a002fc8:	e008      	b.n	1a002fdc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002fca:	f044 0401 	orr.w	r4, r4, #1
1a002fce:	3016      	adds	r0, #22
1a002fd0:	0080      	lsls	r0, r0, #2
1a002fd2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002fd6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fda:	6044      	str	r4, [r0, #4]
	}
}
1a002fdc:	bc30      	pop	{r4, r5}
1a002fde:	4770      	bx	lr
1a002fe0:	e0fff7fe 	.word	0xe0fff7fe

1a002fe4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002fe4:	281b      	cmp	r0, #27
1a002fe6:	d80c      	bhi.n	1a003002 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002fe8:	3016      	adds	r0, #22
1a002fea:	0080      	lsls	r0, r0, #2
1a002fec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002ff0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002ff4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002ff6:	f010 0f01 	tst.w	r0, #1
1a002ffa:	d104      	bne.n	1a003006 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ffc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003000:	4770      	bx	lr
		return CLKINPUT_PD;
1a003002:	2011      	movs	r0, #17
1a003004:	4770      	bx	lr
		return CLKINPUT_PD;
1a003006:	2011      	movs	r0, #17
}
1a003008:	4770      	bx	lr

1a00300a <Chip_Clock_GetBaseClocktHz>:
{
1a00300a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00300c:	f7ff ffea 	bl	1a002fe4 <Chip_Clock_GetBaseClock>
1a003010:	f7ff fed8 	bl	1a002dc4 <Chip_Clock_GetClockInputHz>
}
1a003014:	bd08      	pop	{r3, pc}
1a003016:	Address 0x000000001a003016 is out of bounds.


1a003018 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003018:	b969      	cbnz	r1, 1a003036 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00301a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00301c:	b10a      	cbz	r2, 1a003022 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00301e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003022:	2b02      	cmp	r3, #2
1a003024:	d009      	beq.n	1a00303a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003026:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00302a:	d209      	bcs.n	1a003040 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00302c:	3020      	adds	r0, #32
1a00302e:	4b07      	ldr	r3, [pc, #28]	; (1a00304c <Chip_Clock_EnableOpts+0x34>)
1a003030:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003034:	4770      	bx	lr
		reg |= (1 << 1);
1a003036:	2103      	movs	r1, #3
1a003038:	e7f0      	b.n	1a00301c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00303a:	f041 0120 	orr.w	r1, r1, #32
1a00303e:	e7f2      	b.n	1a003026 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003040:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003044:	4b02      	ldr	r3, [pc, #8]	; (1a003050 <Chip_Clock_EnableOpts+0x38>)
1a003046:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00304a:	4770      	bx	lr
1a00304c:	40051000 	.word	0x40051000
1a003050:	40052000 	.word	0x40052000

1a003054 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003054:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003058:	d208      	bcs.n	1a00306c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00305a:	4a09      	ldr	r2, [pc, #36]	; (1a003080 <Chip_Clock_Enable+0x2c>)
1a00305c:	3020      	adds	r0, #32
1a00305e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003062:	f043 0301 	orr.w	r3, r3, #1
1a003066:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00306a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00306c:	4a05      	ldr	r2, [pc, #20]	; (1a003084 <Chip_Clock_Enable+0x30>)
1a00306e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003072:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003076:	f043 0301 	orr.w	r3, r3, #1
1a00307a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00307e:	4770      	bx	lr
1a003080:	40051000 	.word	0x40051000
1a003084:	40052000 	.word	0x40052000

1a003088 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003088:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00308a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00308e:	d309      	bcc.n	1a0030a4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003090:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003094:	4a0d      	ldr	r2, [pc, #52]	; (1a0030cc <Chip_Clock_GetRate+0x44>)
1a003096:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00309a:	f014 0f01 	tst.w	r4, #1
1a00309e:	d107      	bne.n	1a0030b0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0030a0:	2000      	movs	r0, #0
	}

	return rate;
}
1a0030a2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0030a4:	f100 0320 	add.w	r3, r0, #32
1a0030a8:	4a09      	ldr	r2, [pc, #36]	; (1a0030d0 <Chip_Clock_GetRate+0x48>)
1a0030aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0030ae:	e7f4      	b.n	1a00309a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0030b0:	f7ff fe20 	bl	1a002cf4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0030b4:	f7ff ffa9 	bl	1a00300a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0030b8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0030bc:	d103      	bne.n	1a0030c6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0030be:	2301      	movs	r3, #1
		rate = rate / div;
1a0030c0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0030c4:	e7ed      	b.n	1a0030a2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0030c6:	2302      	movs	r3, #2
1a0030c8:	e7fa      	b.n	1a0030c0 <Chip_Clock_GetRate+0x38>
1a0030ca:	bf00      	nop
1a0030cc:	40052000 	.word	0x40052000
1a0030d0:	40051000 	.word	0x40051000

1a0030d4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0030d4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0030d6:	2069      	movs	r0, #105	; 0x69
1a0030d8:	f7ff ffd6 	bl	1a003088 <Chip_Clock_GetRate>
1a0030dc:	4b01      	ldr	r3, [pc, #4]	; (1a0030e4 <SystemCoreClockUpdate+0x10>)
1a0030de:	6018      	str	r0, [r3, #0]
}
1a0030e0:	bd08      	pop	{r3, pc}
1a0030e2:	bf00      	nop
1a0030e4:	10002b54 	.word	0x10002b54

1a0030e8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0030e8:	4770      	bx	lr
1a0030ea:	Address 0x000000001a0030ea is out of bounds.


1a0030ec <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0030ec:	b570      	push	{r4, r5, r6, lr}
1a0030ee:	b08a      	sub	sp, #40	; 0x28
1a0030f0:	4605      	mov	r5, r0
1a0030f2:	460e      	mov	r6, r1
1a0030f4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0030f6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0030fa:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0030fc:	2806      	cmp	r0, #6
1a0030fe:	d018      	beq.n	1a003132 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003100:	2300      	movs	r3, #0
1a003102:	2201      	movs	r2, #1
1a003104:	4629      	mov	r1, r5
1a003106:	2004      	movs	r0, #4
1a003108:	f7ff ff40 	bl	1a002f8c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00310c:	4a49      	ldr	r2, [pc, #292]	; (1a003234 <Chip_SetupCoreClock+0x148>)
1a00310e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003110:	f043 0301 	orr.w	r3, r3, #1
1a003114:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003116:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00311a:	a901      	add	r1, sp, #4
1a00311c:	4630      	mov	r0, r6
1a00311e:	f7ff fead 	bl	1a002e7c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003122:	4b45      	ldr	r3, [pc, #276]	; (1a003238 <Chip_SetupCoreClock+0x14c>)
1a003124:	429e      	cmp	r6, r3
1a003126:	d916      	bls.n	1a003156 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003128:	9b01      	ldr	r3, [sp, #4]
1a00312a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00312e:	d003      	beq.n	1a003138 <Chip_SetupCoreClock+0x4c>
1a003130:	e7fe      	b.n	1a003130 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003132:	f7ff fe05 	bl	1a002d40 <Chip_Clock_EnableCrystal>
1a003136:	e7e3      	b.n	1a003100 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003138:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00313c:	d005      	beq.n	1a00314a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00313e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003142:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003144:	2500      	movs	r5, #0
			direct = 1;
1a003146:	2601      	movs	r6, #1
1a003148:	e007      	b.n	1a00315a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00314a:	9b04      	ldr	r3, [sp, #16]
1a00314c:	3301      	adds	r3, #1
1a00314e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003150:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003152:	2600      	movs	r6, #0
1a003154:	e001      	b.n	1a00315a <Chip_SetupCoreClock+0x6e>
1a003156:	2500      	movs	r5, #0
1a003158:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00315a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00315e:	9b01      	ldr	r3, [sp, #4]
1a003160:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003164:	9a05      	ldr	r2, [sp, #20]
1a003166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00316a:	9a03      	ldr	r2, [sp, #12]
1a00316c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003170:	9a04      	ldr	r2, [sp, #16]
1a003172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00317a:	4a2e      	ldr	r2, [pc, #184]	; (1a003234 <Chip_SetupCoreClock+0x148>)
1a00317c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00317e:	4b2d      	ldr	r3, [pc, #180]	; (1a003234 <Chip_SetupCoreClock+0x148>)
1a003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003182:	f013 0f01 	tst.w	r3, #1
1a003186:	d0fa      	beq.n	1a00317e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003188:	2300      	movs	r3, #0
1a00318a:	2201      	movs	r2, #1
1a00318c:	2109      	movs	r1, #9
1a00318e:	2004      	movs	r0, #4
1a003190:	f7ff fefc 	bl	1a002f8c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003194:	b1fe      	cbz	r6, 1a0031d6 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003196:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00319a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00319c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00319e:	1e5a      	subs	r2, r3, #1
1a0031a0:	9209      	str	r2, [sp, #36]	; 0x24
1a0031a2:	2b00      	cmp	r3, #0
1a0031a4:	d1fa      	bne.n	1a00319c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0031a6:	9b01      	ldr	r3, [sp, #4]
1a0031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0031ac:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0031ae:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0031b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0031b6:	9a05      	ldr	r2, [sp, #20]
1a0031b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0031bc:	9a03      	ldr	r2, [sp, #12]
1a0031be:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0031c2:	9a04      	ldr	r2, [sp, #16]
1a0031c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0031c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0031cc:	4a19      	ldr	r2, [pc, #100]	; (1a003234 <Chip_SetupCoreClock+0x148>)
1a0031ce:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0031d0:	b36c      	cbz	r4, 1a00322e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0031d2:	2400      	movs	r4, #0
1a0031d4:	e029      	b.n	1a00322a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0031d6:	2d00      	cmp	r5, #0
1a0031d8:	d0fa      	beq.n	1a0031d0 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0031da:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0031de:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0031e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0031e2:	1e5a      	subs	r2, r3, #1
1a0031e4:	9209      	str	r2, [sp, #36]	; 0x24
1a0031e6:	2b00      	cmp	r3, #0
1a0031e8:	d1fa      	bne.n	1a0031e0 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0031ea:	9b04      	ldr	r3, [sp, #16]
1a0031ec:	1e5a      	subs	r2, r3, #1
1a0031ee:	9204      	str	r2, [sp, #16]
1a0031f0:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0031f4:	9b01      	ldr	r3, [sp, #4]
1a0031f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0031fa:	9905      	ldr	r1, [sp, #20]
1a0031fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003200:	9903      	ldr	r1, [sp, #12]
1a003202:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00320a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00320e:	4a09      	ldr	r2, [pc, #36]	; (1a003234 <Chip_SetupCoreClock+0x148>)
1a003210:	6453      	str	r3, [r2, #68]	; 0x44
1a003212:	e7dd      	b.n	1a0031d0 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003214:	4809      	ldr	r0, [pc, #36]	; (1a00323c <Chip_SetupCoreClock+0x150>)
1a003216:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00321a:	78cb      	ldrb	r3, [r1, #3]
1a00321c:	788a      	ldrb	r2, [r1, #2]
1a00321e:	7849      	ldrb	r1, [r1, #1]
1a003220:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003224:	f7ff feb2 	bl	1a002f8c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003228:	3401      	adds	r4, #1
1a00322a:	2c11      	cmp	r4, #17
1a00322c:	d9f2      	bls.n	1a003214 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00322e:	b00a      	add	sp, #40	; 0x28
1a003230:	bd70      	pop	{r4, r5, r6, pc}
1a003232:	bf00      	nop
1a003234:	40050000 	.word	0x40050000
1a003238:	068e7780 	.word	0x068e7780
1a00323c:	1a004b04 	.word	0x1a004b04

1a003240 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003240:	2901      	cmp	r1, #1
1a003242:	d000      	beq.n	1a003246 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003244:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003246:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00324a:	0082      	lsls	r2, r0, #2
1a00324c:	4b03      	ldr	r3, [pc, #12]	; (1a00325c <Chip_I2C_EventHandler+0x1c>)
1a00324e:	4413      	add	r3, r2
1a003250:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003252:	7d13      	ldrb	r3, [r2, #20]
1a003254:	b2db      	uxtb	r3, r3
1a003256:	2b04      	cmp	r3, #4
1a003258:	d0fb      	beq.n	1a003252 <Chip_I2C_EventHandler+0x12>
1a00325a:	e7f3      	b.n	1a003244 <Chip_I2C_EventHandler+0x4>
1a00325c:	10000004 	.word	0x10000004

1a003260 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003260:	b570      	push	{r4, r5, r6, lr}
1a003262:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003264:	4e06      	ldr	r6, [pc, #24]	; (1a003280 <Chip_I2C_Init+0x20>)
1a003266:	00c4      	lsls	r4, r0, #3
1a003268:	1a22      	subs	r2, r4, r0
1a00326a:	0093      	lsls	r3, r2, #2
1a00326c:	4433      	add	r3, r6
1a00326e:	8898      	ldrh	r0, [r3, #4]
1a003270:	f7ff fef0 	bl	1a003054 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003274:	1b64      	subs	r4, r4, r5
1a003276:	00a3      	lsls	r3, r4, #2
1a003278:	58f3      	ldr	r3, [r6, r3]
1a00327a:	226c      	movs	r2, #108	; 0x6c
1a00327c:	619a      	str	r2, [r3, #24]
}
1a00327e:	bd70      	pop	{r4, r5, r6, pc}
1a003280:	10000004 	.word	0x10000004

1a003284 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003288:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00328a:	4e0b      	ldr	r6, [pc, #44]	; (1a0032b8 <Chip_I2C_SetClockRate+0x34>)
1a00328c:	00c5      	lsls	r5, r0, #3
1a00328e:	1a2b      	subs	r3, r5, r0
1a003290:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003294:	eb06 0308 	add.w	r3, r6, r8
1a003298:	8898      	ldrh	r0, [r3, #4]
1a00329a:	f7ff fef5 	bl	1a003088 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00329e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0032a2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0032a6:	0842      	lsrs	r2, r0, #1
1a0032a8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0032aa:	f856 3008 	ldr.w	r3, [r6, r8]
1a0032ae:	691a      	ldr	r2, [r3, #16]
1a0032b0:	1a80      	subs	r0, r0, r2
1a0032b2:	6158      	str	r0, [r3, #20]
}
1a0032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0032b8:	10000004 	.word	0x10000004

1a0032bc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0032bc:	4b03      	ldr	r3, [pc, #12]	; (1a0032cc <Chip_SSP_GetClockIndex+0x10>)
1a0032be:	4298      	cmp	r0, r3
1a0032c0:	d001      	beq.n	1a0032c6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0032c2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0032c4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0032c6:	20a5      	movs	r0, #165	; 0xa5
1a0032c8:	4770      	bx	lr
1a0032ca:	bf00      	nop
1a0032cc:	400c5000 	.word	0x400c5000

1a0032d0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0032d0:	4b04      	ldr	r3, [pc, #16]	; (1a0032e4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0032d2:	4298      	cmp	r0, r3
1a0032d4:	d002      	beq.n	1a0032dc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0032d6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0032da:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0032dc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0032e0:	4770      	bx	lr
1a0032e2:	bf00      	nop
1a0032e4:	400c5000 	.word	0x400c5000

1a0032e8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0032e8:	6803      	ldr	r3, [r0, #0]
1a0032ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0032ee:	0209      	lsls	r1, r1, #8
1a0032f0:	b289      	uxth	r1, r1
1a0032f2:	4319      	orrs	r1, r3
1a0032f4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0032f6:	6102      	str	r2, [r0, #16]
}
1a0032f8:	4770      	bx	lr

1a0032fa <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0032fa:	b570      	push	{r4, r5, r6, lr}
1a0032fc:	4606      	mov	r6, r0
1a0032fe:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003300:	f7ff ffe6 	bl	1a0032d0 <Chip_SSP_GetPeriphClockIndex>
1a003304:	f7ff fec0 	bl	1a003088 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003308:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00330a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00330e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003310:	e000      	b.n	1a003314 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003312:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003314:	42ab      	cmp	r3, r5
1a003316:	d90b      	bls.n	1a003330 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003318:	1c4c      	adds	r4, r1, #1
1a00331a:	fb02 f304 	mul.w	r3, r2, r4
1a00331e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003322:	429d      	cmp	r5, r3
1a003324:	d2f6      	bcs.n	1a003314 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003326:	2cff      	cmp	r4, #255	; 0xff
1a003328:	d9f3      	bls.n	1a003312 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00332a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00332c:	2100      	movs	r1, #0
1a00332e:	e7f1      	b.n	1a003314 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003330:	4630      	mov	r0, r6
1a003332:	f7ff ffd9 	bl	1a0032e8 <Chip_SSP_SetClockRate>
}
1a003336:	bd70      	pop	{r4, r5, r6, pc}

1a003338 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003338:	b510      	push	{r4, lr}
1a00333a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00333c:	f7ff ffbe 	bl	1a0032bc <Chip_SSP_GetClockIndex>
1a003340:	f7ff fe88 	bl	1a003054 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003344:	4620      	mov	r0, r4
1a003346:	f7ff ffc3 	bl	1a0032d0 <Chip_SSP_GetPeriphClockIndex>
1a00334a:	f7ff fe83 	bl	1a003054 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00334e:	6863      	ldr	r3, [r4, #4]
1a003350:	f023 0304 	bic.w	r3, r3, #4
1a003354:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003356:	6823      	ldr	r3, [r4, #0]
1a003358:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00335c:	f043 0307 	orr.w	r3, r3, #7
1a003360:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003362:	4902      	ldr	r1, [pc, #8]	; (1a00336c <Chip_SSP_Init+0x34>)
1a003364:	4620      	mov	r0, r4
1a003366:	f7ff ffc8 	bl	1a0032fa <Chip_SSP_SetBitRate>
}
1a00336a:	bd10      	pop	{r4, pc}
1a00336c:	000186a0 	.word	0x000186a0

1a003370 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003370:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003372:	4a0b      	ldr	r2, [pc, #44]	; (1a0033a0 <SystemInit+0x30>)
1a003374:	4b0b      	ldr	r3, [pc, #44]	; (1a0033a4 <SystemInit+0x34>)
1a003376:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003378:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00337c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00337e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003382:	2b20      	cmp	r3, #32
1a003384:	d004      	beq.n	1a003390 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003386:	f7ff fabf 	bl	1a002908 <Board_SystemInit>
   Board_Init();
1a00338a:	f7ff fa45 	bl	1a002818 <Board_Init>
}
1a00338e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003390:	4a04      	ldr	r2, [pc, #16]	; (1a0033a4 <SystemInit+0x34>)
1a003392:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00339a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00339e:	e7f2      	b.n	1a003386 <SystemInit+0x16>
1a0033a0:	1a000000 	.word	0x1a000000
1a0033a4:	e000ed00 	.word	0xe000ed00

1a0033a8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0033a8:	4b04      	ldr	r3, [pc, #16]	; (1a0033bc <cyclesCounterInit+0x14>)
1a0033aa:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0033ac:	4a04      	ldr	r2, [pc, #16]	; (1a0033c0 <cyclesCounterInit+0x18>)
1a0033ae:	6813      	ldr	r3, [r2, #0]
1a0033b0:	f043 0301 	orr.w	r3, r3, #1
1a0033b4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0033b6:	2001      	movs	r0, #1
1a0033b8:	4770      	bx	lr
1a0033ba:	bf00      	nop
1a0033bc:	1000003c 	.word	0x1000003c
1a0033c0:	e0001000 	.word	0xe0001000

1a0033c4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0033c4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0033c6:	4d0b      	ldr	r5, [pc, #44]	; (1a0033f4 <gpioObtainPinInit+0x30>)
1a0033c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0033cc:	182c      	adds	r4, r5, r0
1a0033ce:	5628      	ldrsb	r0, [r5, r0]
1a0033d0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0033d2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0033d6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0033d8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0033dc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0033de:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0033e2:	9b02      	ldr	r3, [sp, #8]
1a0033e4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0033e6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0033ea:	9b03      	ldr	r3, [sp, #12]
1a0033ec:	701a      	strb	r2, [r3, #0]
}
1a0033ee:	bc30      	pop	{r4, r5}
1a0033f0:	4770      	bx	lr
1a0033f2:	bf00      	nop
1a0033f4:	1a004b4c 	.word	0x1a004b4c

1a0033f8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0033f8:	f110 0f02 	cmn.w	r0, #2
1a0033fc:	f000 80c7 	beq.w	1a00358e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003400:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003404:	f000 80c5 	beq.w	1a003592 <gpioInit+0x19a>
{
1a003408:	b570      	push	{r4, r5, r6, lr}
1a00340a:	b084      	sub	sp, #16
1a00340c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00340e:	2300      	movs	r3, #0
1a003410:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003414:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003418:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00341c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003420:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003424:	f10d 030b 	add.w	r3, sp, #11
1a003428:	9301      	str	r3, [sp, #4]
1a00342a:	ab03      	add	r3, sp, #12
1a00342c:	9300      	str	r3, [sp, #0]
1a00342e:	f10d 030d 	add.w	r3, sp, #13
1a003432:	f10d 020e 	add.w	r2, sp, #14
1a003436:	f10d 010f 	add.w	r1, sp, #15
1a00343a:	f7ff ffc3 	bl	1a0033c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00343e:	2c05      	cmp	r4, #5
1a003440:	f200 80a9 	bhi.w	1a003596 <gpioInit+0x19e>
1a003444:	e8df f004 	tbb	[pc, r4]
1a003448:	45278109 	.word	0x45278109
1a00344c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00344e:	4853      	ldr	r0, [pc, #332]	; (1a00359c <gpioInit+0x1a4>)
1a003450:	f7ff fe4a 	bl	1a0030e8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003454:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003456:	b004      	add	sp, #16
1a003458:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00345a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00345e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003462:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003466:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00346a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00346e:	494c      	ldr	r1, [pc, #304]	; (1a0035a0 <gpioInit+0x1a8>)
1a003470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003474:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003478:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00347c:	2001      	movs	r0, #1
1a00347e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003482:	4c46      	ldr	r4, [pc, #280]	; (1a00359c <gpioInit+0x1a4>)
1a003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003488:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00348c:	ea22 0201 	bic.w	r2, r2, r1
1a003490:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003494:	e7df      	b.n	1a003456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003496:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00349a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00349e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034a2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0034a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034aa:	493d      	ldr	r1, [pc, #244]	; (1a0035a0 <gpioInit+0x1a8>)
1a0034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0034b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0034b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0034b8:	2001      	movs	r0, #1
1a0034ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0034be:	4c37      	ldr	r4, [pc, #220]	; (1a00359c <gpioInit+0x1a4>)
1a0034c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0034c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0034c8:	ea22 0201 	bic.w	r2, r2, r1
1a0034cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0034d0:	e7c1      	b.n	1a003456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0034d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0034d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0034da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034de:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0034e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034e6:	492e      	ldr	r1, [pc, #184]	; (1a0035a0 <gpioInit+0x1a8>)
1a0034e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0034ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0034f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0034f4:	2001      	movs	r0, #1
1a0034f6:	fa00 f102 	lsl.w	r1, r0, r2
1a0034fa:	4c28      	ldr	r4, [pc, #160]	; (1a00359c <gpioInit+0x1a4>)
1a0034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003500:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003504:	ea22 0201 	bic.w	r2, r2, r1
1a003508:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00350c:	e7a3      	b.n	1a003456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00350e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003512:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003516:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00351a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00351e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003522:	491f      	ldr	r1, [pc, #124]	; (1a0035a0 <gpioInit+0x1a8>)
1a003524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003528:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00352c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003530:	2001      	movs	r0, #1
1a003532:	fa00 f102 	lsl.w	r1, r0, r2
1a003536:	4c19      	ldr	r4, [pc, #100]	; (1a00359c <gpioInit+0x1a4>)
1a003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00353c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003540:	ea22 0201 	bic.w	r2, r2, r1
1a003544:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003548:	e785      	b.n	1a003456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00354a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00354e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003552:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003556:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00355a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00355e:	4910      	ldr	r1, [pc, #64]	; (1a0035a0 <gpioInit+0x1a8>)
1a003560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003564:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003568:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00356c:	2001      	movs	r0, #1
1a00356e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003572:	4b0a      	ldr	r3, [pc, #40]	; (1a00359c <gpioInit+0x1a4>)
1a003574:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003578:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00357c:	4331      	orrs	r1, r6
1a00357e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003582:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003584:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003588:	2100      	movs	r1, #0
1a00358a:	5499      	strb	r1, [r3, r2]
1a00358c:	e763      	b.n	1a003456 <gpioInit+0x5e>
	  return FALSE;
1a00358e:	2000      	movs	r0, #0
1a003590:	4770      	bx	lr
	  return FALSE;
1a003592:	2000      	movs	r0, #0
}
1a003594:	4770      	bx	lr
      ret_val = 0;
1a003596:	2000      	movs	r0, #0
1a003598:	e75d      	b.n	1a003456 <gpioInit+0x5e>
1a00359a:	bf00      	nop
1a00359c:	400f4000 	.word	0x400f4000
1a0035a0:	40086000 	.word	0x40086000

1a0035a4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0035a4:	f110 0f02 	cmn.w	r0, #2
1a0035a8:	d02d      	beq.n	1a003606 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0035aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0035ae:	d02c      	beq.n	1a00360a <gpioWrite+0x66>
{
1a0035b0:	b510      	push	{r4, lr}
1a0035b2:	b084      	sub	sp, #16
1a0035b4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0035b6:	2300      	movs	r3, #0
1a0035b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0035bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0035c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0035c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0035c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0035cc:	f10d 030b 	add.w	r3, sp, #11
1a0035d0:	9301      	str	r3, [sp, #4]
1a0035d2:	ab03      	add	r3, sp, #12
1a0035d4:	9300      	str	r3, [sp, #0]
1a0035d6:	f10d 030d 	add.w	r3, sp, #13
1a0035da:	f10d 020e 	add.w	r2, sp, #14
1a0035de:	f10d 010f 	add.w	r1, sp, #15
1a0035e2:	f7ff feef 	bl	1a0033c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0035e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0035ee:	1c21      	adds	r1, r4, #0
1a0035f0:	bf18      	it	ne
1a0035f2:	2101      	movne	r1, #1
1a0035f4:	015b      	lsls	r3, r3, #5
1a0035f6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0035fa:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0035fe:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003600:	2001      	movs	r0, #1
}
1a003602:	b004      	add	sp, #16
1a003604:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003606:	2000      	movs	r0, #0
1a003608:	4770      	bx	lr
	  return FALSE;
1a00360a:	2000      	movs	r0, #0
}
1a00360c:	4770      	bx	lr

1a00360e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00360e:	f110 0f02 	cmn.w	r0, #2
1a003612:	d02c      	beq.n	1a00366e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003614:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003618:	d02b      	beq.n	1a003672 <gpioRead+0x64>
{
1a00361a:	b500      	push	{lr}
1a00361c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00361e:	2300      	movs	r3, #0
1a003620:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003624:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003628:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00362c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003630:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003634:	f10d 030b 	add.w	r3, sp, #11
1a003638:	9301      	str	r3, [sp, #4]
1a00363a:	ab03      	add	r3, sp, #12
1a00363c:	9300      	str	r3, [sp, #0]
1a00363e:	f10d 030d 	add.w	r3, sp, #13
1a003642:	f10d 020e 	add.w	r2, sp, #14
1a003646:	f10d 010f 	add.w	r1, sp, #15
1a00364a:	f7ff febb 	bl	1a0033c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00364e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003652:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003656:	015b      	lsls	r3, r3, #5
1a003658:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00365c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003660:	5c98      	ldrb	r0, [r3, r2]
1a003662:	3000      	adds	r0, #0
1a003664:	bf18      	it	ne
1a003666:	2001      	movne	r0, #1

   return ret_val;
}
1a003668:	b005      	add	sp, #20
1a00366a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00366e:	2001      	movs	r0, #1
1a003670:	4770      	bx	lr
      return FALSE;
1a003672:	2000      	movs	r0, #0
}
1a003674:	4770      	bx	lr
1a003676:	Address 0x000000001a003676 is out of bounds.


1a003678 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003678:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00367a:	4b04      	ldr	r3, [pc, #16]	; (1a00368c <USB0_IRQHandler+0x14>)
1a00367c:	681b      	ldr	r3, [r3, #0]
1a00367e:	681b      	ldr	r3, [r3, #0]
1a003680:	68db      	ldr	r3, [r3, #12]
1a003682:	4a03      	ldr	r2, [pc, #12]	; (1a003690 <USB0_IRQHandler+0x18>)
1a003684:	6810      	ldr	r0, [r2, #0]
1a003686:	4798      	blx	r3
}
1a003688:	bd08      	pop	{r3, pc}
1a00368a:	bf00      	nop
1a00368c:	10002b58 	.word	0x10002b58
1a003690:	10002af0 	.word	0x10002af0

1a003694 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003694:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003696:	f7ff fd1d 	bl	1a0030d4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00369a:	4b18      	ldr	r3, [pc, #96]	; (1a0036fc <boardInit+0x68>)
1a00369c:	6818      	ldr	r0, [r3, #0]
1a00369e:	f7ff fe83 	bl	1a0033a8 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0036a2:	2105      	movs	r1, #5
1a0036a4:	2000      	movs	r0, #0
1a0036a6:	f7ff fea7 	bl	1a0033f8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0036aa:	2100      	movs	r1, #0
1a0036ac:	2024      	movs	r0, #36	; 0x24
1a0036ae:	f7ff fea3 	bl	1a0033f8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0036b2:	2100      	movs	r1, #0
1a0036b4:	2025      	movs	r0, #37	; 0x25
1a0036b6:	f7ff fe9f 	bl	1a0033f8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0036ba:	2100      	movs	r1, #0
1a0036bc:	2026      	movs	r0, #38	; 0x26
1a0036be:	f7ff fe9b 	bl	1a0033f8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0036c2:	2100      	movs	r1, #0
1a0036c4:	2027      	movs	r0, #39	; 0x27
1a0036c6:	f7ff fe97 	bl	1a0033f8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0036ca:	2101      	movs	r1, #1
1a0036cc:	2028      	movs	r0, #40	; 0x28
1a0036ce:	f7ff fe93 	bl	1a0033f8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0036d2:	2101      	movs	r1, #1
1a0036d4:	2029      	movs	r0, #41	; 0x29
1a0036d6:	f7ff fe8f 	bl	1a0033f8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0036da:	2101      	movs	r1, #1
1a0036dc:	202a      	movs	r0, #42	; 0x2a
1a0036de:	f7ff fe8b 	bl	1a0033f8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0036e2:	2101      	movs	r1, #1
1a0036e4:	202b      	movs	r0, #43	; 0x2b
1a0036e6:	f7ff fe87 	bl	1a0033f8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0036ea:	2101      	movs	r1, #1
1a0036ec:	202c      	movs	r0, #44	; 0x2c
1a0036ee:	f7ff fe83 	bl	1a0033f8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0036f2:	2101      	movs	r1, #1
1a0036f4:	202d      	movs	r0, #45	; 0x2d
1a0036f6:	f7ff fe7f 	bl	1a0033f8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0036fa:	bd08      	pop	{r3, pc}
1a0036fc:	10002b54 	.word	0x10002b54

1a003700 <__aeabi_uldivmod>:
1a003700:	b953      	cbnz	r3, 1a003718 <__aeabi_uldivmod+0x18>
1a003702:	b94a      	cbnz	r2, 1a003718 <__aeabi_uldivmod+0x18>
1a003704:	2900      	cmp	r1, #0
1a003706:	bf08      	it	eq
1a003708:	2800      	cmpeq	r0, #0
1a00370a:	bf1c      	itt	ne
1a00370c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003710:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003714:	f000 b972 	b.w	1a0039fc <__aeabi_idiv0>
1a003718:	f1ad 0c08 	sub.w	ip, sp, #8
1a00371c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003720:	f000 f806 	bl	1a003730 <__udivmoddi4>
1a003724:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00372c:	b004      	add	sp, #16
1a00372e:	4770      	bx	lr

1a003730 <__udivmoddi4>:
1a003730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003734:	9e08      	ldr	r6, [sp, #32]
1a003736:	4604      	mov	r4, r0
1a003738:	4688      	mov	r8, r1
1a00373a:	2b00      	cmp	r3, #0
1a00373c:	d14b      	bne.n	1a0037d6 <__udivmoddi4+0xa6>
1a00373e:	428a      	cmp	r2, r1
1a003740:	4615      	mov	r5, r2
1a003742:	d967      	bls.n	1a003814 <__udivmoddi4+0xe4>
1a003744:	fab2 f282 	clz	r2, r2
1a003748:	b14a      	cbz	r2, 1a00375e <__udivmoddi4+0x2e>
1a00374a:	f1c2 0720 	rsb	r7, r2, #32
1a00374e:	fa01 f302 	lsl.w	r3, r1, r2
1a003752:	fa20 f707 	lsr.w	r7, r0, r7
1a003756:	4095      	lsls	r5, r2
1a003758:	ea47 0803 	orr.w	r8, r7, r3
1a00375c:	4094      	lsls	r4, r2
1a00375e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003762:	0c23      	lsrs	r3, r4, #16
1a003764:	fbb8 f7fe 	udiv	r7, r8, lr
1a003768:	fa1f fc85 	uxth.w	ip, r5
1a00376c:	fb0e 8817 	mls	r8, lr, r7, r8
1a003770:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003774:	fb07 f10c 	mul.w	r1, r7, ip
1a003778:	4299      	cmp	r1, r3
1a00377a:	d909      	bls.n	1a003790 <__udivmoddi4+0x60>
1a00377c:	18eb      	adds	r3, r5, r3
1a00377e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003782:	f080 811b 	bcs.w	1a0039bc <__udivmoddi4+0x28c>
1a003786:	4299      	cmp	r1, r3
1a003788:	f240 8118 	bls.w	1a0039bc <__udivmoddi4+0x28c>
1a00378c:	3f02      	subs	r7, #2
1a00378e:	442b      	add	r3, r5
1a003790:	1a5b      	subs	r3, r3, r1
1a003792:	b2a4      	uxth	r4, r4
1a003794:	fbb3 f0fe 	udiv	r0, r3, lr
1a003798:	fb0e 3310 	mls	r3, lr, r0, r3
1a00379c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0037a0:	fb00 fc0c 	mul.w	ip, r0, ip
1a0037a4:	45a4      	cmp	ip, r4
1a0037a6:	d909      	bls.n	1a0037bc <__udivmoddi4+0x8c>
1a0037a8:	192c      	adds	r4, r5, r4
1a0037aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0037ae:	f080 8107 	bcs.w	1a0039c0 <__udivmoddi4+0x290>
1a0037b2:	45a4      	cmp	ip, r4
1a0037b4:	f240 8104 	bls.w	1a0039c0 <__udivmoddi4+0x290>
1a0037b8:	3802      	subs	r0, #2
1a0037ba:	442c      	add	r4, r5
1a0037bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0037c0:	eba4 040c 	sub.w	r4, r4, ip
1a0037c4:	2700      	movs	r7, #0
1a0037c6:	b11e      	cbz	r6, 1a0037d0 <__udivmoddi4+0xa0>
1a0037c8:	40d4      	lsrs	r4, r2
1a0037ca:	2300      	movs	r3, #0
1a0037cc:	e9c6 4300 	strd	r4, r3, [r6]
1a0037d0:	4639      	mov	r1, r7
1a0037d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0037d6:	428b      	cmp	r3, r1
1a0037d8:	d909      	bls.n	1a0037ee <__udivmoddi4+0xbe>
1a0037da:	2e00      	cmp	r6, #0
1a0037dc:	f000 80eb 	beq.w	1a0039b6 <__udivmoddi4+0x286>
1a0037e0:	2700      	movs	r7, #0
1a0037e2:	e9c6 0100 	strd	r0, r1, [r6]
1a0037e6:	4638      	mov	r0, r7
1a0037e8:	4639      	mov	r1, r7
1a0037ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0037ee:	fab3 f783 	clz	r7, r3
1a0037f2:	2f00      	cmp	r7, #0
1a0037f4:	d147      	bne.n	1a003886 <__udivmoddi4+0x156>
1a0037f6:	428b      	cmp	r3, r1
1a0037f8:	d302      	bcc.n	1a003800 <__udivmoddi4+0xd0>
1a0037fa:	4282      	cmp	r2, r0
1a0037fc:	f200 80fa 	bhi.w	1a0039f4 <__udivmoddi4+0x2c4>
1a003800:	1a84      	subs	r4, r0, r2
1a003802:	eb61 0303 	sbc.w	r3, r1, r3
1a003806:	2001      	movs	r0, #1
1a003808:	4698      	mov	r8, r3
1a00380a:	2e00      	cmp	r6, #0
1a00380c:	d0e0      	beq.n	1a0037d0 <__udivmoddi4+0xa0>
1a00380e:	e9c6 4800 	strd	r4, r8, [r6]
1a003812:	e7dd      	b.n	1a0037d0 <__udivmoddi4+0xa0>
1a003814:	b902      	cbnz	r2, 1a003818 <__udivmoddi4+0xe8>
1a003816:	deff      	udf	#255	; 0xff
1a003818:	fab2 f282 	clz	r2, r2
1a00381c:	2a00      	cmp	r2, #0
1a00381e:	f040 808f 	bne.w	1a003940 <__udivmoddi4+0x210>
1a003822:	1b49      	subs	r1, r1, r5
1a003824:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003828:	fa1f f885 	uxth.w	r8, r5
1a00382c:	2701      	movs	r7, #1
1a00382e:	fbb1 fcfe 	udiv	ip, r1, lr
1a003832:	0c23      	lsrs	r3, r4, #16
1a003834:	fb0e 111c 	mls	r1, lr, ip, r1
1a003838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00383c:	fb08 f10c 	mul.w	r1, r8, ip
1a003840:	4299      	cmp	r1, r3
1a003842:	d907      	bls.n	1a003854 <__udivmoddi4+0x124>
1a003844:	18eb      	adds	r3, r5, r3
1a003846:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00384a:	d202      	bcs.n	1a003852 <__udivmoddi4+0x122>
1a00384c:	4299      	cmp	r1, r3
1a00384e:	f200 80cd 	bhi.w	1a0039ec <__udivmoddi4+0x2bc>
1a003852:	4684      	mov	ip, r0
1a003854:	1a59      	subs	r1, r3, r1
1a003856:	b2a3      	uxth	r3, r4
1a003858:	fbb1 f0fe 	udiv	r0, r1, lr
1a00385c:	fb0e 1410 	mls	r4, lr, r0, r1
1a003860:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003864:	fb08 f800 	mul.w	r8, r8, r0
1a003868:	45a0      	cmp	r8, r4
1a00386a:	d907      	bls.n	1a00387c <__udivmoddi4+0x14c>
1a00386c:	192c      	adds	r4, r5, r4
1a00386e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003872:	d202      	bcs.n	1a00387a <__udivmoddi4+0x14a>
1a003874:	45a0      	cmp	r8, r4
1a003876:	f200 80b6 	bhi.w	1a0039e6 <__udivmoddi4+0x2b6>
1a00387a:	4618      	mov	r0, r3
1a00387c:	eba4 0408 	sub.w	r4, r4, r8
1a003880:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003884:	e79f      	b.n	1a0037c6 <__udivmoddi4+0x96>
1a003886:	f1c7 0c20 	rsb	ip, r7, #32
1a00388a:	40bb      	lsls	r3, r7
1a00388c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003890:	ea4e 0e03 	orr.w	lr, lr, r3
1a003894:	fa01 f407 	lsl.w	r4, r1, r7
1a003898:	fa20 f50c 	lsr.w	r5, r0, ip
1a00389c:	fa21 f30c 	lsr.w	r3, r1, ip
1a0038a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0038a4:	4325      	orrs	r5, r4
1a0038a6:	fbb3 f9f8 	udiv	r9, r3, r8
1a0038aa:	0c2c      	lsrs	r4, r5, #16
1a0038ac:	fb08 3319 	mls	r3, r8, r9, r3
1a0038b0:	fa1f fa8e 	uxth.w	sl, lr
1a0038b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0038b8:	fb09 f40a 	mul.w	r4, r9, sl
1a0038bc:	429c      	cmp	r4, r3
1a0038be:	fa02 f207 	lsl.w	r2, r2, r7
1a0038c2:	fa00 f107 	lsl.w	r1, r0, r7
1a0038c6:	d90b      	bls.n	1a0038e0 <__udivmoddi4+0x1b0>
1a0038c8:	eb1e 0303 	adds.w	r3, lr, r3
1a0038cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0038d0:	f080 8087 	bcs.w	1a0039e2 <__udivmoddi4+0x2b2>
1a0038d4:	429c      	cmp	r4, r3
1a0038d6:	f240 8084 	bls.w	1a0039e2 <__udivmoddi4+0x2b2>
1a0038da:	f1a9 0902 	sub.w	r9, r9, #2
1a0038de:	4473      	add	r3, lr
1a0038e0:	1b1b      	subs	r3, r3, r4
1a0038e2:	b2ad      	uxth	r5, r5
1a0038e4:	fbb3 f0f8 	udiv	r0, r3, r8
1a0038e8:	fb08 3310 	mls	r3, r8, r0, r3
1a0038ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0038f0:	fb00 fa0a 	mul.w	sl, r0, sl
1a0038f4:	45a2      	cmp	sl, r4
1a0038f6:	d908      	bls.n	1a00390a <__udivmoddi4+0x1da>
1a0038f8:	eb1e 0404 	adds.w	r4, lr, r4
1a0038fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003900:	d26b      	bcs.n	1a0039da <__udivmoddi4+0x2aa>
1a003902:	45a2      	cmp	sl, r4
1a003904:	d969      	bls.n	1a0039da <__udivmoddi4+0x2aa>
1a003906:	3802      	subs	r0, #2
1a003908:	4474      	add	r4, lr
1a00390a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00390e:	fba0 8902 	umull	r8, r9, r0, r2
1a003912:	eba4 040a 	sub.w	r4, r4, sl
1a003916:	454c      	cmp	r4, r9
1a003918:	46c2      	mov	sl, r8
1a00391a:	464b      	mov	r3, r9
1a00391c:	d354      	bcc.n	1a0039c8 <__udivmoddi4+0x298>
1a00391e:	d051      	beq.n	1a0039c4 <__udivmoddi4+0x294>
1a003920:	2e00      	cmp	r6, #0
1a003922:	d069      	beq.n	1a0039f8 <__udivmoddi4+0x2c8>
1a003924:	ebb1 050a 	subs.w	r5, r1, sl
1a003928:	eb64 0403 	sbc.w	r4, r4, r3
1a00392c:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003930:	40fd      	lsrs	r5, r7
1a003932:	40fc      	lsrs	r4, r7
1a003934:	ea4c 0505 	orr.w	r5, ip, r5
1a003938:	e9c6 5400 	strd	r5, r4, [r6]
1a00393c:	2700      	movs	r7, #0
1a00393e:	e747      	b.n	1a0037d0 <__udivmoddi4+0xa0>
1a003940:	f1c2 0320 	rsb	r3, r2, #32
1a003944:	fa20 f703 	lsr.w	r7, r0, r3
1a003948:	4095      	lsls	r5, r2
1a00394a:	fa01 f002 	lsl.w	r0, r1, r2
1a00394e:	fa21 f303 	lsr.w	r3, r1, r3
1a003952:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003956:	4338      	orrs	r0, r7
1a003958:	0c01      	lsrs	r1, r0, #16
1a00395a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00395e:	fa1f f885 	uxth.w	r8, r5
1a003962:	fb0e 3317 	mls	r3, lr, r7, r3
1a003966:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00396a:	fb07 f308 	mul.w	r3, r7, r8
1a00396e:	428b      	cmp	r3, r1
1a003970:	fa04 f402 	lsl.w	r4, r4, r2
1a003974:	d907      	bls.n	1a003986 <__udivmoddi4+0x256>
1a003976:	1869      	adds	r1, r5, r1
1a003978:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00397c:	d22f      	bcs.n	1a0039de <__udivmoddi4+0x2ae>
1a00397e:	428b      	cmp	r3, r1
1a003980:	d92d      	bls.n	1a0039de <__udivmoddi4+0x2ae>
1a003982:	3f02      	subs	r7, #2
1a003984:	4429      	add	r1, r5
1a003986:	1acb      	subs	r3, r1, r3
1a003988:	b281      	uxth	r1, r0
1a00398a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00398e:	fb0e 3310 	mls	r3, lr, r0, r3
1a003992:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003996:	fb00 f308 	mul.w	r3, r0, r8
1a00399a:	428b      	cmp	r3, r1
1a00399c:	d907      	bls.n	1a0039ae <__udivmoddi4+0x27e>
1a00399e:	1869      	adds	r1, r5, r1
1a0039a0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0039a4:	d217      	bcs.n	1a0039d6 <__udivmoddi4+0x2a6>
1a0039a6:	428b      	cmp	r3, r1
1a0039a8:	d915      	bls.n	1a0039d6 <__udivmoddi4+0x2a6>
1a0039aa:	3802      	subs	r0, #2
1a0039ac:	4429      	add	r1, r5
1a0039ae:	1ac9      	subs	r1, r1, r3
1a0039b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0039b4:	e73b      	b.n	1a00382e <__udivmoddi4+0xfe>
1a0039b6:	4637      	mov	r7, r6
1a0039b8:	4630      	mov	r0, r6
1a0039ba:	e709      	b.n	1a0037d0 <__udivmoddi4+0xa0>
1a0039bc:	4607      	mov	r7, r0
1a0039be:	e6e7      	b.n	1a003790 <__udivmoddi4+0x60>
1a0039c0:	4618      	mov	r0, r3
1a0039c2:	e6fb      	b.n	1a0037bc <__udivmoddi4+0x8c>
1a0039c4:	4541      	cmp	r1, r8
1a0039c6:	d2ab      	bcs.n	1a003920 <__udivmoddi4+0x1f0>
1a0039c8:	ebb8 0a02 	subs.w	sl, r8, r2
1a0039cc:	eb69 020e 	sbc.w	r2, r9, lr
1a0039d0:	3801      	subs	r0, #1
1a0039d2:	4613      	mov	r3, r2
1a0039d4:	e7a4      	b.n	1a003920 <__udivmoddi4+0x1f0>
1a0039d6:	4660      	mov	r0, ip
1a0039d8:	e7e9      	b.n	1a0039ae <__udivmoddi4+0x27e>
1a0039da:	4618      	mov	r0, r3
1a0039dc:	e795      	b.n	1a00390a <__udivmoddi4+0x1da>
1a0039de:	4667      	mov	r7, ip
1a0039e0:	e7d1      	b.n	1a003986 <__udivmoddi4+0x256>
1a0039e2:	4681      	mov	r9, r0
1a0039e4:	e77c      	b.n	1a0038e0 <__udivmoddi4+0x1b0>
1a0039e6:	3802      	subs	r0, #2
1a0039e8:	442c      	add	r4, r5
1a0039ea:	e747      	b.n	1a00387c <__udivmoddi4+0x14c>
1a0039ec:	f1ac 0c02 	sub.w	ip, ip, #2
1a0039f0:	442b      	add	r3, r5
1a0039f2:	e72f      	b.n	1a003854 <__udivmoddi4+0x124>
1a0039f4:	4638      	mov	r0, r7
1a0039f6:	e708      	b.n	1a00380a <__udivmoddi4+0xda>
1a0039f8:	4637      	mov	r7, r6
1a0039fa:	e6e9      	b.n	1a0037d0 <__udivmoddi4+0xa0>

1a0039fc <__aeabi_idiv0>:
1a0039fc:	4770      	bx	lr
1a0039fe:	bf00      	nop

1a003a00 <__sflush_r>:
1a003a00:	898a      	ldrh	r2, [r1, #12]
1a003a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a06:	4605      	mov	r5, r0
1a003a08:	0710      	lsls	r0, r2, #28
1a003a0a:	460c      	mov	r4, r1
1a003a0c:	d458      	bmi.n	1a003ac0 <__sflush_r+0xc0>
1a003a0e:	684b      	ldr	r3, [r1, #4]
1a003a10:	2b00      	cmp	r3, #0
1a003a12:	dc05      	bgt.n	1a003a20 <__sflush_r+0x20>
1a003a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003a16:	2b00      	cmp	r3, #0
1a003a18:	dc02      	bgt.n	1a003a20 <__sflush_r+0x20>
1a003a1a:	2000      	movs	r0, #0
1a003a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003a22:	2e00      	cmp	r6, #0
1a003a24:	d0f9      	beq.n	1a003a1a <__sflush_r+0x1a>
1a003a26:	2300      	movs	r3, #0
1a003a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003a2c:	682f      	ldr	r7, [r5, #0]
1a003a2e:	6a21      	ldr	r1, [r4, #32]
1a003a30:	602b      	str	r3, [r5, #0]
1a003a32:	d032      	beq.n	1a003a9a <__sflush_r+0x9a>
1a003a34:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003a36:	89a3      	ldrh	r3, [r4, #12]
1a003a38:	075a      	lsls	r2, r3, #29
1a003a3a:	d505      	bpl.n	1a003a48 <__sflush_r+0x48>
1a003a3c:	6863      	ldr	r3, [r4, #4]
1a003a3e:	1ac0      	subs	r0, r0, r3
1a003a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003a42:	b10b      	cbz	r3, 1a003a48 <__sflush_r+0x48>
1a003a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003a46:	1ac0      	subs	r0, r0, r3
1a003a48:	2300      	movs	r3, #0
1a003a4a:	4602      	mov	r2, r0
1a003a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003a4e:	6a21      	ldr	r1, [r4, #32]
1a003a50:	4628      	mov	r0, r5
1a003a52:	47b0      	blx	r6
1a003a54:	1c43      	adds	r3, r0, #1
1a003a56:	89a3      	ldrh	r3, [r4, #12]
1a003a58:	d106      	bne.n	1a003a68 <__sflush_r+0x68>
1a003a5a:	6829      	ldr	r1, [r5, #0]
1a003a5c:	291d      	cmp	r1, #29
1a003a5e:	d848      	bhi.n	1a003af2 <__sflush_r+0xf2>
1a003a60:	4a29      	ldr	r2, [pc, #164]	; (1a003b08 <__sflush_r+0x108>)
1a003a62:	40ca      	lsrs	r2, r1
1a003a64:	07d6      	lsls	r6, r2, #31
1a003a66:	d544      	bpl.n	1a003af2 <__sflush_r+0xf2>
1a003a68:	2200      	movs	r2, #0
1a003a6a:	6062      	str	r2, [r4, #4]
1a003a6c:	04d9      	lsls	r1, r3, #19
1a003a6e:	6922      	ldr	r2, [r4, #16]
1a003a70:	6022      	str	r2, [r4, #0]
1a003a72:	d504      	bpl.n	1a003a7e <__sflush_r+0x7e>
1a003a74:	1c42      	adds	r2, r0, #1
1a003a76:	d101      	bne.n	1a003a7c <__sflush_r+0x7c>
1a003a78:	682b      	ldr	r3, [r5, #0]
1a003a7a:	b903      	cbnz	r3, 1a003a7e <__sflush_r+0x7e>
1a003a7c:	6560      	str	r0, [r4, #84]	; 0x54
1a003a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003a80:	602f      	str	r7, [r5, #0]
1a003a82:	2900      	cmp	r1, #0
1a003a84:	d0c9      	beq.n	1a003a1a <__sflush_r+0x1a>
1a003a86:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003a8a:	4299      	cmp	r1, r3
1a003a8c:	d002      	beq.n	1a003a94 <__sflush_r+0x94>
1a003a8e:	4628      	mov	r0, r5
1a003a90:	f000 f968 	bl	1a003d64 <_free_r>
1a003a94:	2000      	movs	r0, #0
1a003a96:	6360      	str	r0, [r4, #52]	; 0x34
1a003a98:	e7c0      	b.n	1a003a1c <__sflush_r+0x1c>
1a003a9a:	2301      	movs	r3, #1
1a003a9c:	4628      	mov	r0, r5
1a003a9e:	47b0      	blx	r6
1a003aa0:	1c41      	adds	r1, r0, #1
1a003aa2:	d1c8      	bne.n	1a003a36 <__sflush_r+0x36>
1a003aa4:	682b      	ldr	r3, [r5, #0]
1a003aa6:	2b00      	cmp	r3, #0
1a003aa8:	d0c5      	beq.n	1a003a36 <__sflush_r+0x36>
1a003aaa:	2b1d      	cmp	r3, #29
1a003aac:	d001      	beq.n	1a003ab2 <__sflush_r+0xb2>
1a003aae:	2b16      	cmp	r3, #22
1a003ab0:	d101      	bne.n	1a003ab6 <__sflush_r+0xb6>
1a003ab2:	602f      	str	r7, [r5, #0]
1a003ab4:	e7b1      	b.n	1a003a1a <__sflush_r+0x1a>
1a003ab6:	89a3      	ldrh	r3, [r4, #12]
1a003ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003abc:	81a3      	strh	r3, [r4, #12]
1a003abe:	e7ad      	b.n	1a003a1c <__sflush_r+0x1c>
1a003ac0:	690f      	ldr	r7, [r1, #16]
1a003ac2:	2f00      	cmp	r7, #0
1a003ac4:	d0a9      	beq.n	1a003a1a <__sflush_r+0x1a>
1a003ac6:	0793      	lsls	r3, r2, #30
1a003ac8:	680e      	ldr	r6, [r1, #0]
1a003aca:	bf08      	it	eq
1a003acc:	694b      	ldreq	r3, [r1, #20]
1a003ace:	600f      	str	r7, [r1, #0]
1a003ad0:	bf18      	it	ne
1a003ad2:	2300      	movne	r3, #0
1a003ad4:	eba6 0807 	sub.w	r8, r6, r7
1a003ad8:	608b      	str	r3, [r1, #8]
1a003ada:	f1b8 0f00 	cmp.w	r8, #0
1a003ade:	dd9c      	ble.n	1a003a1a <__sflush_r+0x1a>
1a003ae0:	4643      	mov	r3, r8
1a003ae2:	463a      	mov	r2, r7
1a003ae4:	6a21      	ldr	r1, [r4, #32]
1a003ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003ae8:	4628      	mov	r0, r5
1a003aea:	47b0      	blx	r6
1a003aec:	2800      	cmp	r0, #0
1a003aee:	dc06      	bgt.n	1a003afe <__sflush_r+0xfe>
1a003af0:	89a3      	ldrh	r3, [r4, #12]
1a003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003af6:	81a3      	strh	r3, [r4, #12]
1a003af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003afc:	e78e      	b.n	1a003a1c <__sflush_r+0x1c>
1a003afe:	4407      	add	r7, r0
1a003b00:	eba8 0800 	sub.w	r8, r8, r0
1a003b04:	e7e9      	b.n	1a003ada <__sflush_r+0xda>
1a003b06:	bf00      	nop
1a003b08:	20400001 	.word	0x20400001

1a003b0c <_fflush_r>:
1a003b0c:	b538      	push	{r3, r4, r5, lr}
1a003b0e:	690b      	ldr	r3, [r1, #16]
1a003b10:	4605      	mov	r5, r0
1a003b12:	460c      	mov	r4, r1
1a003b14:	b1db      	cbz	r3, 1a003b4e <_fflush_r+0x42>
1a003b16:	b118      	cbz	r0, 1a003b20 <_fflush_r+0x14>
1a003b18:	6983      	ldr	r3, [r0, #24]
1a003b1a:	b90b      	cbnz	r3, 1a003b20 <_fflush_r+0x14>
1a003b1c:	f000 f860 	bl	1a003be0 <__sinit>
1a003b20:	4b0c      	ldr	r3, [pc, #48]	; (1a003b54 <_fflush_r+0x48>)
1a003b22:	429c      	cmp	r4, r3
1a003b24:	d109      	bne.n	1a003b3a <_fflush_r+0x2e>
1a003b26:	686c      	ldr	r4, [r5, #4]
1a003b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003b2c:	b17b      	cbz	r3, 1a003b4e <_fflush_r+0x42>
1a003b2e:	4621      	mov	r1, r4
1a003b30:	4628      	mov	r0, r5
1a003b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003b36:	f7ff bf63 	b.w	1a003a00 <__sflush_r>
1a003b3a:	4b07      	ldr	r3, [pc, #28]	; (1a003b58 <_fflush_r+0x4c>)
1a003b3c:	429c      	cmp	r4, r3
1a003b3e:	d101      	bne.n	1a003b44 <_fflush_r+0x38>
1a003b40:	68ac      	ldr	r4, [r5, #8]
1a003b42:	e7f1      	b.n	1a003b28 <_fflush_r+0x1c>
1a003b44:	4b05      	ldr	r3, [pc, #20]	; (1a003b5c <_fflush_r+0x50>)
1a003b46:	429c      	cmp	r4, r3
1a003b48:	bf08      	it	eq
1a003b4a:	68ec      	ldreq	r4, [r5, #12]
1a003b4c:	e7ec      	b.n	1a003b28 <_fflush_r+0x1c>
1a003b4e:	2000      	movs	r0, #0
1a003b50:	bd38      	pop	{r3, r4, r5, pc}
1a003b52:	bf00      	nop
1a003b54:	1a004c54 	.word	0x1a004c54
1a003b58:	1a004c74 	.word	0x1a004c74
1a003b5c:	1a004c34 	.word	0x1a004c34

1a003b60 <std>:
1a003b60:	2300      	movs	r3, #0
1a003b62:	b510      	push	{r4, lr}
1a003b64:	4604      	mov	r4, r0
1a003b66:	e9c0 3300 	strd	r3, r3, [r0]
1a003b6a:	6083      	str	r3, [r0, #8]
1a003b6c:	8181      	strh	r1, [r0, #12]
1a003b6e:	6643      	str	r3, [r0, #100]	; 0x64
1a003b70:	81c2      	strh	r2, [r0, #14]
1a003b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003b76:	6183      	str	r3, [r0, #24]
1a003b78:	4619      	mov	r1, r3
1a003b7a:	2208      	movs	r2, #8
1a003b7c:	305c      	adds	r0, #92	; 0x5c
1a003b7e:	f000 f8e8 	bl	1a003d52 <memset>
1a003b82:	4b05      	ldr	r3, [pc, #20]	; (1a003b98 <std+0x38>)
1a003b84:	6263      	str	r3, [r4, #36]	; 0x24
1a003b86:	4b05      	ldr	r3, [pc, #20]	; (1a003b9c <std+0x3c>)
1a003b88:	62a3      	str	r3, [r4, #40]	; 0x28
1a003b8a:	4b05      	ldr	r3, [pc, #20]	; (1a003ba0 <std+0x40>)
1a003b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003b8e:	4b05      	ldr	r3, [pc, #20]	; (1a003ba4 <std+0x44>)
1a003b90:	6224      	str	r4, [r4, #32]
1a003b92:	6323      	str	r3, [r4, #48]	; 0x30
1a003b94:	bd10      	pop	{r4, pc}
1a003b96:	bf00      	nop
1a003b98:	1a003fad 	.word	0x1a003fad
1a003b9c:	1a003fcf 	.word	0x1a003fcf
1a003ba0:	1a004007 	.word	0x1a004007
1a003ba4:	1a00402b 	.word	0x1a00402b

1a003ba8 <_cleanup_r>:
1a003ba8:	4901      	ldr	r1, [pc, #4]	; (1a003bb0 <_cleanup_r+0x8>)
1a003baa:	f000 b885 	b.w	1a003cb8 <_fwalk_reent>
1a003bae:	bf00      	nop
1a003bb0:	1a003b0d 	.word	0x1a003b0d

1a003bb4 <__sfmoreglue>:
1a003bb4:	b570      	push	{r4, r5, r6, lr}
1a003bb6:	1e4a      	subs	r2, r1, #1
1a003bb8:	2568      	movs	r5, #104	; 0x68
1a003bba:	4355      	muls	r5, r2
1a003bbc:	460e      	mov	r6, r1
1a003bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003bc2:	f000 f91d 	bl	1a003e00 <_malloc_r>
1a003bc6:	4604      	mov	r4, r0
1a003bc8:	b140      	cbz	r0, 1a003bdc <__sfmoreglue+0x28>
1a003bca:	2100      	movs	r1, #0
1a003bcc:	e9c0 1600 	strd	r1, r6, [r0]
1a003bd0:	300c      	adds	r0, #12
1a003bd2:	60a0      	str	r0, [r4, #8]
1a003bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003bd8:	f000 f8bb 	bl	1a003d52 <memset>
1a003bdc:	4620      	mov	r0, r4
1a003bde:	bd70      	pop	{r4, r5, r6, pc}

1a003be0 <__sinit>:
1a003be0:	6983      	ldr	r3, [r0, #24]
1a003be2:	b510      	push	{r4, lr}
1a003be4:	4604      	mov	r4, r0
1a003be6:	bb33      	cbnz	r3, 1a003c36 <__sinit+0x56>
1a003be8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a003bec:	6503      	str	r3, [r0, #80]	; 0x50
1a003bee:	4b12      	ldr	r3, [pc, #72]	; (1a003c38 <__sinit+0x58>)
1a003bf0:	4a12      	ldr	r2, [pc, #72]	; (1a003c3c <__sinit+0x5c>)
1a003bf2:	681b      	ldr	r3, [r3, #0]
1a003bf4:	6282      	str	r2, [r0, #40]	; 0x28
1a003bf6:	4298      	cmp	r0, r3
1a003bf8:	bf04      	itt	eq
1a003bfa:	2301      	moveq	r3, #1
1a003bfc:	6183      	streq	r3, [r0, #24]
1a003bfe:	f000 f81f 	bl	1a003c40 <__sfp>
1a003c02:	6060      	str	r0, [r4, #4]
1a003c04:	4620      	mov	r0, r4
1a003c06:	f000 f81b 	bl	1a003c40 <__sfp>
1a003c0a:	60a0      	str	r0, [r4, #8]
1a003c0c:	4620      	mov	r0, r4
1a003c0e:	f000 f817 	bl	1a003c40 <__sfp>
1a003c12:	2200      	movs	r2, #0
1a003c14:	60e0      	str	r0, [r4, #12]
1a003c16:	2104      	movs	r1, #4
1a003c18:	6860      	ldr	r0, [r4, #4]
1a003c1a:	f7ff ffa1 	bl	1a003b60 <std>
1a003c1e:	2201      	movs	r2, #1
1a003c20:	2109      	movs	r1, #9
1a003c22:	68a0      	ldr	r0, [r4, #8]
1a003c24:	f7ff ff9c 	bl	1a003b60 <std>
1a003c28:	2202      	movs	r2, #2
1a003c2a:	2112      	movs	r1, #18
1a003c2c:	68e0      	ldr	r0, [r4, #12]
1a003c2e:	f7ff ff97 	bl	1a003b60 <std>
1a003c32:	2301      	movs	r3, #1
1a003c34:	61a3      	str	r3, [r4, #24]
1a003c36:	bd10      	pop	{r4, pc}
1a003c38:	1a004c94 	.word	0x1a004c94
1a003c3c:	1a003ba9 	.word	0x1a003ba9

1a003c40 <__sfp>:
1a003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c42:	4b1b      	ldr	r3, [pc, #108]	; (1a003cb0 <__sfp+0x70>)
1a003c44:	681e      	ldr	r6, [r3, #0]
1a003c46:	69b3      	ldr	r3, [r6, #24]
1a003c48:	4607      	mov	r7, r0
1a003c4a:	b913      	cbnz	r3, 1a003c52 <__sfp+0x12>
1a003c4c:	4630      	mov	r0, r6
1a003c4e:	f7ff ffc7 	bl	1a003be0 <__sinit>
1a003c52:	3648      	adds	r6, #72	; 0x48
1a003c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003c58:	3b01      	subs	r3, #1
1a003c5a:	d503      	bpl.n	1a003c64 <__sfp+0x24>
1a003c5c:	6833      	ldr	r3, [r6, #0]
1a003c5e:	b133      	cbz	r3, 1a003c6e <__sfp+0x2e>
1a003c60:	6836      	ldr	r6, [r6, #0]
1a003c62:	e7f7      	b.n	1a003c54 <__sfp+0x14>
1a003c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003c68:	b16d      	cbz	r5, 1a003c86 <__sfp+0x46>
1a003c6a:	3468      	adds	r4, #104	; 0x68
1a003c6c:	e7f4      	b.n	1a003c58 <__sfp+0x18>
1a003c6e:	2104      	movs	r1, #4
1a003c70:	4638      	mov	r0, r7
1a003c72:	f7ff ff9f 	bl	1a003bb4 <__sfmoreglue>
1a003c76:	6030      	str	r0, [r6, #0]
1a003c78:	2800      	cmp	r0, #0
1a003c7a:	d1f1      	bne.n	1a003c60 <__sfp+0x20>
1a003c7c:	230c      	movs	r3, #12
1a003c7e:	603b      	str	r3, [r7, #0]
1a003c80:	4604      	mov	r4, r0
1a003c82:	4620      	mov	r0, r4
1a003c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c86:	4b0b      	ldr	r3, [pc, #44]	; (1a003cb4 <__sfp+0x74>)
1a003c88:	6665      	str	r5, [r4, #100]	; 0x64
1a003c8a:	e9c4 5500 	strd	r5, r5, [r4]
1a003c8e:	60a5      	str	r5, [r4, #8]
1a003c90:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a003c94:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a003c98:	2208      	movs	r2, #8
1a003c9a:	4629      	mov	r1, r5
1a003c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003ca0:	f000 f857 	bl	1a003d52 <memset>
1a003ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003cac:	e7e9      	b.n	1a003c82 <__sfp+0x42>
1a003cae:	bf00      	nop
1a003cb0:	1a004c94 	.word	0x1a004c94
1a003cb4:	ffff0001 	.word	0xffff0001

1a003cb8 <_fwalk_reent>:
1a003cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003cbc:	4680      	mov	r8, r0
1a003cbe:	4689      	mov	r9, r1
1a003cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003cc4:	2600      	movs	r6, #0
1a003cc6:	b914      	cbnz	r4, 1a003cce <_fwalk_reent+0x16>
1a003cc8:	4630      	mov	r0, r6
1a003cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003cce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003cd2:	3f01      	subs	r7, #1
1a003cd4:	d501      	bpl.n	1a003cda <_fwalk_reent+0x22>
1a003cd6:	6824      	ldr	r4, [r4, #0]
1a003cd8:	e7f5      	b.n	1a003cc6 <_fwalk_reent+0xe>
1a003cda:	89ab      	ldrh	r3, [r5, #12]
1a003cdc:	2b01      	cmp	r3, #1
1a003cde:	d907      	bls.n	1a003cf0 <_fwalk_reent+0x38>
1a003ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003ce4:	3301      	adds	r3, #1
1a003ce6:	d003      	beq.n	1a003cf0 <_fwalk_reent+0x38>
1a003ce8:	4629      	mov	r1, r5
1a003cea:	4640      	mov	r0, r8
1a003cec:	47c8      	blx	r9
1a003cee:	4306      	orrs	r6, r0
1a003cf0:	3568      	adds	r5, #104	; 0x68
1a003cf2:	e7ee      	b.n	1a003cd2 <_fwalk_reent+0x1a>

1a003cf4 <__libc_init_array>:
1a003cf4:	b570      	push	{r4, r5, r6, lr}
1a003cf6:	4e0d      	ldr	r6, [pc, #52]	; (1a003d2c <__libc_init_array+0x38>)
1a003cf8:	4c0d      	ldr	r4, [pc, #52]	; (1a003d30 <__libc_init_array+0x3c>)
1a003cfa:	1ba4      	subs	r4, r4, r6
1a003cfc:	10a4      	asrs	r4, r4, #2
1a003cfe:	2500      	movs	r5, #0
1a003d00:	42a5      	cmp	r5, r4
1a003d02:	d109      	bne.n	1a003d18 <__libc_init_array+0x24>
1a003d04:	4e0b      	ldr	r6, [pc, #44]	; (1a003d34 <__libc_init_array+0x40>)
1a003d06:	4c0c      	ldr	r4, [pc, #48]	; (1a003d38 <__libc_init_array+0x44>)
1a003d08:	f7fc fc87 	bl	1a00061a <_init>
1a003d0c:	1ba4      	subs	r4, r4, r6
1a003d0e:	10a4      	asrs	r4, r4, #2
1a003d10:	2500      	movs	r5, #0
1a003d12:	42a5      	cmp	r5, r4
1a003d14:	d105      	bne.n	1a003d22 <__libc_init_array+0x2e>
1a003d16:	bd70      	pop	{r4, r5, r6, pc}
1a003d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003d1c:	4798      	blx	r3
1a003d1e:	3501      	adds	r5, #1
1a003d20:	e7ee      	b.n	1a003d00 <__libc_init_array+0xc>
1a003d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003d26:	4798      	blx	r3
1a003d28:	3501      	adds	r5, #1
1a003d2a:	e7f2      	b.n	1a003d12 <__libc_init_array+0x1e>
1a003d2c:	1a004ccc 	.word	0x1a004ccc
1a003d30:	1a004ccc 	.word	0x1a004ccc
1a003d34:	1a004ccc 	.word	0x1a004ccc
1a003d38:	1a004cd0 	.word	0x1a004cd0

1a003d3c <memcpy>:
1a003d3c:	b510      	push	{r4, lr}
1a003d3e:	1e43      	subs	r3, r0, #1
1a003d40:	440a      	add	r2, r1
1a003d42:	4291      	cmp	r1, r2
1a003d44:	d100      	bne.n	1a003d48 <memcpy+0xc>
1a003d46:	bd10      	pop	{r4, pc}
1a003d48:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003d50:	e7f7      	b.n	1a003d42 <memcpy+0x6>

1a003d52 <memset>:
1a003d52:	4402      	add	r2, r0
1a003d54:	4603      	mov	r3, r0
1a003d56:	4293      	cmp	r3, r2
1a003d58:	d100      	bne.n	1a003d5c <memset+0xa>
1a003d5a:	4770      	bx	lr
1a003d5c:	f803 1b01 	strb.w	r1, [r3], #1
1a003d60:	e7f9      	b.n	1a003d56 <memset+0x4>
1a003d62:	Address 0x000000001a003d62 is out of bounds.


1a003d64 <_free_r>:
1a003d64:	b538      	push	{r3, r4, r5, lr}
1a003d66:	4605      	mov	r5, r0
1a003d68:	2900      	cmp	r1, #0
1a003d6a:	d045      	beq.n	1a003df8 <_free_r+0x94>
1a003d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003d70:	1f0c      	subs	r4, r1, #4
1a003d72:	2b00      	cmp	r3, #0
1a003d74:	bfb8      	it	lt
1a003d76:	18e4      	addlt	r4, r4, r3
1a003d78:	f000 fa80 	bl	1a00427c <__malloc_lock>
1a003d7c:	4a1f      	ldr	r2, [pc, #124]	; (1a003dfc <_free_r+0x98>)
1a003d7e:	6813      	ldr	r3, [r2, #0]
1a003d80:	4610      	mov	r0, r2
1a003d82:	b933      	cbnz	r3, 1a003d92 <_free_r+0x2e>
1a003d84:	6063      	str	r3, [r4, #4]
1a003d86:	6014      	str	r4, [r2, #0]
1a003d88:	4628      	mov	r0, r5
1a003d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003d8e:	f000 ba76 	b.w	1a00427e <__malloc_unlock>
1a003d92:	42a3      	cmp	r3, r4
1a003d94:	d90c      	bls.n	1a003db0 <_free_r+0x4c>
1a003d96:	6821      	ldr	r1, [r4, #0]
1a003d98:	1862      	adds	r2, r4, r1
1a003d9a:	4293      	cmp	r3, r2
1a003d9c:	bf04      	itt	eq
1a003d9e:	681a      	ldreq	r2, [r3, #0]
1a003da0:	685b      	ldreq	r3, [r3, #4]
1a003da2:	6063      	str	r3, [r4, #4]
1a003da4:	bf04      	itt	eq
1a003da6:	1852      	addeq	r2, r2, r1
1a003da8:	6022      	streq	r2, [r4, #0]
1a003daa:	6004      	str	r4, [r0, #0]
1a003dac:	e7ec      	b.n	1a003d88 <_free_r+0x24>
1a003dae:	4613      	mov	r3, r2
1a003db0:	685a      	ldr	r2, [r3, #4]
1a003db2:	b10a      	cbz	r2, 1a003db8 <_free_r+0x54>
1a003db4:	42a2      	cmp	r2, r4
1a003db6:	d9fa      	bls.n	1a003dae <_free_r+0x4a>
1a003db8:	6819      	ldr	r1, [r3, #0]
1a003dba:	1858      	adds	r0, r3, r1
1a003dbc:	42a0      	cmp	r0, r4
1a003dbe:	d10b      	bne.n	1a003dd8 <_free_r+0x74>
1a003dc0:	6820      	ldr	r0, [r4, #0]
1a003dc2:	4401      	add	r1, r0
1a003dc4:	1858      	adds	r0, r3, r1
1a003dc6:	4282      	cmp	r2, r0
1a003dc8:	6019      	str	r1, [r3, #0]
1a003dca:	d1dd      	bne.n	1a003d88 <_free_r+0x24>
1a003dcc:	6810      	ldr	r0, [r2, #0]
1a003dce:	6852      	ldr	r2, [r2, #4]
1a003dd0:	605a      	str	r2, [r3, #4]
1a003dd2:	4401      	add	r1, r0
1a003dd4:	6019      	str	r1, [r3, #0]
1a003dd6:	e7d7      	b.n	1a003d88 <_free_r+0x24>
1a003dd8:	d902      	bls.n	1a003de0 <_free_r+0x7c>
1a003dda:	230c      	movs	r3, #12
1a003ddc:	602b      	str	r3, [r5, #0]
1a003dde:	e7d3      	b.n	1a003d88 <_free_r+0x24>
1a003de0:	6820      	ldr	r0, [r4, #0]
1a003de2:	1821      	adds	r1, r4, r0
1a003de4:	428a      	cmp	r2, r1
1a003de6:	bf04      	itt	eq
1a003de8:	6811      	ldreq	r1, [r2, #0]
1a003dea:	6852      	ldreq	r2, [r2, #4]
1a003dec:	6062      	str	r2, [r4, #4]
1a003dee:	bf04      	itt	eq
1a003df0:	1809      	addeq	r1, r1, r0
1a003df2:	6021      	streq	r1, [r4, #0]
1a003df4:	605c      	str	r4, [r3, #4]
1a003df6:	e7c7      	b.n	1a003d88 <_free_r+0x24>
1a003df8:	bd38      	pop	{r3, r4, r5, pc}
1a003dfa:	bf00      	nop
1a003dfc:	10002af4 	.word	0x10002af4

1a003e00 <_malloc_r>:
1a003e00:	b570      	push	{r4, r5, r6, lr}
1a003e02:	1ccd      	adds	r5, r1, #3
1a003e04:	f025 0503 	bic.w	r5, r5, #3
1a003e08:	3508      	adds	r5, #8
1a003e0a:	2d0c      	cmp	r5, #12
1a003e0c:	bf38      	it	cc
1a003e0e:	250c      	movcc	r5, #12
1a003e10:	2d00      	cmp	r5, #0
1a003e12:	4606      	mov	r6, r0
1a003e14:	db01      	blt.n	1a003e1a <_malloc_r+0x1a>
1a003e16:	42a9      	cmp	r1, r5
1a003e18:	d903      	bls.n	1a003e22 <_malloc_r+0x22>
1a003e1a:	230c      	movs	r3, #12
1a003e1c:	6033      	str	r3, [r6, #0]
1a003e1e:	2000      	movs	r0, #0
1a003e20:	bd70      	pop	{r4, r5, r6, pc}
1a003e22:	f000 fa2b 	bl	1a00427c <__malloc_lock>
1a003e26:	4a21      	ldr	r2, [pc, #132]	; (1a003eac <_malloc_r+0xac>)
1a003e28:	6814      	ldr	r4, [r2, #0]
1a003e2a:	4621      	mov	r1, r4
1a003e2c:	b991      	cbnz	r1, 1a003e54 <_malloc_r+0x54>
1a003e2e:	4c20      	ldr	r4, [pc, #128]	; (1a003eb0 <_malloc_r+0xb0>)
1a003e30:	6823      	ldr	r3, [r4, #0]
1a003e32:	b91b      	cbnz	r3, 1a003e3c <_malloc_r+0x3c>
1a003e34:	4630      	mov	r0, r6
1a003e36:	f7fc fc45 	bl	1a0006c4 <_sbrk_r>
1a003e3a:	6020      	str	r0, [r4, #0]
1a003e3c:	4629      	mov	r1, r5
1a003e3e:	4630      	mov	r0, r6
1a003e40:	f7fc fc40 	bl	1a0006c4 <_sbrk_r>
1a003e44:	1c43      	adds	r3, r0, #1
1a003e46:	d124      	bne.n	1a003e92 <_malloc_r+0x92>
1a003e48:	230c      	movs	r3, #12
1a003e4a:	6033      	str	r3, [r6, #0]
1a003e4c:	4630      	mov	r0, r6
1a003e4e:	f000 fa16 	bl	1a00427e <__malloc_unlock>
1a003e52:	e7e4      	b.n	1a003e1e <_malloc_r+0x1e>
1a003e54:	680b      	ldr	r3, [r1, #0]
1a003e56:	1b5b      	subs	r3, r3, r5
1a003e58:	d418      	bmi.n	1a003e8c <_malloc_r+0x8c>
1a003e5a:	2b0b      	cmp	r3, #11
1a003e5c:	d90f      	bls.n	1a003e7e <_malloc_r+0x7e>
1a003e5e:	600b      	str	r3, [r1, #0]
1a003e60:	50cd      	str	r5, [r1, r3]
1a003e62:	18cc      	adds	r4, r1, r3
1a003e64:	4630      	mov	r0, r6
1a003e66:	f000 fa0a 	bl	1a00427e <__malloc_unlock>
1a003e6a:	f104 000b 	add.w	r0, r4, #11
1a003e6e:	1d23      	adds	r3, r4, #4
1a003e70:	f020 0007 	bic.w	r0, r0, #7
1a003e74:	1ac3      	subs	r3, r0, r3
1a003e76:	d0d3      	beq.n	1a003e20 <_malloc_r+0x20>
1a003e78:	425a      	negs	r2, r3
1a003e7a:	50e2      	str	r2, [r4, r3]
1a003e7c:	e7d0      	b.n	1a003e20 <_malloc_r+0x20>
1a003e7e:	428c      	cmp	r4, r1
1a003e80:	684b      	ldr	r3, [r1, #4]
1a003e82:	bf16      	itet	ne
1a003e84:	6063      	strne	r3, [r4, #4]
1a003e86:	6013      	streq	r3, [r2, #0]
1a003e88:	460c      	movne	r4, r1
1a003e8a:	e7eb      	b.n	1a003e64 <_malloc_r+0x64>
1a003e8c:	460c      	mov	r4, r1
1a003e8e:	6849      	ldr	r1, [r1, #4]
1a003e90:	e7cc      	b.n	1a003e2c <_malloc_r+0x2c>
1a003e92:	1cc4      	adds	r4, r0, #3
1a003e94:	f024 0403 	bic.w	r4, r4, #3
1a003e98:	42a0      	cmp	r0, r4
1a003e9a:	d005      	beq.n	1a003ea8 <_malloc_r+0xa8>
1a003e9c:	1a21      	subs	r1, r4, r0
1a003e9e:	4630      	mov	r0, r6
1a003ea0:	f7fc fc10 	bl	1a0006c4 <_sbrk_r>
1a003ea4:	3001      	adds	r0, #1
1a003ea6:	d0cf      	beq.n	1a003e48 <_malloc_r+0x48>
1a003ea8:	6025      	str	r5, [r4, #0]
1a003eaa:	e7db      	b.n	1a003e64 <_malloc_r+0x64>
1a003eac:	10002af4 	.word	0x10002af4
1a003eb0:	10002af8 	.word	0x10002af8

1a003eb4 <iprintf>:
1a003eb4:	b40f      	push	{r0, r1, r2, r3}
1a003eb6:	4b0a      	ldr	r3, [pc, #40]	; (1a003ee0 <iprintf+0x2c>)
1a003eb8:	b513      	push	{r0, r1, r4, lr}
1a003eba:	681c      	ldr	r4, [r3, #0]
1a003ebc:	b124      	cbz	r4, 1a003ec8 <iprintf+0x14>
1a003ebe:	69a3      	ldr	r3, [r4, #24]
1a003ec0:	b913      	cbnz	r3, 1a003ec8 <iprintf+0x14>
1a003ec2:	4620      	mov	r0, r4
1a003ec4:	f7ff fe8c 	bl	1a003be0 <__sinit>
1a003ec8:	ab05      	add	r3, sp, #20
1a003eca:	9a04      	ldr	r2, [sp, #16]
1a003ecc:	68a1      	ldr	r1, [r4, #8]
1a003ece:	9301      	str	r3, [sp, #4]
1a003ed0:	4620      	mov	r0, r4
1a003ed2:	f000 f9ff 	bl	1a0042d4 <_vfiprintf_r>
1a003ed6:	b002      	add	sp, #8
1a003ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003edc:	b004      	add	sp, #16
1a003ede:	4770      	bx	lr
1a003ee0:	10000040 	.word	0x10000040

1a003ee4 <_puts_r>:
1a003ee4:	b570      	push	{r4, r5, r6, lr}
1a003ee6:	460e      	mov	r6, r1
1a003ee8:	4605      	mov	r5, r0
1a003eea:	b118      	cbz	r0, 1a003ef4 <_puts_r+0x10>
1a003eec:	6983      	ldr	r3, [r0, #24]
1a003eee:	b90b      	cbnz	r3, 1a003ef4 <_puts_r+0x10>
1a003ef0:	f7ff fe76 	bl	1a003be0 <__sinit>
1a003ef4:	69ab      	ldr	r3, [r5, #24]
1a003ef6:	68ac      	ldr	r4, [r5, #8]
1a003ef8:	b913      	cbnz	r3, 1a003f00 <_puts_r+0x1c>
1a003efa:	4628      	mov	r0, r5
1a003efc:	f7ff fe70 	bl	1a003be0 <__sinit>
1a003f00:	4b23      	ldr	r3, [pc, #140]	; (1a003f90 <_puts_r+0xac>)
1a003f02:	429c      	cmp	r4, r3
1a003f04:	d117      	bne.n	1a003f36 <_puts_r+0x52>
1a003f06:	686c      	ldr	r4, [r5, #4]
1a003f08:	89a3      	ldrh	r3, [r4, #12]
1a003f0a:	071b      	lsls	r3, r3, #28
1a003f0c:	d51d      	bpl.n	1a003f4a <_puts_r+0x66>
1a003f0e:	6923      	ldr	r3, [r4, #16]
1a003f10:	b1db      	cbz	r3, 1a003f4a <_puts_r+0x66>
1a003f12:	3e01      	subs	r6, #1
1a003f14:	68a3      	ldr	r3, [r4, #8]
1a003f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a003f1a:	3b01      	subs	r3, #1
1a003f1c:	60a3      	str	r3, [r4, #8]
1a003f1e:	b9e9      	cbnz	r1, 1a003f5c <_puts_r+0x78>
1a003f20:	2b00      	cmp	r3, #0
1a003f22:	da2e      	bge.n	1a003f82 <_puts_r+0x9e>
1a003f24:	4622      	mov	r2, r4
1a003f26:	210a      	movs	r1, #10
1a003f28:	4628      	mov	r0, r5
1a003f2a:	f000 f883 	bl	1a004034 <__swbuf_r>
1a003f2e:	3001      	adds	r0, #1
1a003f30:	d011      	beq.n	1a003f56 <_puts_r+0x72>
1a003f32:	200a      	movs	r0, #10
1a003f34:	e011      	b.n	1a003f5a <_puts_r+0x76>
1a003f36:	4b17      	ldr	r3, [pc, #92]	; (1a003f94 <_puts_r+0xb0>)
1a003f38:	429c      	cmp	r4, r3
1a003f3a:	d101      	bne.n	1a003f40 <_puts_r+0x5c>
1a003f3c:	68ac      	ldr	r4, [r5, #8]
1a003f3e:	e7e3      	b.n	1a003f08 <_puts_r+0x24>
1a003f40:	4b15      	ldr	r3, [pc, #84]	; (1a003f98 <_puts_r+0xb4>)
1a003f42:	429c      	cmp	r4, r3
1a003f44:	bf08      	it	eq
1a003f46:	68ec      	ldreq	r4, [r5, #12]
1a003f48:	e7de      	b.n	1a003f08 <_puts_r+0x24>
1a003f4a:	4621      	mov	r1, r4
1a003f4c:	4628      	mov	r0, r5
1a003f4e:	f000 f8c3 	bl	1a0040d8 <__swsetup_r>
1a003f52:	2800      	cmp	r0, #0
1a003f54:	d0dd      	beq.n	1a003f12 <_puts_r+0x2e>
1a003f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003f5a:	bd70      	pop	{r4, r5, r6, pc}
1a003f5c:	2b00      	cmp	r3, #0
1a003f5e:	da04      	bge.n	1a003f6a <_puts_r+0x86>
1a003f60:	69a2      	ldr	r2, [r4, #24]
1a003f62:	429a      	cmp	r2, r3
1a003f64:	dc06      	bgt.n	1a003f74 <_puts_r+0x90>
1a003f66:	290a      	cmp	r1, #10
1a003f68:	d004      	beq.n	1a003f74 <_puts_r+0x90>
1a003f6a:	6823      	ldr	r3, [r4, #0]
1a003f6c:	1c5a      	adds	r2, r3, #1
1a003f6e:	6022      	str	r2, [r4, #0]
1a003f70:	7019      	strb	r1, [r3, #0]
1a003f72:	e7cf      	b.n	1a003f14 <_puts_r+0x30>
1a003f74:	4622      	mov	r2, r4
1a003f76:	4628      	mov	r0, r5
1a003f78:	f000 f85c 	bl	1a004034 <__swbuf_r>
1a003f7c:	3001      	adds	r0, #1
1a003f7e:	d1c9      	bne.n	1a003f14 <_puts_r+0x30>
1a003f80:	e7e9      	b.n	1a003f56 <_puts_r+0x72>
1a003f82:	6823      	ldr	r3, [r4, #0]
1a003f84:	200a      	movs	r0, #10
1a003f86:	1c5a      	adds	r2, r3, #1
1a003f88:	6022      	str	r2, [r4, #0]
1a003f8a:	7018      	strb	r0, [r3, #0]
1a003f8c:	e7e5      	b.n	1a003f5a <_puts_r+0x76>
1a003f8e:	bf00      	nop
1a003f90:	1a004c54 	.word	0x1a004c54
1a003f94:	1a004c74 	.word	0x1a004c74
1a003f98:	1a004c34 	.word	0x1a004c34

1a003f9c <puts>:
1a003f9c:	4b02      	ldr	r3, [pc, #8]	; (1a003fa8 <puts+0xc>)
1a003f9e:	4601      	mov	r1, r0
1a003fa0:	6818      	ldr	r0, [r3, #0]
1a003fa2:	f7ff bf9f 	b.w	1a003ee4 <_puts_r>
1a003fa6:	bf00      	nop
1a003fa8:	10000040 	.word	0x10000040

1a003fac <__sread>:
1a003fac:	b510      	push	{r4, lr}
1a003fae:	460c      	mov	r4, r1
1a003fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003fb4:	f7fc fb4a 	bl	1a00064c <_read_r>
1a003fb8:	2800      	cmp	r0, #0
1a003fba:	bfab      	itete	ge
1a003fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a003fbe:	89a3      	ldrhlt	r3, [r4, #12]
1a003fc0:	181b      	addge	r3, r3, r0
1a003fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a003fc6:	bfac      	ite	ge
1a003fc8:	6563      	strge	r3, [r4, #84]	; 0x54
1a003fca:	81a3      	strhlt	r3, [r4, #12]
1a003fcc:	bd10      	pop	{r4, pc}

1a003fce <__swrite>:
1a003fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003fd2:	461f      	mov	r7, r3
1a003fd4:	898b      	ldrh	r3, [r1, #12]
1a003fd6:	05db      	lsls	r3, r3, #23
1a003fd8:	4605      	mov	r5, r0
1a003fda:	460c      	mov	r4, r1
1a003fdc:	4616      	mov	r6, r2
1a003fde:	d505      	bpl.n	1a003fec <__swrite+0x1e>
1a003fe0:	2302      	movs	r3, #2
1a003fe2:	2200      	movs	r2, #0
1a003fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003fe8:	f7fc fb2b 	bl	1a000642 <_lseek_r>
1a003fec:	89a3      	ldrh	r3, [r4, #12]
1a003fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003ff6:	81a3      	strh	r3, [r4, #12]
1a003ff8:	4632      	mov	r2, r6
1a003ffa:	463b      	mov	r3, r7
1a003ffc:	4628      	mov	r0, r5
1a003ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004002:	f7fc bb4a 	b.w	1a00069a <_write_r>

1a004006 <__sseek>:
1a004006:	b510      	push	{r4, lr}
1a004008:	460c      	mov	r4, r1
1a00400a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00400e:	f7fc fb18 	bl	1a000642 <_lseek_r>
1a004012:	1c43      	adds	r3, r0, #1
1a004014:	89a3      	ldrh	r3, [r4, #12]
1a004016:	bf15      	itete	ne
1a004018:	6560      	strne	r0, [r4, #84]	; 0x54
1a00401a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00401e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004022:	81a3      	strheq	r3, [r4, #12]
1a004024:	bf18      	it	ne
1a004026:	81a3      	strhne	r3, [r4, #12]
1a004028:	bd10      	pop	{r4, pc}

1a00402a <__sclose>:
1a00402a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00402e:	f7fc baf5 	b.w	1a00061c <_close_r>
1a004032:	Address 0x000000001a004032 is out of bounds.


1a004034 <__swbuf_r>:
1a004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004036:	460e      	mov	r6, r1
1a004038:	4614      	mov	r4, r2
1a00403a:	4605      	mov	r5, r0
1a00403c:	b118      	cbz	r0, 1a004046 <__swbuf_r+0x12>
1a00403e:	6983      	ldr	r3, [r0, #24]
1a004040:	b90b      	cbnz	r3, 1a004046 <__swbuf_r+0x12>
1a004042:	f7ff fdcd 	bl	1a003be0 <__sinit>
1a004046:	4b21      	ldr	r3, [pc, #132]	; (1a0040cc <__swbuf_r+0x98>)
1a004048:	429c      	cmp	r4, r3
1a00404a:	d12a      	bne.n	1a0040a2 <__swbuf_r+0x6e>
1a00404c:	686c      	ldr	r4, [r5, #4]
1a00404e:	69a3      	ldr	r3, [r4, #24]
1a004050:	60a3      	str	r3, [r4, #8]
1a004052:	89a3      	ldrh	r3, [r4, #12]
1a004054:	071a      	lsls	r2, r3, #28
1a004056:	d52e      	bpl.n	1a0040b6 <__swbuf_r+0x82>
1a004058:	6923      	ldr	r3, [r4, #16]
1a00405a:	b363      	cbz	r3, 1a0040b6 <__swbuf_r+0x82>
1a00405c:	6923      	ldr	r3, [r4, #16]
1a00405e:	6820      	ldr	r0, [r4, #0]
1a004060:	1ac0      	subs	r0, r0, r3
1a004062:	6963      	ldr	r3, [r4, #20]
1a004064:	b2f6      	uxtb	r6, r6
1a004066:	4283      	cmp	r3, r0
1a004068:	4637      	mov	r7, r6
1a00406a:	dc04      	bgt.n	1a004076 <__swbuf_r+0x42>
1a00406c:	4621      	mov	r1, r4
1a00406e:	4628      	mov	r0, r5
1a004070:	f7ff fd4c 	bl	1a003b0c <_fflush_r>
1a004074:	bb28      	cbnz	r0, 1a0040c2 <__swbuf_r+0x8e>
1a004076:	68a3      	ldr	r3, [r4, #8]
1a004078:	3b01      	subs	r3, #1
1a00407a:	60a3      	str	r3, [r4, #8]
1a00407c:	6823      	ldr	r3, [r4, #0]
1a00407e:	1c5a      	adds	r2, r3, #1
1a004080:	6022      	str	r2, [r4, #0]
1a004082:	701e      	strb	r6, [r3, #0]
1a004084:	6963      	ldr	r3, [r4, #20]
1a004086:	3001      	adds	r0, #1
1a004088:	4283      	cmp	r3, r0
1a00408a:	d004      	beq.n	1a004096 <__swbuf_r+0x62>
1a00408c:	89a3      	ldrh	r3, [r4, #12]
1a00408e:	07db      	lsls	r3, r3, #31
1a004090:	d519      	bpl.n	1a0040c6 <__swbuf_r+0x92>
1a004092:	2e0a      	cmp	r6, #10
1a004094:	d117      	bne.n	1a0040c6 <__swbuf_r+0x92>
1a004096:	4621      	mov	r1, r4
1a004098:	4628      	mov	r0, r5
1a00409a:	f7ff fd37 	bl	1a003b0c <_fflush_r>
1a00409e:	b190      	cbz	r0, 1a0040c6 <__swbuf_r+0x92>
1a0040a0:	e00f      	b.n	1a0040c2 <__swbuf_r+0x8e>
1a0040a2:	4b0b      	ldr	r3, [pc, #44]	; (1a0040d0 <__swbuf_r+0x9c>)
1a0040a4:	429c      	cmp	r4, r3
1a0040a6:	d101      	bne.n	1a0040ac <__swbuf_r+0x78>
1a0040a8:	68ac      	ldr	r4, [r5, #8]
1a0040aa:	e7d0      	b.n	1a00404e <__swbuf_r+0x1a>
1a0040ac:	4b09      	ldr	r3, [pc, #36]	; (1a0040d4 <__swbuf_r+0xa0>)
1a0040ae:	429c      	cmp	r4, r3
1a0040b0:	bf08      	it	eq
1a0040b2:	68ec      	ldreq	r4, [r5, #12]
1a0040b4:	e7cb      	b.n	1a00404e <__swbuf_r+0x1a>
1a0040b6:	4621      	mov	r1, r4
1a0040b8:	4628      	mov	r0, r5
1a0040ba:	f000 f80d 	bl	1a0040d8 <__swsetup_r>
1a0040be:	2800      	cmp	r0, #0
1a0040c0:	d0cc      	beq.n	1a00405c <__swbuf_r+0x28>
1a0040c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0040c6:	4638      	mov	r0, r7
1a0040c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0040ca:	bf00      	nop
1a0040cc:	1a004c54 	.word	0x1a004c54
1a0040d0:	1a004c74 	.word	0x1a004c74
1a0040d4:	1a004c34 	.word	0x1a004c34

1a0040d8 <__swsetup_r>:
1a0040d8:	4b32      	ldr	r3, [pc, #200]	; (1a0041a4 <__swsetup_r+0xcc>)
1a0040da:	b570      	push	{r4, r5, r6, lr}
1a0040dc:	681d      	ldr	r5, [r3, #0]
1a0040de:	4606      	mov	r6, r0
1a0040e0:	460c      	mov	r4, r1
1a0040e2:	b125      	cbz	r5, 1a0040ee <__swsetup_r+0x16>
1a0040e4:	69ab      	ldr	r3, [r5, #24]
1a0040e6:	b913      	cbnz	r3, 1a0040ee <__swsetup_r+0x16>
1a0040e8:	4628      	mov	r0, r5
1a0040ea:	f7ff fd79 	bl	1a003be0 <__sinit>
1a0040ee:	4b2e      	ldr	r3, [pc, #184]	; (1a0041a8 <__swsetup_r+0xd0>)
1a0040f0:	429c      	cmp	r4, r3
1a0040f2:	d10f      	bne.n	1a004114 <__swsetup_r+0x3c>
1a0040f4:	686c      	ldr	r4, [r5, #4]
1a0040f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0040fa:	b29a      	uxth	r2, r3
1a0040fc:	0715      	lsls	r5, r2, #28
1a0040fe:	d42c      	bmi.n	1a00415a <__swsetup_r+0x82>
1a004100:	06d0      	lsls	r0, r2, #27
1a004102:	d411      	bmi.n	1a004128 <__swsetup_r+0x50>
1a004104:	2209      	movs	r2, #9
1a004106:	6032      	str	r2, [r6, #0]
1a004108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00410c:	81a3      	strh	r3, [r4, #12]
1a00410e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004112:	e03e      	b.n	1a004192 <__swsetup_r+0xba>
1a004114:	4b25      	ldr	r3, [pc, #148]	; (1a0041ac <__swsetup_r+0xd4>)
1a004116:	429c      	cmp	r4, r3
1a004118:	d101      	bne.n	1a00411e <__swsetup_r+0x46>
1a00411a:	68ac      	ldr	r4, [r5, #8]
1a00411c:	e7eb      	b.n	1a0040f6 <__swsetup_r+0x1e>
1a00411e:	4b24      	ldr	r3, [pc, #144]	; (1a0041b0 <__swsetup_r+0xd8>)
1a004120:	429c      	cmp	r4, r3
1a004122:	bf08      	it	eq
1a004124:	68ec      	ldreq	r4, [r5, #12]
1a004126:	e7e6      	b.n	1a0040f6 <__swsetup_r+0x1e>
1a004128:	0751      	lsls	r1, r2, #29
1a00412a:	d512      	bpl.n	1a004152 <__swsetup_r+0x7a>
1a00412c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00412e:	b141      	cbz	r1, 1a004142 <__swsetup_r+0x6a>
1a004130:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004134:	4299      	cmp	r1, r3
1a004136:	d002      	beq.n	1a00413e <__swsetup_r+0x66>
1a004138:	4630      	mov	r0, r6
1a00413a:	f7ff fe13 	bl	1a003d64 <_free_r>
1a00413e:	2300      	movs	r3, #0
1a004140:	6363      	str	r3, [r4, #52]	; 0x34
1a004142:	89a3      	ldrh	r3, [r4, #12]
1a004144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004148:	81a3      	strh	r3, [r4, #12]
1a00414a:	2300      	movs	r3, #0
1a00414c:	6063      	str	r3, [r4, #4]
1a00414e:	6923      	ldr	r3, [r4, #16]
1a004150:	6023      	str	r3, [r4, #0]
1a004152:	89a3      	ldrh	r3, [r4, #12]
1a004154:	f043 0308 	orr.w	r3, r3, #8
1a004158:	81a3      	strh	r3, [r4, #12]
1a00415a:	6923      	ldr	r3, [r4, #16]
1a00415c:	b94b      	cbnz	r3, 1a004172 <__swsetup_r+0x9a>
1a00415e:	89a3      	ldrh	r3, [r4, #12]
1a004160:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004168:	d003      	beq.n	1a004172 <__swsetup_r+0x9a>
1a00416a:	4621      	mov	r1, r4
1a00416c:	4630      	mov	r0, r6
1a00416e:	f000 f845 	bl	1a0041fc <__smakebuf_r>
1a004172:	89a2      	ldrh	r2, [r4, #12]
1a004174:	f012 0301 	ands.w	r3, r2, #1
1a004178:	d00c      	beq.n	1a004194 <__swsetup_r+0xbc>
1a00417a:	2300      	movs	r3, #0
1a00417c:	60a3      	str	r3, [r4, #8]
1a00417e:	6963      	ldr	r3, [r4, #20]
1a004180:	425b      	negs	r3, r3
1a004182:	61a3      	str	r3, [r4, #24]
1a004184:	6923      	ldr	r3, [r4, #16]
1a004186:	b953      	cbnz	r3, 1a00419e <__swsetup_r+0xc6>
1a004188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00418c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004190:	d1ba      	bne.n	1a004108 <__swsetup_r+0x30>
1a004192:	bd70      	pop	{r4, r5, r6, pc}
1a004194:	0792      	lsls	r2, r2, #30
1a004196:	bf58      	it	pl
1a004198:	6963      	ldrpl	r3, [r4, #20]
1a00419a:	60a3      	str	r3, [r4, #8]
1a00419c:	e7f2      	b.n	1a004184 <__swsetup_r+0xac>
1a00419e:	2000      	movs	r0, #0
1a0041a0:	e7f7      	b.n	1a004192 <__swsetup_r+0xba>
1a0041a2:	bf00      	nop
1a0041a4:	10000040 	.word	0x10000040
1a0041a8:	1a004c54 	.word	0x1a004c54
1a0041ac:	1a004c74 	.word	0x1a004c74
1a0041b0:	1a004c34 	.word	0x1a004c34

1a0041b4 <__swhatbuf_r>:
1a0041b4:	b570      	push	{r4, r5, r6, lr}
1a0041b6:	460e      	mov	r6, r1
1a0041b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0041bc:	2900      	cmp	r1, #0
1a0041be:	b096      	sub	sp, #88	; 0x58
1a0041c0:	4614      	mov	r4, r2
1a0041c2:	461d      	mov	r5, r3
1a0041c4:	da07      	bge.n	1a0041d6 <__swhatbuf_r+0x22>
1a0041c6:	2300      	movs	r3, #0
1a0041c8:	602b      	str	r3, [r5, #0]
1a0041ca:	89b3      	ldrh	r3, [r6, #12]
1a0041cc:	061a      	lsls	r2, r3, #24
1a0041ce:	d410      	bmi.n	1a0041f2 <__swhatbuf_r+0x3e>
1a0041d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0041d4:	e00e      	b.n	1a0041f4 <__swhatbuf_r+0x40>
1a0041d6:	466a      	mov	r2, sp
1a0041d8:	f7fc fa25 	bl	1a000626 <_fstat_r>
1a0041dc:	2800      	cmp	r0, #0
1a0041de:	dbf2      	blt.n	1a0041c6 <__swhatbuf_r+0x12>
1a0041e0:	9a01      	ldr	r2, [sp, #4]
1a0041e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0041e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0041ea:	425a      	negs	r2, r3
1a0041ec:	415a      	adcs	r2, r3
1a0041ee:	602a      	str	r2, [r5, #0]
1a0041f0:	e7ee      	b.n	1a0041d0 <__swhatbuf_r+0x1c>
1a0041f2:	2340      	movs	r3, #64	; 0x40
1a0041f4:	2000      	movs	r0, #0
1a0041f6:	6023      	str	r3, [r4, #0]
1a0041f8:	b016      	add	sp, #88	; 0x58
1a0041fa:	bd70      	pop	{r4, r5, r6, pc}

1a0041fc <__smakebuf_r>:
1a0041fc:	898b      	ldrh	r3, [r1, #12]
1a0041fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004200:	079d      	lsls	r5, r3, #30
1a004202:	4606      	mov	r6, r0
1a004204:	460c      	mov	r4, r1
1a004206:	d507      	bpl.n	1a004218 <__smakebuf_r+0x1c>
1a004208:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00420c:	6023      	str	r3, [r4, #0]
1a00420e:	6123      	str	r3, [r4, #16]
1a004210:	2301      	movs	r3, #1
1a004212:	6163      	str	r3, [r4, #20]
1a004214:	b002      	add	sp, #8
1a004216:	bd70      	pop	{r4, r5, r6, pc}
1a004218:	ab01      	add	r3, sp, #4
1a00421a:	466a      	mov	r2, sp
1a00421c:	f7ff ffca 	bl	1a0041b4 <__swhatbuf_r>
1a004220:	9900      	ldr	r1, [sp, #0]
1a004222:	4605      	mov	r5, r0
1a004224:	4630      	mov	r0, r6
1a004226:	f7ff fdeb 	bl	1a003e00 <_malloc_r>
1a00422a:	b948      	cbnz	r0, 1a004240 <__smakebuf_r+0x44>
1a00422c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004230:	059a      	lsls	r2, r3, #22
1a004232:	d4ef      	bmi.n	1a004214 <__smakebuf_r+0x18>
1a004234:	f023 0303 	bic.w	r3, r3, #3
1a004238:	f043 0302 	orr.w	r3, r3, #2
1a00423c:	81a3      	strh	r3, [r4, #12]
1a00423e:	e7e3      	b.n	1a004208 <__smakebuf_r+0xc>
1a004240:	4b0d      	ldr	r3, [pc, #52]	; (1a004278 <__smakebuf_r+0x7c>)
1a004242:	62b3      	str	r3, [r6, #40]	; 0x28
1a004244:	89a3      	ldrh	r3, [r4, #12]
1a004246:	6020      	str	r0, [r4, #0]
1a004248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00424c:	81a3      	strh	r3, [r4, #12]
1a00424e:	9b00      	ldr	r3, [sp, #0]
1a004250:	6163      	str	r3, [r4, #20]
1a004252:	9b01      	ldr	r3, [sp, #4]
1a004254:	6120      	str	r0, [r4, #16]
1a004256:	b15b      	cbz	r3, 1a004270 <__smakebuf_r+0x74>
1a004258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00425c:	4630      	mov	r0, r6
1a00425e:	f7fc f9e7 	bl	1a000630 <_isatty_r>
1a004262:	b128      	cbz	r0, 1a004270 <__smakebuf_r+0x74>
1a004264:	89a3      	ldrh	r3, [r4, #12]
1a004266:	f023 0303 	bic.w	r3, r3, #3
1a00426a:	f043 0301 	orr.w	r3, r3, #1
1a00426e:	81a3      	strh	r3, [r4, #12]
1a004270:	89a3      	ldrh	r3, [r4, #12]
1a004272:	431d      	orrs	r5, r3
1a004274:	81a5      	strh	r5, [r4, #12]
1a004276:	e7cd      	b.n	1a004214 <__smakebuf_r+0x18>
1a004278:	1a003ba9 	.word	0x1a003ba9

1a00427c <__malloc_lock>:
1a00427c:	4770      	bx	lr

1a00427e <__malloc_unlock>:
1a00427e:	4770      	bx	lr

1a004280 <__sfputc_r>:
1a004280:	6893      	ldr	r3, [r2, #8]
1a004282:	3b01      	subs	r3, #1
1a004284:	2b00      	cmp	r3, #0
1a004286:	b410      	push	{r4}
1a004288:	6093      	str	r3, [r2, #8]
1a00428a:	da08      	bge.n	1a00429e <__sfputc_r+0x1e>
1a00428c:	6994      	ldr	r4, [r2, #24]
1a00428e:	42a3      	cmp	r3, r4
1a004290:	db01      	blt.n	1a004296 <__sfputc_r+0x16>
1a004292:	290a      	cmp	r1, #10
1a004294:	d103      	bne.n	1a00429e <__sfputc_r+0x1e>
1a004296:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00429a:	f7ff becb 	b.w	1a004034 <__swbuf_r>
1a00429e:	6813      	ldr	r3, [r2, #0]
1a0042a0:	1c58      	adds	r0, r3, #1
1a0042a2:	6010      	str	r0, [r2, #0]
1a0042a4:	7019      	strb	r1, [r3, #0]
1a0042a6:	4608      	mov	r0, r1
1a0042a8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0042ac:	4770      	bx	lr

1a0042ae <__sfputs_r>:
1a0042ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0042b0:	4606      	mov	r6, r0
1a0042b2:	460f      	mov	r7, r1
1a0042b4:	4614      	mov	r4, r2
1a0042b6:	18d5      	adds	r5, r2, r3
1a0042b8:	42ac      	cmp	r4, r5
1a0042ba:	d101      	bne.n	1a0042c0 <__sfputs_r+0x12>
1a0042bc:	2000      	movs	r0, #0
1a0042be:	e007      	b.n	1a0042d0 <__sfputs_r+0x22>
1a0042c0:	463a      	mov	r2, r7
1a0042c2:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0042c6:	4630      	mov	r0, r6
1a0042c8:	f7ff ffda 	bl	1a004280 <__sfputc_r>
1a0042cc:	1c43      	adds	r3, r0, #1
1a0042ce:	d1f3      	bne.n	1a0042b8 <__sfputs_r+0xa>
1a0042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0042d2:	Address 0x000000001a0042d2 is out of bounds.


1a0042d4 <_vfiprintf_r>:
1a0042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0042d8:	460c      	mov	r4, r1
1a0042da:	b09d      	sub	sp, #116	; 0x74
1a0042dc:	4617      	mov	r7, r2
1a0042de:	461d      	mov	r5, r3
1a0042e0:	4606      	mov	r6, r0
1a0042e2:	b118      	cbz	r0, 1a0042ec <_vfiprintf_r+0x18>
1a0042e4:	6983      	ldr	r3, [r0, #24]
1a0042e6:	b90b      	cbnz	r3, 1a0042ec <_vfiprintf_r+0x18>
1a0042e8:	f7ff fc7a 	bl	1a003be0 <__sinit>
1a0042ec:	4b7c      	ldr	r3, [pc, #496]	; (1a0044e0 <_vfiprintf_r+0x20c>)
1a0042ee:	429c      	cmp	r4, r3
1a0042f0:	d158      	bne.n	1a0043a4 <_vfiprintf_r+0xd0>
1a0042f2:	6874      	ldr	r4, [r6, #4]
1a0042f4:	89a3      	ldrh	r3, [r4, #12]
1a0042f6:	0718      	lsls	r0, r3, #28
1a0042f8:	d55e      	bpl.n	1a0043b8 <_vfiprintf_r+0xe4>
1a0042fa:	6923      	ldr	r3, [r4, #16]
1a0042fc:	2b00      	cmp	r3, #0
1a0042fe:	d05b      	beq.n	1a0043b8 <_vfiprintf_r+0xe4>
1a004300:	2300      	movs	r3, #0
1a004302:	9309      	str	r3, [sp, #36]	; 0x24
1a004304:	2320      	movs	r3, #32
1a004306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00430a:	2330      	movs	r3, #48	; 0x30
1a00430c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004310:	9503      	str	r5, [sp, #12]
1a004312:	f04f 0b01 	mov.w	fp, #1
1a004316:	46b8      	mov	r8, r7
1a004318:	4645      	mov	r5, r8
1a00431a:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00431e:	b10b      	cbz	r3, 1a004324 <_vfiprintf_r+0x50>
1a004320:	2b25      	cmp	r3, #37	; 0x25
1a004322:	d154      	bne.n	1a0043ce <_vfiprintf_r+0xfa>
1a004324:	ebb8 0a07 	subs.w	sl, r8, r7
1a004328:	d00b      	beq.n	1a004342 <_vfiprintf_r+0x6e>
1a00432a:	4653      	mov	r3, sl
1a00432c:	463a      	mov	r2, r7
1a00432e:	4621      	mov	r1, r4
1a004330:	4630      	mov	r0, r6
1a004332:	f7ff ffbc 	bl	1a0042ae <__sfputs_r>
1a004336:	3001      	adds	r0, #1
1a004338:	f000 80c2 	beq.w	1a0044c0 <_vfiprintf_r+0x1ec>
1a00433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00433e:	4453      	add	r3, sl
1a004340:	9309      	str	r3, [sp, #36]	; 0x24
1a004342:	f898 3000 	ldrb.w	r3, [r8]
1a004346:	2b00      	cmp	r3, #0
1a004348:	f000 80ba 	beq.w	1a0044c0 <_vfiprintf_r+0x1ec>
1a00434c:	2300      	movs	r3, #0
1a00434e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004352:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004356:	9304      	str	r3, [sp, #16]
1a004358:	9307      	str	r3, [sp, #28]
1a00435a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00435e:	931a      	str	r3, [sp, #104]	; 0x68
1a004360:	46a8      	mov	r8, r5
1a004362:	2205      	movs	r2, #5
1a004364:	f818 1b01 	ldrb.w	r1, [r8], #1
1a004368:	485e      	ldr	r0, [pc, #376]	; (1a0044e4 <_vfiprintf_r+0x210>)
1a00436a:	f000 fa51 	bl	1a004810 <memchr>
1a00436e:	9b04      	ldr	r3, [sp, #16]
1a004370:	bb78      	cbnz	r0, 1a0043d2 <_vfiprintf_r+0xfe>
1a004372:	06d9      	lsls	r1, r3, #27
1a004374:	bf44      	itt	mi
1a004376:	2220      	movmi	r2, #32
1a004378:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00437c:	071a      	lsls	r2, r3, #28
1a00437e:	bf44      	itt	mi
1a004380:	222b      	movmi	r2, #43	; 0x2b
1a004382:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004386:	782a      	ldrb	r2, [r5, #0]
1a004388:	2a2a      	cmp	r2, #42	; 0x2a
1a00438a:	d02a      	beq.n	1a0043e2 <_vfiprintf_r+0x10e>
1a00438c:	9a07      	ldr	r2, [sp, #28]
1a00438e:	46a8      	mov	r8, r5
1a004390:	2000      	movs	r0, #0
1a004392:	250a      	movs	r5, #10
1a004394:	4641      	mov	r1, r8
1a004396:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00439a:	3b30      	subs	r3, #48	; 0x30
1a00439c:	2b09      	cmp	r3, #9
1a00439e:	d969      	bls.n	1a004474 <_vfiprintf_r+0x1a0>
1a0043a0:	b360      	cbz	r0, 1a0043fc <_vfiprintf_r+0x128>
1a0043a2:	e024      	b.n	1a0043ee <_vfiprintf_r+0x11a>
1a0043a4:	4b50      	ldr	r3, [pc, #320]	; (1a0044e8 <_vfiprintf_r+0x214>)
1a0043a6:	429c      	cmp	r4, r3
1a0043a8:	d101      	bne.n	1a0043ae <_vfiprintf_r+0xda>
1a0043aa:	68b4      	ldr	r4, [r6, #8]
1a0043ac:	e7a2      	b.n	1a0042f4 <_vfiprintf_r+0x20>
1a0043ae:	4b4f      	ldr	r3, [pc, #316]	; (1a0044ec <_vfiprintf_r+0x218>)
1a0043b0:	429c      	cmp	r4, r3
1a0043b2:	bf08      	it	eq
1a0043b4:	68f4      	ldreq	r4, [r6, #12]
1a0043b6:	e79d      	b.n	1a0042f4 <_vfiprintf_r+0x20>
1a0043b8:	4621      	mov	r1, r4
1a0043ba:	4630      	mov	r0, r6
1a0043bc:	f7ff fe8c 	bl	1a0040d8 <__swsetup_r>
1a0043c0:	2800      	cmp	r0, #0
1a0043c2:	d09d      	beq.n	1a004300 <_vfiprintf_r+0x2c>
1a0043c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0043c8:	b01d      	add	sp, #116	; 0x74
1a0043ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0043ce:	46a8      	mov	r8, r5
1a0043d0:	e7a2      	b.n	1a004318 <_vfiprintf_r+0x44>
1a0043d2:	4a44      	ldr	r2, [pc, #272]	; (1a0044e4 <_vfiprintf_r+0x210>)
1a0043d4:	1a80      	subs	r0, r0, r2
1a0043d6:	fa0b f000 	lsl.w	r0, fp, r0
1a0043da:	4318      	orrs	r0, r3
1a0043dc:	9004      	str	r0, [sp, #16]
1a0043de:	4645      	mov	r5, r8
1a0043e0:	e7be      	b.n	1a004360 <_vfiprintf_r+0x8c>
1a0043e2:	9a03      	ldr	r2, [sp, #12]
1a0043e4:	1d11      	adds	r1, r2, #4
1a0043e6:	6812      	ldr	r2, [r2, #0]
1a0043e8:	9103      	str	r1, [sp, #12]
1a0043ea:	2a00      	cmp	r2, #0
1a0043ec:	db01      	blt.n	1a0043f2 <_vfiprintf_r+0x11e>
1a0043ee:	9207      	str	r2, [sp, #28]
1a0043f0:	e004      	b.n	1a0043fc <_vfiprintf_r+0x128>
1a0043f2:	4252      	negs	r2, r2
1a0043f4:	f043 0302 	orr.w	r3, r3, #2
1a0043f8:	9207      	str	r2, [sp, #28]
1a0043fa:	9304      	str	r3, [sp, #16]
1a0043fc:	f898 3000 	ldrb.w	r3, [r8]
1a004400:	2b2e      	cmp	r3, #46	; 0x2e
1a004402:	d10e      	bne.n	1a004422 <_vfiprintf_r+0x14e>
1a004404:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004408:	2b2a      	cmp	r3, #42	; 0x2a
1a00440a:	d138      	bne.n	1a00447e <_vfiprintf_r+0x1aa>
1a00440c:	9b03      	ldr	r3, [sp, #12]
1a00440e:	1d1a      	adds	r2, r3, #4
1a004410:	681b      	ldr	r3, [r3, #0]
1a004412:	9203      	str	r2, [sp, #12]
1a004414:	2b00      	cmp	r3, #0
1a004416:	bfb8      	it	lt
1a004418:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a00441c:	f108 0802 	add.w	r8, r8, #2
1a004420:	9305      	str	r3, [sp, #20]
1a004422:	4d33      	ldr	r5, [pc, #204]	; (1a0044f0 <_vfiprintf_r+0x21c>)
1a004424:	f898 1000 	ldrb.w	r1, [r8]
1a004428:	2203      	movs	r2, #3
1a00442a:	4628      	mov	r0, r5
1a00442c:	f000 f9f0 	bl	1a004810 <memchr>
1a004430:	b140      	cbz	r0, 1a004444 <_vfiprintf_r+0x170>
1a004432:	2340      	movs	r3, #64	; 0x40
1a004434:	1b40      	subs	r0, r0, r5
1a004436:	fa03 f000 	lsl.w	r0, r3, r0
1a00443a:	9b04      	ldr	r3, [sp, #16]
1a00443c:	4303      	orrs	r3, r0
1a00443e:	f108 0801 	add.w	r8, r8, #1
1a004442:	9304      	str	r3, [sp, #16]
1a004444:	f898 1000 	ldrb.w	r1, [r8]
1a004448:	482a      	ldr	r0, [pc, #168]	; (1a0044f4 <_vfiprintf_r+0x220>)
1a00444a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00444e:	2206      	movs	r2, #6
1a004450:	f108 0701 	add.w	r7, r8, #1
1a004454:	f000 f9dc 	bl	1a004810 <memchr>
1a004458:	2800      	cmp	r0, #0
1a00445a:	d037      	beq.n	1a0044cc <_vfiprintf_r+0x1f8>
1a00445c:	4b26      	ldr	r3, [pc, #152]	; (1a0044f8 <_vfiprintf_r+0x224>)
1a00445e:	bb1b      	cbnz	r3, 1a0044a8 <_vfiprintf_r+0x1d4>
1a004460:	9b03      	ldr	r3, [sp, #12]
1a004462:	3307      	adds	r3, #7
1a004464:	f023 0307 	bic.w	r3, r3, #7
1a004468:	3308      	adds	r3, #8
1a00446a:	9303      	str	r3, [sp, #12]
1a00446c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00446e:	444b      	add	r3, r9
1a004470:	9309      	str	r3, [sp, #36]	; 0x24
1a004472:	e750      	b.n	1a004316 <_vfiprintf_r+0x42>
1a004474:	fb05 3202 	mla	r2, r5, r2, r3
1a004478:	2001      	movs	r0, #1
1a00447a:	4688      	mov	r8, r1
1a00447c:	e78a      	b.n	1a004394 <_vfiprintf_r+0xc0>
1a00447e:	2300      	movs	r3, #0
1a004480:	f108 0801 	add.w	r8, r8, #1
1a004484:	9305      	str	r3, [sp, #20]
1a004486:	4619      	mov	r1, r3
1a004488:	250a      	movs	r5, #10
1a00448a:	4640      	mov	r0, r8
1a00448c:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004490:	3a30      	subs	r2, #48	; 0x30
1a004492:	2a09      	cmp	r2, #9
1a004494:	d903      	bls.n	1a00449e <_vfiprintf_r+0x1ca>
1a004496:	2b00      	cmp	r3, #0
1a004498:	d0c3      	beq.n	1a004422 <_vfiprintf_r+0x14e>
1a00449a:	9105      	str	r1, [sp, #20]
1a00449c:	e7c1      	b.n	1a004422 <_vfiprintf_r+0x14e>
1a00449e:	fb05 2101 	mla	r1, r5, r1, r2
1a0044a2:	2301      	movs	r3, #1
1a0044a4:	4680      	mov	r8, r0
1a0044a6:	e7f0      	b.n	1a00448a <_vfiprintf_r+0x1b6>
1a0044a8:	ab03      	add	r3, sp, #12
1a0044aa:	9300      	str	r3, [sp, #0]
1a0044ac:	4622      	mov	r2, r4
1a0044ae:	4b13      	ldr	r3, [pc, #76]	; (1a0044fc <_vfiprintf_r+0x228>)
1a0044b0:	a904      	add	r1, sp, #16
1a0044b2:	4630      	mov	r0, r6
1a0044b4:	f3af 8000 	nop.w
1a0044b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0044bc:	4681      	mov	r9, r0
1a0044be:	d1d5      	bne.n	1a00446c <_vfiprintf_r+0x198>
1a0044c0:	89a3      	ldrh	r3, [r4, #12]
1a0044c2:	065b      	lsls	r3, r3, #25
1a0044c4:	f53f af7e 	bmi.w	1a0043c4 <_vfiprintf_r+0xf0>
1a0044c8:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0044ca:	e77d      	b.n	1a0043c8 <_vfiprintf_r+0xf4>
1a0044cc:	ab03      	add	r3, sp, #12
1a0044ce:	9300      	str	r3, [sp, #0]
1a0044d0:	4622      	mov	r2, r4
1a0044d2:	4b0a      	ldr	r3, [pc, #40]	; (1a0044fc <_vfiprintf_r+0x228>)
1a0044d4:	a904      	add	r1, sp, #16
1a0044d6:	4630      	mov	r0, r6
1a0044d8:	f000 f888 	bl	1a0045ec <_printf_i>
1a0044dc:	e7ec      	b.n	1a0044b8 <_vfiprintf_r+0x1e4>
1a0044de:	bf00      	nop
1a0044e0:	1a004c54 	.word	0x1a004c54
1a0044e4:	1a004c98 	.word	0x1a004c98
1a0044e8:	1a004c74 	.word	0x1a004c74
1a0044ec:	1a004c34 	.word	0x1a004c34
1a0044f0:	1a004c9e 	.word	0x1a004c9e
1a0044f4:	1a004ca2 	.word	0x1a004ca2
1a0044f8:	00000000 	.word	0x00000000
1a0044fc:	1a0042af 	.word	0x1a0042af

1a004500 <_printf_common>:
1a004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004504:	4691      	mov	r9, r2
1a004506:	461f      	mov	r7, r3
1a004508:	688a      	ldr	r2, [r1, #8]
1a00450a:	690b      	ldr	r3, [r1, #16]
1a00450c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004510:	4293      	cmp	r3, r2
1a004512:	bfb8      	it	lt
1a004514:	4613      	movlt	r3, r2
1a004516:	f8c9 3000 	str.w	r3, [r9]
1a00451a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00451e:	4606      	mov	r6, r0
1a004520:	460c      	mov	r4, r1
1a004522:	b112      	cbz	r2, 1a00452a <_printf_common+0x2a>
1a004524:	3301      	adds	r3, #1
1a004526:	f8c9 3000 	str.w	r3, [r9]
1a00452a:	6823      	ldr	r3, [r4, #0]
1a00452c:	0699      	lsls	r1, r3, #26
1a00452e:	bf42      	ittt	mi
1a004530:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004534:	3302      	addmi	r3, #2
1a004536:	f8c9 3000 	strmi.w	r3, [r9]
1a00453a:	6825      	ldr	r5, [r4, #0]
1a00453c:	f015 0506 	ands.w	r5, r5, #6
1a004540:	d107      	bne.n	1a004552 <_printf_common+0x52>
1a004542:	f104 0a19 	add.w	sl, r4, #25
1a004546:	68e3      	ldr	r3, [r4, #12]
1a004548:	f8d9 2000 	ldr.w	r2, [r9]
1a00454c:	1a9b      	subs	r3, r3, r2
1a00454e:	42ab      	cmp	r3, r5
1a004550:	dc28      	bgt.n	1a0045a4 <_printf_common+0xa4>
1a004552:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004556:	6822      	ldr	r2, [r4, #0]
1a004558:	3300      	adds	r3, #0
1a00455a:	bf18      	it	ne
1a00455c:	2301      	movne	r3, #1
1a00455e:	0692      	lsls	r2, r2, #26
1a004560:	d42d      	bmi.n	1a0045be <_printf_common+0xbe>
1a004562:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004566:	4639      	mov	r1, r7
1a004568:	4630      	mov	r0, r6
1a00456a:	47c0      	blx	r8
1a00456c:	3001      	adds	r0, #1
1a00456e:	d020      	beq.n	1a0045b2 <_printf_common+0xb2>
1a004570:	6823      	ldr	r3, [r4, #0]
1a004572:	68e5      	ldr	r5, [r4, #12]
1a004574:	f8d9 2000 	ldr.w	r2, [r9]
1a004578:	f003 0306 	and.w	r3, r3, #6
1a00457c:	2b04      	cmp	r3, #4
1a00457e:	bf08      	it	eq
1a004580:	1aad      	subeq	r5, r5, r2
1a004582:	68a3      	ldr	r3, [r4, #8]
1a004584:	6922      	ldr	r2, [r4, #16]
1a004586:	bf0c      	ite	eq
1a004588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00458c:	2500      	movne	r5, #0
1a00458e:	4293      	cmp	r3, r2
1a004590:	bfc4      	itt	gt
1a004592:	1a9b      	subgt	r3, r3, r2
1a004594:	18ed      	addgt	r5, r5, r3
1a004596:	f04f 0900 	mov.w	r9, #0
1a00459a:	341a      	adds	r4, #26
1a00459c:	454d      	cmp	r5, r9
1a00459e:	d11a      	bne.n	1a0045d6 <_printf_common+0xd6>
1a0045a0:	2000      	movs	r0, #0
1a0045a2:	e008      	b.n	1a0045b6 <_printf_common+0xb6>
1a0045a4:	2301      	movs	r3, #1
1a0045a6:	4652      	mov	r2, sl
1a0045a8:	4639      	mov	r1, r7
1a0045aa:	4630      	mov	r0, r6
1a0045ac:	47c0      	blx	r8
1a0045ae:	3001      	adds	r0, #1
1a0045b0:	d103      	bne.n	1a0045ba <_printf_common+0xba>
1a0045b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0045ba:	3501      	adds	r5, #1
1a0045bc:	e7c3      	b.n	1a004546 <_printf_common+0x46>
1a0045be:	18e1      	adds	r1, r4, r3
1a0045c0:	1c5a      	adds	r2, r3, #1
1a0045c2:	2030      	movs	r0, #48	; 0x30
1a0045c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0045c8:	4422      	add	r2, r4
1a0045ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0045ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0045d2:	3302      	adds	r3, #2
1a0045d4:	e7c5      	b.n	1a004562 <_printf_common+0x62>
1a0045d6:	2301      	movs	r3, #1
1a0045d8:	4622      	mov	r2, r4
1a0045da:	4639      	mov	r1, r7
1a0045dc:	4630      	mov	r0, r6
1a0045de:	47c0      	blx	r8
1a0045e0:	3001      	adds	r0, #1
1a0045e2:	d0e6      	beq.n	1a0045b2 <_printf_common+0xb2>
1a0045e4:	f109 0901 	add.w	r9, r9, #1
1a0045e8:	e7d8      	b.n	1a00459c <_printf_common+0x9c>
1a0045ea:	Address 0x000000001a0045ea is out of bounds.


1a0045ec <_printf_i>:
1a0045ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0045f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a0045f4:	460c      	mov	r4, r1
1a0045f6:	7e09      	ldrb	r1, [r1, #24]
1a0045f8:	b085      	sub	sp, #20
1a0045fa:	296e      	cmp	r1, #110	; 0x6e
1a0045fc:	4617      	mov	r7, r2
1a0045fe:	4606      	mov	r6, r0
1a004600:	4698      	mov	r8, r3
1a004602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004604:	f000 80b3 	beq.w	1a00476e <_printf_i+0x182>
1a004608:	d822      	bhi.n	1a004650 <_printf_i+0x64>
1a00460a:	2963      	cmp	r1, #99	; 0x63
1a00460c:	d036      	beq.n	1a00467c <_printf_i+0x90>
1a00460e:	d80a      	bhi.n	1a004626 <_printf_i+0x3a>
1a004610:	2900      	cmp	r1, #0
1a004612:	f000 80b9 	beq.w	1a004788 <_printf_i+0x19c>
1a004616:	2958      	cmp	r1, #88	; 0x58
1a004618:	f000 8083 	beq.w	1a004722 <_printf_i+0x136>
1a00461c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004620:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004624:	e032      	b.n	1a00468c <_printf_i+0xa0>
1a004626:	2964      	cmp	r1, #100	; 0x64
1a004628:	d001      	beq.n	1a00462e <_printf_i+0x42>
1a00462a:	2969      	cmp	r1, #105	; 0x69
1a00462c:	d1f6      	bne.n	1a00461c <_printf_i+0x30>
1a00462e:	6820      	ldr	r0, [r4, #0]
1a004630:	6813      	ldr	r3, [r2, #0]
1a004632:	0605      	lsls	r5, r0, #24
1a004634:	f103 0104 	add.w	r1, r3, #4
1a004638:	d52a      	bpl.n	1a004690 <_printf_i+0xa4>
1a00463a:	681b      	ldr	r3, [r3, #0]
1a00463c:	6011      	str	r1, [r2, #0]
1a00463e:	2b00      	cmp	r3, #0
1a004640:	da03      	bge.n	1a00464a <_printf_i+0x5e>
1a004642:	222d      	movs	r2, #45	; 0x2d
1a004644:	425b      	negs	r3, r3
1a004646:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a00464a:	486f      	ldr	r0, [pc, #444]	; (1a004808 <_printf_i+0x21c>)
1a00464c:	220a      	movs	r2, #10
1a00464e:	e039      	b.n	1a0046c4 <_printf_i+0xd8>
1a004650:	2973      	cmp	r1, #115	; 0x73
1a004652:	f000 809d 	beq.w	1a004790 <_printf_i+0x1a4>
1a004656:	d808      	bhi.n	1a00466a <_printf_i+0x7e>
1a004658:	296f      	cmp	r1, #111	; 0x6f
1a00465a:	d020      	beq.n	1a00469e <_printf_i+0xb2>
1a00465c:	2970      	cmp	r1, #112	; 0x70
1a00465e:	d1dd      	bne.n	1a00461c <_printf_i+0x30>
1a004660:	6823      	ldr	r3, [r4, #0]
1a004662:	f043 0320 	orr.w	r3, r3, #32
1a004666:	6023      	str	r3, [r4, #0]
1a004668:	e003      	b.n	1a004672 <_printf_i+0x86>
1a00466a:	2975      	cmp	r1, #117	; 0x75
1a00466c:	d017      	beq.n	1a00469e <_printf_i+0xb2>
1a00466e:	2978      	cmp	r1, #120	; 0x78
1a004670:	d1d4      	bne.n	1a00461c <_printf_i+0x30>
1a004672:	2378      	movs	r3, #120	; 0x78
1a004674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004678:	4864      	ldr	r0, [pc, #400]	; (1a00480c <_printf_i+0x220>)
1a00467a:	e055      	b.n	1a004728 <_printf_i+0x13c>
1a00467c:	6813      	ldr	r3, [r2, #0]
1a00467e:	1d19      	adds	r1, r3, #4
1a004680:	681b      	ldr	r3, [r3, #0]
1a004682:	6011      	str	r1, [r2, #0]
1a004684:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00468c:	2301      	movs	r3, #1
1a00468e:	e08c      	b.n	1a0047aa <_printf_i+0x1be>
1a004690:	681b      	ldr	r3, [r3, #0]
1a004692:	6011      	str	r1, [r2, #0]
1a004694:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004698:	bf18      	it	ne
1a00469a:	b21b      	sxthne	r3, r3
1a00469c:	e7cf      	b.n	1a00463e <_printf_i+0x52>
1a00469e:	6813      	ldr	r3, [r2, #0]
1a0046a0:	6825      	ldr	r5, [r4, #0]
1a0046a2:	1d18      	adds	r0, r3, #4
1a0046a4:	6010      	str	r0, [r2, #0]
1a0046a6:	0628      	lsls	r0, r5, #24
1a0046a8:	d501      	bpl.n	1a0046ae <_printf_i+0xc2>
1a0046aa:	681b      	ldr	r3, [r3, #0]
1a0046ac:	e002      	b.n	1a0046b4 <_printf_i+0xc8>
1a0046ae:	0668      	lsls	r0, r5, #25
1a0046b0:	d5fb      	bpl.n	1a0046aa <_printf_i+0xbe>
1a0046b2:	881b      	ldrh	r3, [r3, #0]
1a0046b4:	4854      	ldr	r0, [pc, #336]	; (1a004808 <_printf_i+0x21c>)
1a0046b6:	296f      	cmp	r1, #111	; 0x6f
1a0046b8:	bf14      	ite	ne
1a0046ba:	220a      	movne	r2, #10
1a0046bc:	2208      	moveq	r2, #8
1a0046be:	2100      	movs	r1, #0
1a0046c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0046c4:	6865      	ldr	r5, [r4, #4]
1a0046c6:	60a5      	str	r5, [r4, #8]
1a0046c8:	2d00      	cmp	r5, #0
1a0046ca:	f2c0 8095 	blt.w	1a0047f8 <_printf_i+0x20c>
1a0046ce:	6821      	ldr	r1, [r4, #0]
1a0046d0:	f021 0104 	bic.w	r1, r1, #4
1a0046d4:	6021      	str	r1, [r4, #0]
1a0046d6:	2b00      	cmp	r3, #0
1a0046d8:	d13d      	bne.n	1a004756 <_printf_i+0x16a>
1a0046da:	2d00      	cmp	r5, #0
1a0046dc:	f040 808e 	bne.w	1a0047fc <_printf_i+0x210>
1a0046e0:	4665      	mov	r5, ip
1a0046e2:	2a08      	cmp	r2, #8
1a0046e4:	d10b      	bne.n	1a0046fe <_printf_i+0x112>
1a0046e6:	6823      	ldr	r3, [r4, #0]
1a0046e8:	07db      	lsls	r3, r3, #31
1a0046ea:	d508      	bpl.n	1a0046fe <_printf_i+0x112>
1a0046ec:	6923      	ldr	r3, [r4, #16]
1a0046ee:	6862      	ldr	r2, [r4, #4]
1a0046f0:	429a      	cmp	r2, r3
1a0046f2:	bfde      	ittt	le
1a0046f4:	2330      	movle	r3, #48	; 0x30
1a0046f6:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0046fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0046fe:	ebac 0305 	sub.w	r3, ip, r5
1a004702:	6123      	str	r3, [r4, #16]
1a004704:	f8cd 8000 	str.w	r8, [sp]
1a004708:	463b      	mov	r3, r7
1a00470a:	aa03      	add	r2, sp, #12
1a00470c:	4621      	mov	r1, r4
1a00470e:	4630      	mov	r0, r6
1a004710:	f7ff fef6 	bl	1a004500 <_printf_common>
1a004714:	3001      	adds	r0, #1
1a004716:	d14d      	bne.n	1a0047b4 <_printf_i+0x1c8>
1a004718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00471c:	b005      	add	sp, #20
1a00471e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004722:	4839      	ldr	r0, [pc, #228]	; (1a004808 <_printf_i+0x21c>)
1a004724:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004728:	6813      	ldr	r3, [r2, #0]
1a00472a:	6821      	ldr	r1, [r4, #0]
1a00472c:	1d1d      	adds	r5, r3, #4
1a00472e:	681b      	ldr	r3, [r3, #0]
1a004730:	6015      	str	r5, [r2, #0]
1a004732:	060a      	lsls	r2, r1, #24
1a004734:	d50b      	bpl.n	1a00474e <_printf_i+0x162>
1a004736:	07ca      	lsls	r2, r1, #31
1a004738:	bf44      	itt	mi
1a00473a:	f041 0120 	orrmi.w	r1, r1, #32
1a00473e:	6021      	strmi	r1, [r4, #0]
1a004740:	b91b      	cbnz	r3, 1a00474a <_printf_i+0x15e>
1a004742:	6822      	ldr	r2, [r4, #0]
1a004744:	f022 0220 	bic.w	r2, r2, #32
1a004748:	6022      	str	r2, [r4, #0]
1a00474a:	2210      	movs	r2, #16
1a00474c:	e7b7      	b.n	1a0046be <_printf_i+0xd2>
1a00474e:	064d      	lsls	r5, r1, #25
1a004750:	bf48      	it	mi
1a004752:	b29b      	uxthmi	r3, r3
1a004754:	e7ef      	b.n	1a004736 <_printf_i+0x14a>
1a004756:	4665      	mov	r5, ip
1a004758:	fbb3 f1f2 	udiv	r1, r3, r2
1a00475c:	fb02 3311 	mls	r3, r2, r1, r3
1a004760:	5cc3      	ldrb	r3, [r0, r3]
1a004762:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004766:	460b      	mov	r3, r1
1a004768:	2900      	cmp	r1, #0
1a00476a:	d1f5      	bne.n	1a004758 <_printf_i+0x16c>
1a00476c:	e7b9      	b.n	1a0046e2 <_printf_i+0xf6>
1a00476e:	6813      	ldr	r3, [r2, #0]
1a004770:	6825      	ldr	r5, [r4, #0]
1a004772:	6961      	ldr	r1, [r4, #20]
1a004774:	1d18      	adds	r0, r3, #4
1a004776:	6010      	str	r0, [r2, #0]
1a004778:	0628      	lsls	r0, r5, #24
1a00477a:	681b      	ldr	r3, [r3, #0]
1a00477c:	d501      	bpl.n	1a004782 <_printf_i+0x196>
1a00477e:	6019      	str	r1, [r3, #0]
1a004780:	e002      	b.n	1a004788 <_printf_i+0x19c>
1a004782:	066a      	lsls	r2, r5, #25
1a004784:	d5fb      	bpl.n	1a00477e <_printf_i+0x192>
1a004786:	8019      	strh	r1, [r3, #0]
1a004788:	2300      	movs	r3, #0
1a00478a:	6123      	str	r3, [r4, #16]
1a00478c:	4665      	mov	r5, ip
1a00478e:	e7b9      	b.n	1a004704 <_printf_i+0x118>
1a004790:	6813      	ldr	r3, [r2, #0]
1a004792:	1d19      	adds	r1, r3, #4
1a004794:	6011      	str	r1, [r2, #0]
1a004796:	681d      	ldr	r5, [r3, #0]
1a004798:	6862      	ldr	r2, [r4, #4]
1a00479a:	2100      	movs	r1, #0
1a00479c:	4628      	mov	r0, r5
1a00479e:	f000 f837 	bl	1a004810 <memchr>
1a0047a2:	b108      	cbz	r0, 1a0047a8 <_printf_i+0x1bc>
1a0047a4:	1b40      	subs	r0, r0, r5
1a0047a6:	6060      	str	r0, [r4, #4]
1a0047a8:	6863      	ldr	r3, [r4, #4]
1a0047aa:	6123      	str	r3, [r4, #16]
1a0047ac:	2300      	movs	r3, #0
1a0047ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0047b2:	e7a7      	b.n	1a004704 <_printf_i+0x118>
1a0047b4:	6923      	ldr	r3, [r4, #16]
1a0047b6:	462a      	mov	r2, r5
1a0047b8:	4639      	mov	r1, r7
1a0047ba:	4630      	mov	r0, r6
1a0047bc:	47c0      	blx	r8
1a0047be:	3001      	adds	r0, #1
1a0047c0:	d0aa      	beq.n	1a004718 <_printf_i+0x12c>
1a0047c2:	6823      	ldr	r3, [r4, #0]
1a0047c4:	079b      	lsls	r3, r3, #30
1a0047c6:	d413      	bmi.n	1a0047f0 <_printf_i+0x204>
1a0047c8:	68e0      	ldr	r0, [r4, #12]
1a0047ca:	9b03      	ldr	r3, [sp, #12]
1a0047cc:	4298      	cmp	r0, r3
1a0047ce:	bfb8      	it	lt
1a0047d0:	4618      	movlt	r0, r3
1a0047d2:	e7a3      	b.n	1a00471c <_printf_i+0x130>
1a0047d4:	2301      	movs	r3, #1
1a0047d6:	464a      	mov	r2, r9
1a0047d8:	4639      	mov	r1, r7
1a0047da:	4630      	mov	r0, r6
1a0047dc:	47c0      	blx	r8
1a0047de:	3001      	adds	r0, #1
1a0047e0:	d09a      	beq.n	1a004718 <_printf_i+0x12c>
1a0047e2:	3501      	adds	r5, #1
1a0047e4:	68e3      	ldr	r3, [r4, #12]
1a0047e6:	9a03      	ldr	r2, [sp, #12]
1a0047e8:	1a9b      	subs	r3, r3, r2
1a0047ea:	42ab      	cmp	r3, r5
1a0047ec:	dcf2      	bgt.n	1a0047d4 <_printf_i+0x1e8>
1a0047ee:	e7eb      	b.n	1a0047c8 <_printf_i+0x1dc>
1a0047f0:	2500      	movs	r5, #0
1a0047f2:	f104 0919 	add.w	r9, r4, #25
1a0047f6:	e7f5      	b.n	1a0047e4 <_printf_i+0x1f8>
1a0047f8:	2b00      	cmp	r3, #0
1a0047fa:	d1ac      	bne.n	1a004756 <_printf_i+0x16a>
1a0047fc:	7803      	ldrb	r3, [r0, #0]
1a0047fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004802:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004806:	e76c      	b.n	1a0046e2 <_printf_i+0xf6>
1a004808:	1a004ca9 	.word	0x1a004ca9
1a00480c:	1a004cba 	.word	0x1a004cba

1a004810 <memchr>:
1a004810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004814:	2a10      	cmp	r2, #16
1a004816:	db2b      	blt.n	1a004870 <memchr+0x60>
1a004818:	f010 0f07 	tst.w	r0, #7
1a00481c:	d008      	beq.n	1a004830 <memchr+0x20>
1a00481e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004822:	3a01      	subs	r2, #1
1a004824:	428b      	cmp	r3, r1
1a004826:	d02d      	beq.n	1a004884 <memchr+0x74>
1a004828:	f010 0f07 	tst.w	r0, #7
1a00482c:	b342      	cbz	r2, 1a004880 <memchr+0x70>
1a00482e:	d1f6      	bne.n	1a00481e <memchr+0xe>
1a004830:	b4f0      	push	{r4, r5, r6, r7}
1a004832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00483a:	f022 0407 	bic.w	r4, r2, #7
1a00483e:	f07f 0700 	mvns.w	r7, #0
1a004842:	2300      	movs	r3, #0
1a004844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004848:	3c08      	subs	r4, #8
1a00484a:	ea85 0501 	eor.w	r5, r5, r1
1a00484e:	ea86 0601 	eor.w	r6, r6, r1
1a004852:	fa85 f547 	uadd8	r5, r5, r7
1a004856:	faa3 f587 	sel	r5, r3, r7
1a00485a:	fa86 f647 	uadd8	r6, r6, r7
1a00485e:	faa5 f687 	sel	r6, r5, r7
1a004862:	b98e      	cbnz	r6, 1a004888 <memchr+0x78>
1a004864:	d1ee      	bne.n	1a004844 <memchr+0x34>
1a004866:	bcf0      	pop	{r4, r5, r6, r7}
1a004868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00486c:	f002 0207 	and.w	r2, r2, #7
1a004870:	b132      	cbz	r2, 1a004880 <memchr+0x70>
1a004872:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004876:	3a01      	subs	r2, #1
1a004878:	ea83 0301 	eor.w	r3, r3, r1
1a00487c:	b113      	cbz	r3, 1a004884 <memchr+0x74>
1a00487e:	d1f8      	bne.n	1a004872 <memchr+0x62>
1a004880:	2000      	movs	r0, #0
1a004882:	4770      	bx	lr
1a004884:	3801      	subs	r0, #1
1a004886:	4770      	bx	lr
1a004888:	2d00      	cmp	r5, #0
1a00488a:	bf06      	itte	eq
1a00488c:	4635      	moveq	r5, r6
1a00488e:	3803      	subeq	r0, #3
1a004890:	3807      	subne	r0, #7
1a004892:	f015 0f01 	tst.w	r5, #1
1a004896:	d107      	bne.n	1a0048a8 <memchr+0x98>
1a004898:	3001      	adds	r0, #1
1a00489a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00489e:	bf02      	ittt	eq
1a0048a0:	3001      	addeq	r0, #1
1a0048a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0048a6:	3001      	addeq	r0, #1
1a0048a8:	bcf0      	pop	{r4, r5, r6, r7}
1a0048aa:	3801      	subs	r0, #1
1a0048ac:	4770      	bx	lr
1a0048ae:	bf00      	nop
1a0048b0:	616c6f68 	.word	0x616c6f68
1a0048b4:	ffff000d 	.word	0xffff000d
1a0048b8:	65726154 	.word	0x65726154
1a0048bc:	75705f61 	.word	0x75705f61
1a0048c0:	6461736c 	.word	0x6461736c
1a0048c4:	0000726f 	.word	0x0000726f
1a0048c8:	65726154 	.word	0x65726154
1a0048cc:	6c625f61 	.word	0x6c625f61
1a0048d0:	5f6b6e69 	.word	0x5f6b6e69
1a0048d4:	64726576 	.word	0x64726576
1a0048d8:	00000065 	.word	0x00000065
1a0048dc:	65726154 	.word	0x65726154
1a0048e0:	6c625f61 	.word	0x6c625f61
1a0048e4:	5f6b6e69 	.word	0x5f6b6e69
1a0048e8:	72616d61 	.word	0x72616d61
1a0048ec:	6f6c6c69 	.word	0x6f6c6c69
1a0048f0:	00000000 	.word	0x00000000
1a0048f4:	65726154 	.word	0x65726154
1a0048f8:	6c625f61 	.word	0x6c625f61
1a0048fc:	5f6b6e69 	.word	0x5f6b6e69
1a004900:	6f6a6f72 	.word	0x6f6a6f72
1a004904:	ffffff00 	.word	0xffffff00
1a004908:	6c707041 	.word	0x6c707041
1a00490c:	74616369 	.word	0x74616369
1a004910:	206e6f69 	.word	0x206e6f69
1a004914:	6c6c614d 	.word	0x6c6c614d
1a004918:	4620636f 	.word	0x4620636f
1a00491c:	656c6961 	.word	0x656c6961
1a004920:	6f482064 	.word	0x6f482064
1a004924:	0d216b6f 	.word	0x0d216b6f
1a004928:	00000000 	.word	0x00000000
1a00492c:	7362696c 	.word	0x7362696c
1a004930:	6572662f 	.word	0x6572662f
1a004934:	6f747265 	.word	0x6f747265
1a004938:	6f732f73 	.word	0x6f732f73
1a00493c:	65637275 	.word	0x65637275
1a004940:	6f6f682f 	.word	0x6f6f682f
1a004944:	632e736b 	.word	0x632e736b
1a004948:	ffffff00 	.word	0xffffff00
1a00494c:	70410a0d 	.word	0x70410a0d
1a004950:	63696c70 	.word	0x63696c70
1a004954:	6f697461 	.word	0x6f697461
1a004958:	7453206e 	.word	0x7453206e
1a00495c:	206b6361 	.word	0x206b6361
1a004960:	7265764f 	.word	0x7265764f
1a004964:	776f6c66 	.word	0x776f6c66
1a004968:	6f202121 	.word	0x6f202121
1a00496c:	6154206e 	.word	0x6154206e
1a004970:	203a6b73 	.word	0x203a6b73
1a004974:	0a0d7325 	.word	0x0a0d7325
1a004978:	ffffff00 	.word	0xffffff00
1a00497c:	41760a0d 	.word	0x41760a0d
1a004980:	72657373 	.word	0x72657373
1a004984:	6c614374 	.word	0x6c614374
1a004988:	2864656c 	.word	0x2864656c
1a00498c:	200a0d29 	.word	0x200a0d29
1a004990:	4c4c2020 	.word	0x4c4c2020
1a004994:	20656e69 	.word	0x20656e69
1a004998:	626d754e 	.word	0x626d754e
1a00499c:	3d207265 	.word	0x3d207265
1a0049a0:	0d642520 	.word	0x0d642520
1a0049a4:	2020200a 	.word	0x2020200a
1a0049a8:	656c6946 	.word	0x656c6946
1a0049ac:	6d614e20 	.word	0x6d614e20
1a0049b0:	203d2065 	.word	0x203d2065
1a0049b4:	0a0d7325 	.word	0x0a0d7325
1a0049b8:	ff000a0d 	.word	0xff000a0d
1a0049bc:	454c4449 	.word	0x454c4449
1a0049c0:	ffffff00 	.word	0xffffff00
1a0049c4:	51726d54 	.word	0x51726d54
1a0049c8:	ffffff00 	.word	0xffffff00
1a0049cc:	20726d54 	.word	0x20726d54
1a0049d0:	00637653 	.word	0x00637653

1a0049d4 <ExtRateIn>:
1a0049d4:	00000000                                ....

1a0049d8 <GpioButtons>:
1a0049d8:	08000400 09010900                       ........

1a0049e0 <GpioLeds>:
1a0049e0:	01050005 0e000205 0c010b01              ............

1a0049ec <GpioPorts>:
1a0049ec:	03030003 0f050403 05031005 07030603     ................
1a0049fc:	ffff0802                                ....

1a004a00 <OscRateIn>:
1a004a00:	00b71b00                                ....

1a004a04 <InitClkStates>:
1a004a04:	01010f01                                ....

1a004a08 <pinmuxing>:
1a004a08:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004a18:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004a28:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004a38:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004a48:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004a58:	00d50301 00d50401 00160107 00560207     ..............V.
1a004a68:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004a78:	00570206                                ..W.

1a004a7c <UART_BClock>:
1a004a7c:	01a201c2 01620182                       ......b.

1a004a84 <UART_PClock>:
1a004a84:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004a94:	000000ff                                ....

1a004a98 <periph_to_base>:
1a004a98:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004aa8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004ab8:	000100e0 01000100 01200003 00060120     .......... . ...
1a004ac8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004ad8:	01820013 00120182 01a201a2 01c20011     ................
1a004ae8:	001001c2 01e201e2 0202000f 000e0202     ................
1a004af8:	02220222 0223000d 001c0223              "."...#.#...

1a004b04 <InitClkStates>:
1a004b04:	00010100 00010909 0001090a 01010701     ................
1a004b14:	00010902 00010906 0101090c 0001090d     ................
1a004b24:	0001090e 0001090f 00010910 00010911     ................
1a004b34:	00010912 00010913 00011114 00011119     ................
1a004b44:	0001111a 0001111b                       ........

1a004b4c <gpioPinsInit>:
1a004b4c:	02000104 00050701 05010d03 04080100     ................
1a004b5c:	02020002 02000304 00000403 04070002     ................
1a004b6c:	030c0300 09050402 05040103 04030208     ................
1a004b7c:	04020305 06040504 0802000c 03000b06     ................
1a004b8c:	00090607 07060503 060f0504 03030004     ................
1a004b9c:	02000404 00050404 06040502 04060200     ................
1a004bac:	0c050408 05040a04 0003010e 14010a00     ................
1a004bbc:	010f0000 0d000012 00001101 0010010c     ................
1a004bcc:	07070300 000f0300 01000001 00000000     ................
1a004bdc:	000a0600 08060603 06100504 04030005     ................
1a004bec:	03000106 04090400 04010d05 010b0000     ................
1a004bfc:	0200000f 00000001 00010104 02010800     ................
1a004c0c:	01090000 09010006 05040002 04010200     ................
1a004c1c:	02020105 02020504 0e00000a 01000b02     ................
1a004c2c:	000c020b ffff0c01                       ........

1a004c34 <__sf_fake_stderr>:
	...

1a004c54 <__sf_fake_stdin>:
	...

1a004c74 <__sf_fake_stdout>:
	...

1a004c94 <_global_impure_ptr>:
1a004c94:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a004ca4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004cb4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004cc4:	64636261 ff006665                       abcdef..
